{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.1", "generated_at": "2024-02-20T19:38:25.192992Z", "invocation_id": "7d05597f-1e75-41df-a9b8-5eca5c835afb", "env": {}, "project_name": "my_new_project", "project_id": "faebc42304447d4427374f806679ecb5", "user_id": "e607f749-4294-4b15-833b-0ae4a87d4d24", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.my_new_project.my_first_dbt_model": {"database": "dbt-package-testing", "schema": "zz_dbt_renee", "name": "my_first_dbt_model", "resource_type": "model", "package_name": "my_new_project", "path": "example/my_first_dbt_model.sql", "original_file_path": "models/example/my_first_dbt_model.sql", "unique_id": "model.my_new_project.my_first_dbt_model", "fqn": ["my_new_project", "example", "my_first_dbt_model"], "alias": "my_first_dbt_model", "checksum": {"name": "sha256", "checksum": "0f0a39768ca58b1f5b1e85acbb46843e16a97d88db12e7a25d1533b2e8f77b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "my_new_project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1708457909.135208, "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`", "raw_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/my_new_project/models/example/my_first_dbt_model.sql", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.my_new_project.my_second_dbt_model": {"database": "dbt-package-testing", "schema": "zz_dbt_renee", "name": "my_second_dbt_model", "resource_type": "model", "package_name": "my_new_project", "path": "example/my_second_dbt_model.sql", "original_file_path": "models/example/my_second_dbt_model.sql", "unique_id": "model.my_new_project.my_second_dbt_model", "fqn": ["my_new_project", "example", "my_second_dbt_model"], "alias": "my_second_dbt_model", "checksum": {"name": "sha256", "checksum": "dc8c458292bc2fb8ce4591cb70c1e23046e3c2e33fb1c2ce732658f90e231f1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "my_new_project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.136039, "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`", "raw_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1", "language": "sql", "refs": [{"name": "my_first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "compiled_path": "target/compiled/my_new_project/models/example/my_second_dbt_model.sql", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.workday__employee_overview": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "workday__employee_overview", "resource_type": "model", "package_name": "workday", "path": "workday__employee_overview.sql", "original_file_path": "models/workday__employee_overview.sql", "unique_id": "model.workday.workday__employee_overview", "fqn": ["workday", "workday__employee_overview"], "alias": "workday__employee_overview", "checksum": {"name": "sha256", "checksum": "cc95ee7dafaef52e48c9d3c34a307eaf104bfe18cb196e657d951de077cb338f"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents an employee with enriched personal information and the positions they hold. This helps measure employee demographic and geographical distribution, overall retention and turnover, and compensation analysis of their employees.", "columns": {"worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_code": {"name": "worker_code", "description": "The code associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The identifier for the user associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_id": {"name": "universal_id", "description": "The universal ID associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_user_active": {"name": "is_user_active", "description": "Is the user currently active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed": {"name": "is_employed", "description": "Is the worker currently employed?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_date": {"name": "hire_date", "description": "The date when the worker was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "departure_date": {"name": "departure_date", "description": "The departure date for the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_of_employment": {"name": "days_of_employment", "description": "Number of days employed by the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_terminated": {"name": "is_terminated", "description": "Has the worker been terminated?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_category": {"name": "primary_termination_category", "description": "The primary termination category for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_reason": {"name": "primary_termination_reason", "description": "The primary termination reason for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_regrettable_termination": {"name": "is_regrettable_termination", "description": "Has the worker been regrettably terminated?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_effective_date": {"name": "compensation_effective_date", "description": "Effective date when changes to the worker's compensation take effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_frequency": {"name": "employee_compensation_frequency", "description": "Frequency of payment for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_currency": {"name": "annual_currency_summary_currency", "description": "Currency used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_total_base_pay": {"name": "annual_currency_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_primary_compensation_basis": {"name": "annual_currency_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_currency": {"name": "annual_summary_currency", "description": "Currency used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_total_base_pay": {"name": "annual_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_primary_compensation_basis": {"name": "annual_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_id": {"name": "compensation_grade_id", "description": "Identifier for the compensation grade.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_id": {"name": "compensation_grade_profile_id", "description": "Unique identifier for the compensation grade profile associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_birth": {"name": "date_of_birth", "description": "The date of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The gender of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hispanic_or_latino": {"name": "is_hispanic_or_latino", "description": "lag indicating whether the individual is Hispanic or Latino.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name or surname of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "The actual email address of the person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_codes": {"name": "ethnicity_codes", "description": "String aggregation of all ethnicity codes associated with an individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "military_status": {"name": "military_status", "description": "The military status of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_title": {"name": "business_title", "description": "The business title associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_position_type": {"name": "most_recent_position_type", "description": "The most recent position type of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_location": {"name": "most_recent_location", "description": "The most recent location of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_level": {"name": "most_recent_level", "description": "The most recent level of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fte_percent": {"name": "fte_percent", "description": "The percentage of hours, the employee's scheduled hours divided by the employer's hours for a full-time workweek", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_at_position": {"name": "days_at_position", "description": "The number of days the worker has held their most recent position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_position_start_date": {"name": "most_recent_position_start_date", "description": "The most recent position start date for the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_position_end_date": {"name": "most_recent_position_end_date", "description": "The most recent position end date for the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_position_effective_date": {"name": "most_recent_position_effective_date", "description": "The most recent position effective date for the employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_positions": {"name": "worker_positions", "description": "The number of positions the worker has held", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_levels": {"name": "worker_levels", "description": "The number of levels the worker has worked at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_days": {"name": "position_days", "description": "The days the worker held positions at the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed_one_year": {"name": "is_employed_one_year", "description": "Tracks whether a worker was employed at least one year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed_five_years": {"name": "is_employed_five_years", "description": "Tracks whether a worker was employed at least five years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed_ten_years": {"name": "is_employed_ten_years", "description": "Tracks whether a worker was employed at least ten years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed_twenty_years": {"name": "is_employed_twenty_years", "description": "Tracks whether a worker was employed at least twenty years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_employed_thirty_years": {"name": "is_employed_thirty_years", "description": "Tracks whether a worker was employed at least thirty years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_current_employee_one_year": {"name": "is_current_employee_one_year", "description": "Tracks whether a worker is active for more than a year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_current_employee_five_years": {"name": "is_current_employee_five_years", "description": "Tracks whether a worker is active for more than five years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_current_employee_ten_years": {"name": "is_current_employee_ten_years", "description": "Tracks whether a worker is active for more than ten years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_current_employee_twenty_years": {"name": "is_current_employee_twenty_years", "description": "Tracks whether a worker is active for more than twenty years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_current_employee_thirty_years": {"name": "is_current_employee_thirty_years", "description": "Tracks whether a worker is active for more than thirty years.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "table"}, "created_at": 1708457909.20309, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_workday`.`workday__employee_overview`", "raw_code": "with int_worker_base as (\n\n    select * \n    from {{ ref('int_workday__worker_details') }} \n),\n\nint_worker_personal_details as (\n\n    select * \n    from {{ ref('int_workday__personal_details') }} \n),\n\n\nint_worker_position_enriched as (\n\n    select * \n    from {{ ref('int_workday__worker_position_enriched') }} \n), \n\nworker_employee_enhanced as (\n\n    select \n        int_worker_base.*,\n        first_name,\n        last_name,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino,\n        email_address,\n        ethnicity_codes,\n        military_status,\n        position_id,\n        business_title,\n        job_profile_id,\n        most_recent_position_type,\n        most_recent_location,\n        most_recent_level,\n        fte_percent,\n        days_at_position,\n        most_recent_position_start_date,\n        most_recent_position_end_date,\n        most_recent_position_effective_date,\n        worker_positions,\n        worker_levels,\n        position_days,\n        case when days_of_employment >= 365 \n            then true \n            else false \n        end as is_employed_one_year,\n        case when days_of_employment >= 365*5 \n            then true \n            else false \n        end as is_employed_five_years,\n        case when days_of_employment >= 365*10 \n            then true \n            else false \n        end as is_employed_ten_years,\n        case when days_of_employment >= 365*20 \n            then true \n            else false \n        end as is_employed_twenty_years,\n        case when days_of_employment >= 365*30 \n            then true \n            else false \n        end as is_employed_thirty_years,\n        case when days_of_employment >= 365 and is_user_active \n            then true \n            else false \n        end as is_current_employee_one_year,\n        case when days_of_employment >= 365*5 and is_user_active\n            then true \n            else false \n        end as is_current_employee_five_years,\n        case when days_of_employment >= 365*10 and is_user_active \n            then true \n            else false \n        end as is_current_employee_ten_years,\n        case when days_of_employment >= 365*20 and is_user_active \n            then true \n            else false \n        end as is_current_employee_twenty_years,\n        case when days_of_employment >= 365*30 and is_user_active \n            then true \n            else false \n        end as is_current_employee_thirty_years\n    from int_worker_base\n    left join int_worker_personal_details \n        on int_worker_base.worker_id = int_worker_personal_details.worker_id\n        and int_worker_base.source_relation = int_worker_personal_details.source_relation\n    left join int_worker_position_enriched\n        on int_worker_base.worker_id = int_worker_position_enriched.worker_id\n        and int_worker_base.source_relation = int_worker_position_enriched.source_relation\n)\n\nselect *\nfrom worker_employee_enhanced", "language": "sql", "refs": [{"name": "int_workday__worker_details", "package": null, "version": null}, {"name": "int_workday__personal_details", "package": null, "version": null}, {"name": "int_workday__worker_position_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.workday.int_workday__worker_details", "model.workday.int_workday__personal_details", "model.workday.int_workday__worker_position_enriched"]}, "compiled_path": "target/compiled/workday/models/workday__employee_overview.sql", "compiled": true, "compiled_code": "with  __dbt__cte__int_workday__worker_details as (\nwith worker_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`\n),\n\nworker_details as (\n\n    select \n        worker_id,\n        source_relation,\n        worker_code,\n        user_id,\n        universal_id,\n        case when is_active then true else false end as is_user_active,\n        case when hire_date <= current_date\n            and (termination_date is null or termination_date > current_date)\n            then true \n            else false \n        end as is_employed,\n        hire_date,\n        case when termination_date > current_date then null\n            else termination_date \n        end as departure_date,    \n        case when termination_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(termination_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n        end as days_of_employment,\n        is_terminated,\n        primary_termination_category,\n        primary_termination_reason,\n        case\n            when is_terminated and is_regrettable_termination then true\n            when is_terminated and not is_regrettable_termination then false\n            else null\n        end as is_regrettable_termination, \n        compensation_effective_date,\n        employee_compensation_frequency,\n        annual_currency_summary_currency,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_primary_compensation_basis,\n        annual_summary_currency,\n        annual_summary_total_base_pay,\n        annual_summary_primary_compensation_basis,\n        compensation_grade_id,\n        compensation_grade_profile_id\n    from worker_data\n)\n\nselect * \nfrom worker_details\n),  __dbt__cte__int_workday__personal_details as (\nwith worker_personal_info_data as(\n\n    select \n        worker_id, \n        source_relation,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`\n),\n\nworker_name as (\n\n    select \n        worker_id, \n        source_relation,\n        first_name,\n        last_name\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\n    where lower(person_name_type) = 'preferred'\n),\n\nworker_email as(\n\n    select \n        worker_id,\n        source_relation,\n        email_address\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\n    where lower(email_code) like '%work_primary%'\n),\n\nworker_ethnicity as (\n\n    select \n        worker_id,\n        source_relation,\n        \n    string_agg(distinct ethnicity_code, ', ')\n\n as ethnicity_codes\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\n    group by 1, 2\n),\n\nworker_military as (\n\n    select \n        worker_id,\n        source_relation,\n        true as is_military_service,\n        military_status \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`\n),\n\nworker_personal_details as (\n\n    select \n        worker_personal_info_data.*,\n        worker_name.first_name,\n        worker_name.last_name,\n        worker_email.email_address,\n        worker_ethnicity.ethnicity_codes,\n        worker_military.military_status\n    from worker_personal_info_data\n    left join worker_name \n        on worker_personal_info_data.worker_id = worker_name.worker_id\n        and worker_personal_info_data.source_relation = worker_name.source_relation\n    left join worker_email \n        on worker_personal_info_data.worker_id = worker_email.worker_id\n        and worker_personal_info_data.source_relation = worker_email.source_relation\n    left join worker_ethnicity \n        on worker_personal_info_data.worker_id = worker_ethnicity.worker_id\n        and worker_personal_info_data.source_relation = worker_ethnicity.source_relation\n    left join worker_military\n        on worker_personal_info_data.worker_id = worker_military.worker_id\n        and worker_personal_info_data.source_relation = worker_military.source_relation\n)\n\nselect * \nfrom worker_personal_details\n),  __dbt__cte__int_workday__worker_position_enriched as (\nwith worker_position_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\n),\n\nworker_position_data_enhanced as (\n\n    select \n        worker_id,\n        source_relation,\n        position_id,\n        employee_type, \n        business_title,\n        fte_percent,\n        position_start_date,\n        position_end_date,\n        position_effective_date,\n        position_location,\n        management_level_code,\n        job_profile_id,\n        case when position_end_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(position_end_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n        end as days_at_position,\n        row_number() over (partition by worker_id order by position_end_date desc) as row_number\n    from worker_position_data\n),\n\nworker_position_measures as (\n\n    select \n        worker_id,\n        source_relation,\n        count(distinct position_id) as worker_positions,\n        count(distinct management_level_code) as worker_levels,\n        sum(days_at_position) as position_days\n    from worker_position_data_enhanced\n    group by 1, 2\n),\n\nmost_recent_position as (\n\n    select *\n    from worker_position_data_enhanced\n    where row_number = 1\n),\n\nworker_position_enriched as (\n\n    select\n        most_recent_position.worker_id,\n        most_recent_position.source_relation,\n        most_recent_position.position_id, \n        most_recent_position.business_title,\n        most_recent_position.job_profile_id, \n        most_recent_position.employee_type as most_recent_position_type,\n        most_recent_position.position_location as most_recent_location,\n        most_recent_position.management_level_code as most_recent_level,\n        most_recent_position.fte_percent,\n        most_recent_position.days_at_position,\n        most_recent_position.position_start_date as most_recent_position_start_date,\n        most_recent_position.position_end_date as most_recent_position_end_date,\n        most_recent_position.position_effective_date as most_recent_position_effective_date,\n        worker_position_measures.worker_positions,\n        worker_position_measures.worker_levels, \n        worker_position_measures.position_days\n    from most_recent_position\n    left join worker_position_measures \n        on most_recent_position.worker_id = worker_position_measures.worker_id\n        and most_recent_position.source_relation = worker_position_measures.source_relation\n)\n\nselect * \nfrom worker_position_enriched\n), int_worker_base as (\n\n    select * \n    from __dbt__cte__int_workday__worker_details \n),\n\nint_worker_personal_details as (\n\n    select * \n    from __dbt__cte__int_workday__personal_details \n),\n\n\nint_worker_position_enriched as (\n\n    select * \n    from __dbt__cte__int_workday__worker_position_enriched \n), \n\nworker_employee_enhanced as (\n\n    select \n        int_worker_base.*,\n        first_name,\n        last_name,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino,\n        email_address,\n        ethnicity_codes,\n        military_status,\n        position_id,\n        business_title,\n        job_profile_id,\n        most_recent_position_type,\n        most_recent_location,\n        most_recent_level,\n        fte_percent,\n        days_at_position,\n        most_recent_position_start_date,\n        most_recent_position_end_date,\n        most_recent_position_effective_date,\n        worker_positions,\n        worker_levels,\n        position_days,\n        case when days_of_employment >= 365 \n            then true \n            else false \n        end as is_employed_one_year,\n        case when days_of_employment >= 365*5 \n            then true \n            else false \n        end as is_employed_five_years,\n        case when days_of_employment >= 365*10 \n            then true \n            else false \n        end as is_employed_ten_years,\n        case when days_of_employment >= 365*20 \n            then true \n            else false \n        end as is_employed_twenty_years,\n        case when days_of_employment >= 365*30 \n            then true \n            else false \n        end as is_employed_thirty_years,\n        case when days_of_employment >= 365 and is_user_active \n            then true \n            else false \n        end as is_current_employee_one_year,\n        case when days_of_employment >= 365*5 and is_user_active\n            then true \n            else false \n        end as is_current_employee_five_years,\n        case when days_of_employment >= 365*10 and is_user_active \n            then true \n            else false \n        end as is_current_employee_ten_years,\n        case when days_of_employment >= 365*20 and is_user_active \n            then true \n            else false \n        end as is_current_employee_twenty_years,\n        case when days_of_employment >= 365*30 and is_user_active \n            then true \n            else false \n        end as is_current_employee_thirty_years\n    from int_worker_base\n    left join int_worker_personal_details \n        on int_worker_base.worker_id = int_worker_personal_details.worker_id\n        and int_worker_base.source_relation = int_worker_personal_details.source_relation\n    left join int_worker_position_enriched\n        on int_worker_base.worker_id = int_worker_position_enriched.worker_id\n        and int_worker_base.source_relation = int_worker_position_enriched.source_relation\n)\n\nselect *\nfrom worker_employee_enhanced", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.workday.int_workday__worker_details", "sql": " __dbt__cte__int_workday__worker_details as (\nwith worker_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`\n),\n\nworker_details as (\n\n    select \n        worker_id,\n        source_relation,\n        worker_code,\n        user_id,\n        universal_id,\n        case when is_active then true else false end as is_user_active,\n        case when hire_date <= current_date\n            and (termination_date is null or termination_date > current_date)\n            then true \n            else false \n        end as is_employed,\n        hire_date,\n        case when termination_date > current_date then null\n            else termination_date \n        end as departure_date,    \n        case when termination_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(termination_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n        end as days_of_employment,\n        is_terminated,\n        primary_termination_category,\n        primary_termination_reason,\n        case\n            when is_terminated and is_regrettable_termination then true\n            when is_terminated and not is_regrettable_termination then false\n            else null\n        end as is_regrettable_termination, \n        compensation_effective_date,\n        employee_compensation_frequency,\n        annual_currency_summary_currency,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_primary_compensation_basis,\n        annual_summary_currency,\n        annual_summary_total_base_pay,\n        annual_summary_primary_compensation_basis,\n        compensation_grade_id,\n        compensation_grade_profile_id\n    from worker_data\n)\n\nselect * \nfrom worker_details\n)"}, {"id": "model.workday.int_workday__personal_details", "sql": " __dbt__cte__int_workday__personal_details as (\nwith worker_personal_info_data as(\n\n    select \n        worker_id, \n        source_relation,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`\n),\n\nworker_name as (\n\n    select \n        worker_id, \n        source_relation,\n        first_name,\n        last_name\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\n    where lower(person_name_type) = 'preferred'\n),\n\nworker_email as(\n\n    select \n        worker_id,\n        source_relation,\n        email_address\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\n    where lower(email_code) like '%work_primary%'\n),\n\nworker_ethnicity as (\n\n    select \n        worker_id,\n        source_relation,\n        \n    string_agg(distinct ethnicity_code, ', ')\n\n as ethnicity_codes\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\n    group by 1, 2\n),\n\nworker_military as (\n\n    select \n        worker_id,\n        source_relation,\n        true as is_military_service,\n        military_status \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`\n),\n\nworker_personal_details as (\n\n    select \n        worker_personal_info_data.*,\n        worker_name.first_name,\n        worker_name.last_name,\n        worker_email.email_address,\n        worker_ethnicity.ethnicity_codes,\n        worker_military.military_status\n    from worker_personal_info_data\n    left join worker_name \n        on worker_personal_info_data.worker_id = worker_name.worker_id\n        and worker_personal_info_data.source_relation = worker_name.source_relation\n    left join worker_email \n        on worker_personal_info_data.worker_id = worker_email.worker_id\n        and worker_personal_info_data.source_relation = worker_email.source_relation\n    left join worker_ethnicity \n        on worker_personal_info_data.worker_id = worker_ethnicity.worker_id\n        and worker_personal_info_data.source_relation = worker_ethnicity.source_relation\n    left join worker_military\n        on worker_personal_info_data.worker_id = worker_military.worker_id\n        and worker_personal_info_data.source_relation = worker_military.source_relation\n)\n\nselect * \nfrom worker_personal_details\n)"}, {"id": "model.workday.int_workday__worker_position_enriched", "sql": " __dbt__cte__int_workday__worker_position_enriched as (\nwith worker_position_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\n),\n\nworker_position_data_enhanced as (\n\n    select \n        worker_id,\n        source_relation,\n        position_id,\n        employee_type, \n        business_title,\n        fte_percent,\n        position_start_date,\n        position_end_date,\n        position_effective_date,\n        position_location,\n        management_level_code,\n        job_profile_id,\n        case when position_end_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(position_end_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n        end as days_at_position,\n        row_number() over (partition by worker_id order by position_end_date desc) as row_number\n    from worker_position_data\n),\n\nworker_position_measures as (\n\n    select \n        worker_id,\n        source_relation,\n        count(distinct position_id) as worker_positions,\n        count(distinct management_level_code) as worker_levels,\n        sum(days_at_position) as position_days\n    from worker_position_data_enhanced\n    group by 1, 2\n),\n\nmost_recent_position as (\n\n    select *\n    from worker_position_data_enhanced\n    where row_number = 1\n),\n\nworker_position_enriched as (\n\n    select\n        most_recent_position.worker_id,\n        most_recent_position.source_relation,\n        most_recent_position.position_id, \n        most_recent_position.business_title,\n        most_recent_position.job_profile_id, \n        most_recent_position.employee_type as most_recent_position_type,\n        most_recent_position.position_location as most_recent_location,\n        most_recent_position.management_level_code as most_recent_level,\n        most_recent_position.fte_percent,\n        most_recent_position.days_at_position,\n        most_recent_position.position_start_date as most_recent_position_start_date,\n        most_recent_position.position_end_date as most_recent_position_end_date,\n        most_recent_position.position_effective_date as most_recent_position_effective_date,\n        worker_position_measures.worker_positions,\n        worker_position_measures.worker_levels, \n        worker_position_measures.position_days\n    from most_recent_position\n    left join worker_position_measures \n        on most_recent_position.worker_id = worker_position_measures.worker_id\n        and most_recent_position.source_relation = worker_position_measures.source_relation\n)\n\nselect * \nfrom worker_position_enriched\n)"}], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.workday__job_overview": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "workday__job_overview", "resource_type": "model", "package_name": "workday", "path": "workday__job_overview.sql", "original_file_path": "models/workday__job_overview.sql", "unique_id": "model.workday.workday__job_overview", "fqn": ["workday", "workday__job_overview"], "alias": "workday__job_overview", "checksum": {"name": "sha256", "checksum": "b50072f5be5632d10a64a1e777aa62ae6f2283f22244bd033fea5fc20ce66165"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a job with enriched details on job profiles and job families. This allows users to understand recruitment patterns and details within a job and job groupings.", "columns": {"job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_code": {"name": "job_profile_code", "description": "Code assigned to the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The title of the job for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_title": {"name": "private_title", "description": "The private title associated with the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_summary": {"name": "job_summary", "description": "The summary of the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description": {"name": "job_description", "description": "Brief description of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_codes": {"name": "job_family_codes", "description": "String array of all job family codes assigned to a job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_summaries": {"name": "job_family_summaries", "description": "String array of all job family summaries assigned to a job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_codes": {"name": "job_family_group_codes", "description": "String array of all job family group codes assigned to a job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_summaries": {"name": "job_family_group_summaries", "description": "String array of all job family group summaries assigned to a job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "table"}, "created_at": 1708457909.208082, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_workday`.`workday__job_overview`", "raw_code": "with job_profile_data as (\n\n    select * \n    from {{ ref('stg_workday__job_profile') }}\n),\n\n\njob_family_profile_data as (\n\n    select \n        job_family_id,\n        job_profile_id,\n        source_relation\n    from {{ ref('stg_workday__job_family_job_profile') }}\n),\n\njob_family_data as (\n\n    select \n        job_family_id,\n        source_relation,\n        job_family_code,\n        job_family_summary\n    from {{ ref('stg_workday__job_family') }}\n),\n\njob_family_job_family_group_data as (\n\n    select \n        job_family_group_id,\n        job_family_id,\n        source_relation\n    from {{ ref('stg_workday__job_family_job_family_group') }}\n),\n\njob_family_group_data as (\n\n    select \n        job_family_group_id,\n        source_relation,\n        job_family_group_code,\n        job_family_group_summary\n    from {{ ref('stg_workday__job_family_group') }}\n),\n\njob_data_enhanced as (\n\n    select\n        job_profile_data.job_profile_id,\n        job_profile_data.source_relation,\n        job_profile_data.job_profile_code, \n        job_profile_data.job_title,\n        job_profile_data.private_title,\n        job_profile_data.job_summary,\n        job_profile_data.job_description,\n        {{ fivetran_utils.string_agg('distinct job_family_data.job_family_code', \"', '\" ) }} as job_family_codes,\n        {{ fivetran_utils.string_agg('distinct job_family_data.job_family_summary', \"', '\" ) }} as job_family_summaries, \n        {{ fivetran_utils.string_agg('distinct job_family_group_data.job_family_group_code', \"', '\" ) }} as job_family_group_codes,\n        {{ fivetran_utils.string_agg('distinct job_family_group_data.job_family_group_summary', \"', '\" ) }} as job_family_group_summaries\n\n    from job_profile_data \n    left join job_family_profile_data \n        on job_profile_data.job_profile_id = job_family_profile_data.job_profile_id\n        and job_profile_data.source_relation = job_family_profile_data.source_relation\n    left join job_family_data\n        on job_family_profile_data.job_family_id = job_family_data.job_family_id\n        and job_family_profile_data.source_relation = job_family_data.source_relation\n    left join job_family_job_family_group_data\n        on job_family_job_family_group_data.job_family_id = job_family_data.job_family_id\n        and job_family_job_family_group_data.source_relation = job_family_data.source_relation\n    left join job_family_group_data \n        on job_family_job_family_group_data.job_family_group_id = job_family_group_data.job_family_group_id\n        and job_family_job_family_group_data.source_relation = job_family_group_data.source_relation\n    {{ dbt_utils.group_by(7) }}\n)\n\nselect *\nfrom job_data_enhanced", "language": "sql", "refs": [{"name": "stg_workday__job_profile", "package": null, "version": null}, {"name": "stg_workday__job_family_job_profile", "package": null, "version": null}, {"name": "stg_workday__job_family", "package": null, "version": null}, {"name": "stg_workday__job_family_job_family_group", "package": null, "version": null}, {"name": "stg_workday__job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg", "macro.dbt_utils.group_by"], "nodes": ["model.workday.stg_workday__job_profile", "model.workday.stg_workday__job_family_job_profile", "model.workday.stg_workday__job_family", "model.workday.stg_workday__job_family_job_family_group", "model.workday.stg_workday__job_family_group"]}, "compiled_path": "target/compiled/workday/models/workday__job_overview.sql", "compiled": true, "compiled_code": "with job_profile_data as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile`\n),\n\n\njob_family_profile_data as (\n\n    select \n        job_family_id,\n        job_profile_id,\n        source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile`\n),\n\njob_family_data as (\n\n    select \n        job_family_id,\n        source_relation,\n        job_family_code,\n        job_family_summary\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family`\n),\n\njob_family_job_family_group_data as (\n\n    select \n        job_family_group_id,\n        job_family_id,\n        source_relation\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group`\n),\n\njob_family_group_data as (\n\n    select \n        job_family_group_id,\n        source_relation,\n        job_family_group_code,\n        job_family_group_summary\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group`\n),\n\njob_data_enhanced as (\n\n    select\n        job_profile_data.job_profile_id,\n        job_profile_data.source_relation,\n        job_profile_data.job_profile_code, \n        job_profile_data.job_title,\n        job_profile_data.private_title,\n        job_profile_data.job_summary,\n        job_profile_data.job_description,\n        \n    string_agg(distinct job_family_data.job_family_code, ', ')\n\n as job_family_codes,\n        \n    string_agg(distinct job_family_data.job_family_summary, ', ')\n\n as job_family_summaries, \n        \n    string_agg(distinct job_family_group_data.job_family_group_code, ', ')\n\n as job_family_group_codes,\n        \n    string_agg(distinct job_family_group_data.job_family_group_summary, ', ')\n\n as job_family_group_summaries\n\n    from job_profile_data \n    left join job_family_profile_data \n        on job_profile_data.job_profile_id = job_family_profile_data.job_profile_id\n        and job_profile_data.source_relation = job_family_profile_data.source_relation\n    left join job_family_data\n        on job_family_profile_data.job_family_id = job_family_data.job_family_id\n        and job_family_profile_data.source_relation = job_family_data.source_relation\n    left join job_family_job_family_group_data\n        on job_family_job_family_group_data.job_family_id = job_family_data.job_family_id\n        and job_family_job_family_group_data.source_relation = job_family_data.source_relation\n    left join job_family_group_data \n        on job_family_job_family_group_data.job_family_group_id = job_family_group_data.job_family_group_id\n        and job_family_job_family_group_data.source_relation = job_family_group_data.source_relation\n    group by 1,2,3,4,5,6,7\n)\n\nselect *\nfrom job_data_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.workday__position_overview": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "workday__position_overview", "resource_type": "model", "package_name": "workday", "path": "workday__position_overview.sql", "original_file_path": "models/workday__position_overview.sql", "unique_id": "model.workday.workday__position_overview", "fqn": ["workday", "workday__position_overview"], "alias": "workday__position_overview", "checksum": {"name": "sha256", "checksum": "567db8a61cd72c8faec1aac1963cbf05b776d0fe170a7f8c0ae8ea3d076464d3"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a position with enriched data on positions. This allows end users to understand position availabilities, vacancies, cost to optimize hiring efforts.", "columns": {"position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_code": {"name": "position_code", "description": "Code associated with the position for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_posting_title": {"name": "job_posting_title", "description": "Title used for job postings associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Flag indicating whether the position is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hiring_freeze": {"name": "is_hiring_freeze", "description": "Flag indicating whether the organization is under a hiring freeze.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_hire": {"name": "is_available_for_hire", "description": "Flag indicating whether the organization is available for hiring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "availability_date": {"name": "availability_date", "description": "Date when the organization becomes available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_recruiting": {"name": "is_available_for_recruiting", "description": "Flag indicating whether the position is available for recruiting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_hire_date": {"name": "earliest_hire_date", "description": "Earliest date when the position can be filled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_overlap": {"name": "is_available_for_overlap", "description": "Flag indicating whether the position is available for overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_overlap_date": {"name": "earliest_overlap_date", "description": "Earliest date when the position can overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_for_filled_position_id": {"name": "worker_for_filled_position_id", "description": "Identifier for the worker filling the position, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_type_code": {"name": "worker_type_code", "description": "Code indicating the type of worker associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_time_type_code": {"name": "position_time_type_code", "description": "Code indicating the time type associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_organization_id": {"name": "supervisory_organization_id", "description": "Identifier for the supervisory organization associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_package_code": {"name": "compensation_package_code", "description": "Code associated with the compensation package of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_code": {"name": "compensation_grade_code", "description": "Code associated with the compensation grade of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_code": {"name": "compensation_grade_profile_code", "description": "Code associated with the compensation grade profile of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "table"}, "created_at": 1708457909.216552, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_workday`.`workday__position_overview`", "raw_code": "with position_data as (\n\n    select *\n    from {{ ref('stg_workday__position') }}\n),\n\nposition_job_profile_data as (\n\n    select *\n    from {{ ref('stg_workday__position_job_profile') }}\n),\n\nposition_data_enhanced as (\n\n    select\n        position_data.position_id,\n        position_data.source_relation,\n        position_data.position_code,\n        position_data.job_posting_title,\n        position_data.effective_date, \n        position_data.is_closed,\n        position_data.is_hiring_freeze,\n        position_data.is_available_for_hire,\n        position_data.availability_date,\n        position_data.is_available_for_recruiting,\n        position_data.earliest_hire_date,\n        position_data.is_available_for_overlap,\n        position_data.earliest_overlap_date,\n        position_data.worker_for_filled_position_id,\n        position_data.worker_type_code, \n        position_data.position_time_type_code,\n        position_data.supervisory_organization_id, \n        position_job_profile_data.job_profile_id,\n        position_data.compensation_package_code,\n        position_data.compensation_grade_code,\n        position_data.compensation_grade_profile_code\n    from position_data\n    left join position_job_profile_data \n        on position_job_profile_data.position_id = position_data.position_id\n        and position_job_profile_data.source_relation = position_data.source_relation\n)\n\nselect *\nfrom position_data_enhanced", "language": "sql", "refs": [{"name": "stg_workday__position", "package": null, "version": null}, {"name": "stg_workday__position_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.workday.stg_workday__position", "model.workday.stg_workday__position_job_profile"]}, "compiled_path": "target/compiled/workday/models/workday__position_overview.sql", "compiled": true, "compiled_code": "with position_data as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position`\n),\n\nposition_job_profile_data as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile`\n),\n\nposition_data_enhanced as (\n\n    select\n        position_data.position_id,\n        position_data.source_relation,\n        position_data.position_code,\n        position_data.job_posting_title,\n        position_data.effective_date, \n        position_data.is_closed,\n        position_data.is_hiring_freeze,\n        position_data.is_available_for_hire,\n        position_data.availability_date,\n        position_data.is_available_for_recruiting,\n        position_data.earliest_hire_date,\n        position_data.is_available_for_overlap,\n        position_data.earliest_overlap_date,\n        position_data.worker_for_filled_position_id,\n        position_data.worker_type_code, \n        position_data.position_time_type_code,\n        position_data.supervisory_organization_id, \n        position_job_profile_data.job_profile_id,\n        position_data.compensation_package_code,\n        position_data.compensation_grade_code,\n        position_data.compensation_grade_profile_code\n    from position_data\n    left join position_job_profile_data \n        on position_job_profile_data.position_id = position_data.position_id\n        and position_job_profile_data.source_relation = position_data.source_relation\n)\n\nselect *\nfrom position_data_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.workday__organization_overview": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "workday__organization_overview", "resource_type": "model", "package_name": "workday", "path": "workday__organization_overview.sql", "original_file_path": "models/workday__organization_overview.sql", "unique_id": "model.workday.workday__organization_overview", "fqn": ["workday", "workday__organization_overview"], "alias": "workday__organization_overview", "checksum": {"name": "sha256", "checksum": "0df19685be8a2ffee5d5e16069cbc9771cc639372004929a73f500f9d7c59798"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents organization, organization roles, as well as positions and workers tied to these organizations. This allows end users to slice organizational data at any grain to better analyze organizational structures.", "columns": {"organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_role_id": {"name": "organization_role_id", "description": "The role id associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_code": {"name": "organization_code", "description": "Code associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_type": {"name": "organization_type", "description": "Type or category of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_sub_type": {"name": "organization_sub_type", "description": "Subtype or classification of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "superior_organization_id": {"name": "superior_organization_id", "description": "Identifier for the superior organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "top_level_organization_id": {"name": "top_level_organization_id", "description": "Identifier for the top-level organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_id": {"name": "manager_id", "description": "Identifier for the manager associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_role_code": {"name": "organization_role_code", "description": "Code assigned to the organization role for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "table"}, "created_at": 1708457909.22249, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_workday`.`workday__organization_overview`", "raw_code": "with organization_data as (\n\n    select * \n    from {{ ref('stg_workday__organization') }}\n),\n\norganization_role_data as (\n\n    select * \n    from {{ ref('stg_workday__organization_role') }}\n),\n\nworker_position_organization as (\n\n    select *\n    from {{ ref('stg_workday__worker_position_organization') }}\n),\n\norganization_roles as (\n\n    select \n        organization_role_data.organization_id,\n        organization_role_data.source_relation,\n        organization_role_data.organization_role_id,\n        organization_role_data.organization_role_code,\n        worker_position_organization.worker_id,\n        worker_position_organization.position_id\n    from organization_role_data\n    left join worker_position_organization\n        on organization_role_data.organization_id = worker_position_organization.organization_id \n        and organization_role_data.source_relation = worker_position_organization.source_relation\n),\n\norganization_data_enhanced as (\n\n    select   \n        organization_data.organization_id,\n        organization_roles.organization_role_id,\n        organization_roles.worker_id,\n        organization_roles.position_id,\n        organization_data.source_relation,\n        organization_data.organization_code,\n        organization_data.organization_name,\n        organization_data.organization_type,\n        organization_data.organization_sub_type,\n        organization_data.superior_organization_id,\n        organization_data.top_level_organization_id, \n        organization_data.manager_id,\n        organization_roles.organization_role_code\n    from organization_data\n    left join organization_roles \n        on organization_roles.organization_id = organization_data.organization_id \n        and organization_roles.source_relation = organization_data.source_relation\n)\n\nselect *\nfrom organization_data_enhanced", "language": "sql", "refs": [{"name": "stg_workday__organization", "package": null, "version": null}, {"name": "stg_workday__organization_role", "package": null, "version": null}, {"name": "stg_workday__worker_position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.workday.stg_workday__organization", "model.workday.stg_workday__organization_role", "model.workday.stg_workday__worker_position_organization"]}, "compiled_path": "target/compiled/workday/models/workday__organization_overview.sql", "compiled": true, "compiled_code": "with organization_data as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization`\n),\n\norganization_role_data as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role`\n),\n\nworker_position_organization as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`\n),\n\norganization_roles as (\n\n    select \n        organization_role_data.organization_id,\n        organization_role_data.source_relation,\n        organization_role_data.organization_role_id,\n        organization_role_data.organization_role_code,\n        worker_position_organization.worker_id,\n        worker_position_organization.position_id\n    from organization_role_data\n    left join worker_position_organization\n        on organization_role_data.organization_id = worker_position_organization.organization_id \n        and organization_role_data.source_relation = worker_position_organization.source_relation\n),\n\norganization_data_enhanced as (\n\n    select   \n        organization_data.organization_id,\n        organization_roles.organization_role_id,\n        organization_roles.worker_id,\n        organization_roles.position_id,\n        organization_data.source_relation,\n        organization_data.organization_code,\n        organization_data.organization_name,\n        organization_data.organization_type,\n        organization_data.organization_sub_type,\n        organization_data.superior_organization_id,\n        organization_data.top_level_organization_id, \n        organization_data.manager_id,\n        organization_roles.organization_role_code\n    from organization_data\n    left join organization_roles \n        on organization_roles.organization_id = organization_data.organization_id \n        and organization_roles.source_relation = organization_data.source_relation\n)\n\nselect *\nfrom organization_data_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__position.sql", "original_file_path": "models/staging/stg_workday__position.sql", "unique_id": "model.workday.stg_workday__position", "fqn": ["workday", "staging", "stg_workday__position"], "alias": "stg_workday__position", "checksum": {"name": "sha256", "checksum": "a8eea235110df116f941d206b25f965ace56ec776662153af05d70a2bdf1cd4b"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Resource for understanding the details and attributes associated with each position.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_academic_tenure_eligible": {"name": "is_academic_tenure_eligible", "description": "Flag indicating whether the position is eligible for academic tenure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "availability_date": {"name": "availability_date", "description": "Date when the organization becomes available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_hire": {"name": "is_available_for_hire", "description": "Flag indicating whether the organization is available for hiring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_overlap": {"name": "is_available_for_overlap", "description": "Flag indicating whether the position is available for overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_recruiting": {"name": "is_available_for_recruiting", "description": "Flag indicating whether the position is available for recruiting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Flag indicating whether the position is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_code": {"name": "compensation_grade_code", "description": "Code associated with the compensation grade of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_code": {"name": "compensation_grade_profile_code", "description": "Code associated with the compensation grade profile of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_package_code": {"name": "compensation_package_code", "description": "Code associated with the compensation package of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_step_code": {"name": "compensation_step_code", "description": "Code associated with the compensation step of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_critical_job": {"name": "is_critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill_code": {"name": "difficulty_to_fill_code", "description": "Code indicating the difficulty level in filling the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_hire_date": {"name": "earliest_hire_date", "description": "Earliest date when the position can be filled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_overlap_date": {"name": "earliest_overlap_date", "description": "Earliest date when the position can overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hiring_freeze": {"name": "is_hiring_freeze", "description": "Flag indicating whether the organization is under a hiring freeze.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description": {"name": "job_description", "description": "Detailed description of the job associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description_summary": {"name": "job_description_summary", "description": "Summary or overview of the job description for the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_posting_title": {"name": "job_posting_title", "description": "Title used for job postings associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_code": {"name": "position_code", "description": "Code associated with the position for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_time_type_code": {"name": "position_time_type_code", "description": "Code indicating the time type associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis": {"name": "primary_compensation_basis", "description": "Primary basis of compensation for the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis_amount_change": {"name": "primary_compensation_basis_amount_change", "description": "Change in the amount of the primary compensation basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis_percent_change": {"name": "primary_compensation_basis_percent_change", "description": "Change in the percentage of the primary compensation basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_organization_id": {"name": "supervisory_organization_id", "description": "Identifier for the supervisory organization associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_work_shift_required": {"name": "is_work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_for_filled_position_id": {"name": "worker_for_filled_position_id", "description": "Identifier for the worker filling the position, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_position_id": {"name": "worker_position_id", "description": "Identifier for the worker associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_type_code": {"name": "worker_type_code", "description": "Code indicating the type of worker associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.476994, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__position_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__position_base')),\n                staging_columns=get_position_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        academic_tenure_eligible as is_academic_tenure_eligible,\n        availability_date,\n        available_for_hire as is_available_for_hire,\n        available_for_overlap as is_available_for_overlap,\n        available_for_recruiting as is_available_for_recruiting,\n        closed as is_closed,\n        compensation_grade_code,\n        compensation_grade_profile_code,\n        compensation_package_code,\n        compensation_step_code,\n        critical_job as is_critical_job,\n        difficulty_to_fill_code,\n        earliest_hire_date,\n        earliest_overlap_date,\n        effective_date,\n        hiring_freeze as is_hiring_freeze,\n        id as position_id,\n        job_description,\n        job_description_summary,\n        job_posting_title,\n        position_code,\n        position_time_type_code,\n        primary_compensation_basis,\n        primary_compensation_basis_amount_change,\n        primary_compensation_basis_percent_change,\n        supervisory_organization_id,\n        work_shift_required as is_work_shift_required,\n        worker_for_filled_position_id,\n        worker_position_id,\n        worker_type_code\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__position_base", "package": null, "version": null}, {"name": "stg_workday__position_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_position_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__position_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__position.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as BOOLEAN) as \n    \n    academic_tenure_eligible\n    \n , \n    cast(null as date) as \n    \n    availability_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    available_for_hire\n    \n , \n    cast(null as BOOLEAN) as \n    \n    available_for_overlap\n    \n , \n    cast(null as BOOLEAN) as \n    \n    available_for_recruiting\n    \n , \n    cast(null as BOOLEAN) as \n    \n    closed\n    \n , \n    cast(null as STRING) as \n    \n    compensation_grade_code\n    \n , \n    cast(null as STRING) as \n    \n    compensation_grade_profile_code\n    \n , \n    cast(null as STRING) as \n    \n    compensation_package_code\n    \n , \n    cast(null as STRING) as \n    \n    compensation_step_code\n    \n , \n    cast(null as BOOLEAN) as \n    \n    critical_job\n    \n , \n    cast(null as STRING) as \n    \n    difficulty_to_fill_code\n    \n , \n    cast(null as date) as \n    \n    earliest_hire_date\n    \n , \n    cast(null as date) as \n    \n    earliest_overlap_date\n    \n , \n    cast(null as date) as \n    \n    effective_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    hiring_freeze\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as STRING) as \n    \n    job_description\n    \n , \n    cast(null as STRING) as \n    \n    job_description_summary\n    \n , \n    cast(null as STRING) as \n    \n    job_posting_title\n    \n , \n    cast(null as STRING) as \n    \n    position_code\n    \n , \n    cast(null as STRING) as \n    \n    position_time_type_code\n    \n , \n    cast(null as FLOAT64) as \n    \n    primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    primary_compensation_basis_amount_change\n    \n , \n    cast(null as FLOAT64) as \n    \n    primary_compensation_basis_percent_change\n    \n , \n    cast(null as STRING) as \n    \n    supervisory_organization_id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    work_shift_required\n    \n , \n    cast(null as STRING) as \n    \n    worker_for_filled_position_id\n    \n , \n    cast(null as STRING) as \n    \n    worker_position_id\n    \n , \n    cast(null as STRING) as \n    \n    worker_type_code\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        academic_tenure_eligible as is_academic_tenure_eligible,\n        availability_date,\n        available_for_hire as is_available_for_hire,\n        available_for_overlap as is_available_for_overlap,\n        available_for_recruiting as is_available_for_recruiting,\n        closed as is_closed,\n        compensation_grade_code,\n        compensation_grade_profile_code,\n        compensation_package_code,\n        compensation_step_code,\n        critical_job as is_critical_job,\n        difficulty_to_fill_code,\n        earliest_hire_date,\n        earliest_overlap_date,\n        effective_date,\n        hiring_freeze as is_hiring_freeze,\n        id as position_id,\n        job_description,\n        job_description_summary,\n        job_posting_title,\n        position_code,\n        position_time_type_code,\n        primary_compensation_basis,\n        primary_compensation_basis_amount_change,\n        primary_compensation_basis_percent_change,\n        supervisory_organization_id,\n        work_shift_required as is_work_shift_required,\n        worker_for_filled_position_id,\n        worker_position_id,\n        worker_type_code\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_group": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_group", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__job_family_group.sql", "original_file_path": "models/staging/stg_workday__job_family_group.sql", "unique_id": "model.workday.stg_workday__job_family_group", "fqn": ["workday", "staging", "stg_workday__job_family_group"], "alias": "stg_workday__job_family_group", "checksum": {"name": "sha256", "checksum": "91495541dd20c1e46fd9fc7074605bd8d766196513173eb2e6d6d2abd779474a"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record corresponds to a specific group of related job families, providing an organizational structure for roles with similar characteristics.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_id": {"name": "job_family_group_id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_code": {"name": "job_family_group_code", "description": "Code assigned to the job family group for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_summary": {"name": "job_family_group_summary", "description": "The summary of the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4657972, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__job_family_group_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__job_family_group_base')),\n                staging_columns=get_job_family_group_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        effective_date,\n        id as job_family_group_id,\n        inactive as is_inactive,\n        job_family_group_code,\n        summary as job_family_group_summary\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__job_family_group_base", "package": null, "version": null}, {"name": "stg_workday__job_family_group_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_job_family_group_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__job_family_group_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__job_family_group.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as date) as \n    \n    effective_date\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    inactive\n    \n , \n    cast(null as STRING) as \n    \n    job_family_group_code\n    \n , \n    cast(null as STRING) as \n    \n    summary\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        effective_date,\n        id as job_family_group_id,\n        inactive as is_inactive,\n        job_family_group_code,\n        summary as job_family_group_summary\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_job_profile": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_job_profile", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__job_family_job_profile.sql", "original_file_path": "models/staging/stg_workday__job_family_job_profile.sql", "unique_id": "model.workday.stg_workday__job_family_job_profile", "fqn": ["workday", "staging", "stg_workday__job_family_job_profile"], "alias": "stg_workday__job_family_job_profile", "checksum": {"name": "sha256", "checksum": "22f926dc89704581204ef1db5906e7fc184c404d53dc5141b47056de357d6066"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the relationship between job families and job profiles in the Workday dataset.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.461965, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__job_family_job_profile_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__job_family_job_profile_base')),\n                staging_columns=get_job_family_job_profile_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_id,\n        job_profile_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_profile_base", "package": null, "version": null}, {"name": "stg_workday__job_family_job_profile_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_job_family_job_profile_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__job_family_job_profile_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__job_family_job_profile.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    job_family_id\n    \n , \n    cast(null as STRING) as \n    \n    job_profile_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_id,\n        job_profile_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_role_worker": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_role_worker", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__organization_role_worker.sql", "original_file_path": "models/staging/stg_workday__organization_role_worker.sql", "unique_id": "model.workday.stg_workday__organization_role_worker", "fqn": ["workday", "staging", "stg_workday__organization_role_worker"], "alias": "stg_workday__organization_role_worker", "checksum": {"name": "sha256", "checksum": "6cbf3f20ac378d061a6c9034bd75c08e7cf7079ac12c8b167c31e6e1c0e54fa6"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Captures the linkages between individual workers, the organizations to which they belong, and the roles they fulfill.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_worker_code": {"name": "organization_worker_code", "description": "The worker code associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_id": {"name": "role_id", "description": "Identifier for the specific role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4683352, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__organization_role_worker_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__organization_role_worker_base')),\n                staging_columns=get_organization_role_worker_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        associated_worker_id as organization_worker_code,\n        organization_id,\n        role_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__organization_role_worker_base", "package": null, "version": null}, {"name": "stg_workday__organization_role_worker_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_organization_role_worker_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__organization_role_worker_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__organization_role_worker.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    associated_worker_id\n    \n , \n    cast(null as STRING) as \n    \n    organization_id\n    \n , \n    cast(null as STRING) as \n    \n    role_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        associated_worker_id as organization_worker_code,\n        organization_id,\n        role_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_role": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_role", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__organization_role.sql", "original_file_path": "models/staging/stg_workday__organization_role.sql", "unique_id": "model.workday.stg_workday__organization_role", "fqn": ["workday", "staging", "stg_workday__organization_role"], "alias": "stg_workday__organization_role", "checksum": {"name": "sha256", "checksum": "d20118b8c8234cda8e96b2df978fdce2aa46bbdb356ebac5b29680663d105e05"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Captures the associations between different organizational entities and the roles assigned to them, providing valuable insights into organizational roles and responsibilities.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_role_id": {"name": "organization_role_id", "description": "The role id associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_role_code": {"name": "organization_role_code", "description": "Code assigned to the organization role for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.466749, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__organization_role_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__organization_role_base')),\n                staging_columns=get_organization_role_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        organization_id,\n        organization_role_code,\n        role_id as organization_role_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__organization_role_base", "package": null, "version": null}, {"name": "stg_workday__organization_role_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_organization_role_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__organization_role_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__organization_role.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    organization_id\n    \n , \n    cast(null as STRING) as \n    \n    organization_role_code\n    \n , \n    cast(null as STRING) as \n    \n    role_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        organization_id,\n        organization_role_code,\n        role_id as organization_role_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_position": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_position", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__worker_position.sql", "original_file_path": "models/staging/stg_workday__worker_position.sql", "unique_id": "model.workday.stg_workday__worker_position", "fqn": ["workday", "staging", "stg_workday__worker_position"], "alias": "stg_workday__worker_position", "checksum": {"name": "sha256", "checksum": "f812d4b0a33146284f402362816bc05ca7a5e85fa228207ea0df356396906025"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the positions held by workers in the Workday system", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_end_date": {"name": "academic_pay_setup_data_annual_work_period_end_date", "description": "The end date of the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_start_date": {"name": "academic_pay_setup_data_annual_work_period_start_date", "description": "The start date of the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_work_percent_of_year": {"name": "academic_pay_setup_data_annual_work_period_work_percent_of_year", "description": "The work percentage of the year in the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_disbursement_plan_period_end_date": {"name": "academic_pay_setup_data_disbursement_plan_period_end_date", "description": "The end date of the disbursement plan period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_disbursement_plan_period_start_date": {"name": "academic_pay_setup_data_disbursement_plan_period_start_date", "description": "The start date of the disbursement plan period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_display_language": {"name": "business_site_summary_display_language", "description": "The display language of the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_local": {"name": "business_site_summary_local", "description": "Local information related to the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_location": {"name": "position_location", "description": "The location of the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_location_type": {"name": "business_site_summary_location_type", "description": "The type of location for the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_name": {"name": "business_site_summary_name", "description": "The name associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_scheduled_weekly_hours": {"name": "business_site_summary_scheduled_weekly_hours", "description": "The scheduled weekly hours associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_time_profile": {"name": "business_site_summary_time_profile", "description": "The time profile associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_title": {"name": "business_title", "description": "The business title associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_critical_job": {"name": "is_critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_weekly_hours": {"name": "default_weekly_hours", "description": "The default weekly hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill": {"name": "difficulty_to_fill", "description": "Indication of the difficulty level in filling the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_effective_date": {"name": "position_effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_type": {"name": "employee_type", "description": "The type of employee associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_end_date": {"name": "position_end_date", "description": "The end date of the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_employment_date": {"name": "end_employment_date", "description": "Date when the worker's employment is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_exclude_from_head_count": {"name": "is_exclude_from_head_count", "description": "Flag indicating whether the position is excluded from headcount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_assignment_end_date": {"name": "expected_assignment_end_date", "description": "The expected end date of the assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "external_employee": {"name": "external_employee", "description": "Flag indicating whether the worker is an external employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "federal_withholding_fein": {"name": "federal_withholding_fein", "description": "The Federal Employer Identification Number (FEIN) for federal withholding.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "The frequency associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fte_percent": {"name": "fte_percent", "description": "The full-time equivalent (FTE) percentage associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "headcount_restriction_code": {"name": "headcount_restriction_code", "description": "The code associated with headcount restriction for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_country": {"name": "home_country", "description": "The home country of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "host_country": {"name": "host_country", "description": "The host country associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "international_assignment_type": {"name": "international_assignment_type", "description": "The type of international assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_primary_job": {"name": "is_primary_job", "description": "Flag indicating whether the job is the primary job for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_job_exempt": {"name": "is_job_exempt", "description": "Indicates whether the job is exempt from certain regulations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level_code": {"name": "management_level_code", "description": "Code indicating the management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_fte": {"name": "paid_fte", "description": "The paid full-time equivalent (FTE) associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group": {"name": "pay_group", "description": "The pay group associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_rate": {"name": "pay_rate", "description": "The pay rate associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_rate_type": {"name": "pay_rate_type", "description": "The type of pay rate associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_through_date": {"name": "pay_through_date", "description": "The date through which the worker is paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payroll_entity": {"name": "payroll_entity", "description": "The payroll entity associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payroll_file_number": {"name": "payroll_file_number", "description": "The file number associated with payroll for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_paid_equivalent_hours": {"name": "regular_paid_equivalent_hours", "description": "The regular paid equivalent hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scheduled_weekly_hours": {"name": "scheduled_weekly_hours", "description": "The scheduled weekly hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_specify_paid_fte": {"name": "is_specify_paid_fte", "description": "Flag indicating whether to specify paid FTE for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_specify_working_fte": {"name": "is_specify_working_fte", "description": "Flag indicating whether to specify working FTE for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_start_date": {"name": "position_start_date", "description": "The start date of the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_international_assignment_reason": {"name": "start_international_assignment_reason", "description": "The reason for starting an international assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_hours_profile": {"name": "work_hours_profile", "description": "The work hours profile associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift": {"name": "work_shift", "description": "The work shift associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_work_shift_required": {"name": "is_work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_space": {"name": "work_space", "description": "The work space associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_hours_profile_classification": {"name": "worker_hours_profile_classification", "description": "The classification of worker hours profile associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_fte": {"name": "working_fte", "description": "The working full-time equivalent (FTE) associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_frequency": {"name": "working_time_frequency", "description": "The frequency of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_unit": {"name": "working_time_unit", "description": "The unit of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_value": {"name": "working_time_value", "description": "The value of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.504094, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__worker_position_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__worker_position_base')),\n                staging_columns=get_worker_position_history_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        academic_pay_setup_data_annual_work_period_end_date,\n        academic_pay_setup_data_annual_work_period_start_date,\n        academic_pay_setup_data_annual_work_period_work_percent_of_year,\n        academic_pay_setup_data_disbursement_plan_period_end_date,\n        academic_pay_setup_data_disbursement_plan_period_start_date,\n        business_site_summary_display_language,\n        business_site_summary_local,\n        business_site_summary_location as position_location,\n        business_site_summary_location_type,\n        business_site_summary_name,\n        business_site_summary_scheduled_weekly_hours,\n        business_site_summary_time_profile,\n        business_title,\n        critical_job as is_critical_job,\n        default_weekly_hours,\n        difficulty_to_fill,\n        effective_date as position_effective_date,\n        employee_type,\n        end_date as position_end_date,\n        end_employment_date,\n        exclude_from_head_count as is_exclude_from_head_count,\n        expected_assignment_end_date,\n        external_employee,\n        federal_withholding_fein,\n        frequency,\n        full_time_equivalent_percentage as fte_percent,\n        headcount_restriction_code,\n        home_country,\n        host_country,\n        international_assignment_type,\n        is_primary_job,\n        job_exempt as is_job_exempt,\n        job_profile_id,\n        management_level_code,\n        paid_fte,\n        pay_group,\n        pay_rate,\n        pay_rate_type,\n        pay_through_date,\n        payroll_entity,\n        payroll_file_number,\n        position_id,\n        regular_paid_equivalent_hours,\n        scheduled_weekly_hours,\n        specify_paid_fte as is_specify_paid_fte,\n        specify_working_fte as is_specify_working_fte,\n        start_date as position_start_date,\n        start_international_assignment_reason,\n        work_hours_profile,\n        work_shift,\n        work_shift_required as is_work_shift_required,\n        work_space,\n        worker_hours_profile_classification,\n        worker_id,\n        working_fte,\n        working_time_frequency,\n        working_time_unit,\n        working_time_value\n    from fields\n    where {{ dbt.current_timestamp() }} between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__worker_position_base", "package": null, "version": null}, {"name": "stg_workday__worker_position_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_worker_position_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.current_timestamp"], "nodes": ["model.workday.stg_workday__worker_position_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__worker_position.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_active\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_start\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_end\n    \n , \n    cast(null as date) as \n    \n    academic_pay_setup_data_annual_work_period_end_date\n    \n , \n    cast(null as date) as \n    \n    academic_pay_setup_data_annual_work_period_start_date\n    \n , \n    cast(null as FLOAT64) as \n    \n    academic_pay_setup_data_annual_work_period_work_percent_of_year\n    \n , \n    cast(null as date) as \n    \n    academic_pay_setup_data_disbursement_plan_period_end_date\n    \n , \n    cast(null as date) as \n    \n    academic_pay_setup_data_disbursement_plan_period_start_date\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_display_language\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_local\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_location\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_location_type\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    business_site_summary_scheduled_weekly_hours\n    \n , \n    cast(null as STRING) as \n    \n    business_site_summary_time_profile\n    \n , \n    cast(null as STRING) as \n    \n    business_title\n    \n , \n    cast(null as BOOLEAN) as \n    \n    critical_job\n    \n , \n    cast(null as FLOAT64) as \n    \n    default_weekly_hours\n    \n , \n    cast(null as STRING) as \n    \n    difficulty_to_fill\n    \n , \n    cast(null as date) as \n    \n    effective_date\n    \n , \n    cast(null as STRING) as \n    \n    employee_type\n    \n , \n    cast(null as date) as \n    \n    end_date\n    \n , \n    cast(null as date) as \n    \n    end_employment_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    exclude_from_head_count\n    \n , \n    cast(null as date) as \n    \n    expected_assignment_end_date\n    \n , \n    cast(null as STRING) as \n    \n    external_employee\n    \n , \n    cast(null as STRING) as \n    \n    federal_withholding_fein\n    \n , \n    cast(null as STRING) as \n    \n    frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    full_time_equivalent_percentage\n    \n , \n    cast(null as STRING) as \n    \n    headcount_restriction_code\n    \n , \n    cast(null as STRING) as \n    \n    home_country\n    \n , \n    cast(null as STRING) as \n    \n    host_country\n    \n , \n    cast(null as STRING) as \n    \n    international_assignment_type\n    \n , \n    cast(null as BOOLEAN) as \n    \n    is_primary_job\n    \n , \n    cast(null as BOOLEAN) as \n    \n    job_exempt\n    \n , \n    cast(null as STRING) as \n    \n    job_profile_id\n    \n , \n    cast(null as STRING) as \n    \n    management_level_code\n    \n , \n    cast(null as FLOAT64) as \n    \n    paid_fte\n    \n , \n    cast(null as STRING) as \n    \n    pay_group\n    \n , \n    cast(null as STRING) as \n    \n    pay_rate\n    \n , \n    cast(null as STRING) as \n    \n    pay_rate_type\n    \n , \n    cast(null as date) as \n    \n    pay_through_date\n    \n , \n    cast(null as STRING) as \n    \n    payroll_entity\n    \n , \n    cast(null as STRING) as \n    \n    payroll_file_number\n    \n , \n    cast(null as STRING) as \n    \n    position_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    regular_paid_equivalent_hours\n    \n , \n    cast(null as FLOAT64) as \n    \n    scheduled_weekly_hours\n    \n , \n    cast(null as BOOLEAN) as \n    \n    specify_paid_fte\n    \n , \n    cast(null as BOOLEAN) as \n    \n    specify_working_fte\n    \n , \n    cast(null as date) as \n    \n    start_date\n    \n , \n    cast(null as STRING) as \n    \n    start_international_assignment_reason\n    \n , \n    cast(null as STRING) as \n    \n    work_hours_profile\n    \n , \n    cast(null as STRING) as \n    \n    work_shift\n    \n , \n    cast(null as BOOLEAN) as \n    \n    work_shift_required\n    \n , \n    cast(null as STRING) as \n    \n    work_space\n    \n , \n    cast(null as STRING) as \n    \n    worker_hours_profile_classification\n    \n , \n    cast(null as STRING) as \n    \n    worker_id\n    \n , \n    cast(null as FLOAT64) as \n    \n    working_fte\n    \n , \n    cast(null as STRING) as \n    \n    working_time_frequency\n    \n , \n    cast(null as STRING) as \n    \n    working_time_unit\n    \n , \n    cast(null as FLOAT64) as \n    \n    working_time_value\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        academic_pay_setup_data_annual_work_period_end_date,\n        academic_pay_setup_data_annual_work_period_start_date,\n        academic_pay_setup_data_annual_work_period_work_percent_of_year,\n        academic_pay_setup_data_disbursement_plan_period_end_date,\n        academic_pay_setup_data_disbursement_plan_period_start_date,\n        business_site_summary_display_language,\n        business_site_summary_local,\n        business_site_summary_location as position_location,\n        business_site_summary_location_type,\n        business_site_summary_name,\n        business_site_summary_scheduled_weekly_hours,\n        business_site_summary_time_profile,\n        business_title,\n        critical_job as is_critical_job,\n        default_weekly_hours,\n        difficulty_to_fill,\n        effective_date as position_effective_date,\n        employee_type,\n        end_date as position_end_date,\n        end_employment_date,\n        exclude_from_head_count as is_exclude_from_head_count,\n        expected_assignment_end_date,\n        external_employee,\n        federal_withholding_fein,\n        frequency,\n        full_time_equivalent_percentage as fte_percent,\n        headcount_restriction_code,\n        home_country,\n        host_country,\n        international_assignment_type,\n        is_primary_job,\n        job_exempt as is_job_exempt,\n        job_profile_id,\n        management_level_code,\n        paid_fte,\n        pay_group,\n        pay_rate,\n        pay_rate_type,\n        pay_through_date,\n        payroll_entity,\n        payroll_file_number,\n        position_id,\n        regular_paid_equivalent_hours,\n        scheduled_weekly_hours,\n        specify_paid_fte as is_specify_paid_fte,\n        specify_working_fte as is_specify_working_fte,\n        start_date as position_start_date,\n        start_international_assignment_reason,\n        work_hours_profile,\n        work_shift,\n        work_shift_required as is_work_shift_required,\n        work_space,\n        worker_hours_profile_classification,\n        worker_id,\n        working_fte,\n        working_time_frequency,\n        working_time_unit,\n        working_time_value\n    from fields\n    where current_timestamp() between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__person_contact_email_address": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__person_contact_email_address", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__person_contact_email_address.sql", "original_file_path": "models/staging/stg_workday__person_contact_email_address.sql", "unique_id": "model.workday.stg_workday__person_contact_email_address", "fqn": ["workday", "staging", "stg_workday__person_contact_email_address"], "alias": "stg_workday__person_contact_email_address", "checksum": {"name": "sha256", "checksum": "fc93cd7747b3087ad994ab34f0feec9a8293e02f719a8ddb64bf652d786f50e5"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the email addresses associated with a person in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_contact_email_address_id": {"name": "person_contact_email_address_id", "description": "The identifier of the personal contact email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "The actual email address of the person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_code": {"name": "email_code", "description": "A code or label associated with the type or purpose of the email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_comment": {"name": "email_comment", "description": "Any additional comments or notes related to the email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.496861, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__person_contact_email_address_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__person_contact_email_address_base')),\n                staging_columns=get_person_contact_email_address_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        email_address,\n        email_code,\n        email_comment,\n        id as person_contact_email_address_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__person_contact_email_address_base", "package": null, "version": null}, {"name": "stg_workday__person_contact_email_address_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_person_contact_email_address_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__person_contact_email_address_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__person_contact_email_address.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    email_address\n    \n , \n    cast(null as STRING) as \n    \n    email_code\n    \n , \n    cast(null as STRING) as \n    \n    email_comment\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as STRING) as \n    \n    personal_info_system_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        email_address,\n        email_code,\n        email_comment,\n        id as person_contact_email_address_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position_job_profile": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position_job_profile", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__position_job_profile.sql", "original_file_path": "models/staging/stg_workday__position_job_profile.sql", "unique_id": "model.workday.stg_workday__position_job_profile", "fqn": ["workday", "staging", "stg_workday__position_job_profile"], "alias": "stg_workday__position_job_profile", "checksum": {"name": "sha256", "checksum": "1bd56f05d8c66dff4d5741a2ca3963cd4859341229686f1e9155289aa86ca3f3"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Captures the associations between specific positions and the job profiles they are linked to.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill_code": {"name": "difficulty_to_fill_code", "description": "Code indicating the difficulty level in filling the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_critical_job": {"name": "is_critical_job", "description": "Flag indicating whether the position is considered critical based on the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_category_code": {"name": "job_category_code", "description": "Code indicating the category of the job profile associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level_code": {"name": "management_level_code", "description": "Code indicating the management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_job_profile_name": {"name": "position_job_profile_name", "description": "Name associated with the job profile linked to the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_work_shift_required": {"name": "is_work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.478716, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__position_job_profile_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__position_job_profile_base')),\n                staging_columns=get_position_job_profile_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        difficulty_to_fill_code,\n        is_critical_job,\n        job_category_code,\n        job_profile_id,\n        management_level_code,\n        name as position_job_profile_name,\n        position_id,\n        work_shift_required as is_work_shift_required\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__position_job_profile_base", "package": null, "version": null}, {"name": "stg_workday__position_job_profile_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_position_job_profile_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__position_job_profile_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__position_job_profile.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    difficulty_to_fill_code\n    \n , \n    cast(null as BOOLEAN) as \n    \n    is_critical_job\n    \n , \n    cast(null as STRING) as \n    \n    job_category_code\n    \n , \n    cast(null as STRING) as \n    \n    job_profile_id\n    \n , \n    cast(null as STRING) as \n    \n    management_level_code\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as STRING) as \n    \n    position_id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    work_shift_required\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        difficulty_to_fill_code,\n        is_critical_job,\n        job_category_code,\n        job_profile_id,\n        management_level_code,\n        name as position_job_profile_name,\n        position_id,\n        work_shift_required as is_work_shift_required\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_position_organization": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_position_organization", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__worker_position_organization.sql", "original_file_path": "models/staging/stg_workday__worker_position_organization.sql", "unique_id": "model.workday.stg_workday__worker_position_organization", "fqn": ["workday", "staging", "stg_workday__worker_position_organization"], "alias": "stg_workday__worker_position_organization", "checksum": {"name": "sha256", "checksum": "c06c632d0c5bc211074ad78e1d36ea19e68ad03423068316bd207e3978472684"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Ties together workers to the positions and organizations they hold in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_pay_group_assignment": {"name": "date_of_pay_group_assignment", "description": "Date a group's pay is assigned to be processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_business_site": {"name": "primary_business_site", "description": "Primary location a worker's business is situated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_used_in_change_organization_assignments": {"name": "is_used_in_change_organization_assignments", "description": "If a worker has opted to change these organization assignments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.513281, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__worker_position_organization_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__worker_position_organization_base')),\n                staging_columns=get_worker_position_organization_history_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        position_id,\n        worker_id,\n        _fivetran_synced, \n        index,   \n        date_of_pay_group_assignment,\n        organization_id,\n        primary_business_site,\n        used_in_change_organization_assignments as is_used_in_change_organization_assignments\n    from fields\n    where {{ dbt.current_timestamp() }} between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__worker_position_organization_base", "package": null, "version": null}, {"name": "stg_workday__worker_position_organization_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_worker_position_organization_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.current_timestamp"], "nodes": ["model.workday.stg_workday__worker_position_organization_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__worker_position_organization.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_active\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_start\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_end\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as STRING) as \n    \n    position_id\n    \n , \n    cast(null as STRING) as \n    \n    worker_id\n    \n , \n    cast(null as date) as \n    \n    date_of_pay_group_assignment\n    \n , \n    cast(null as STRING) as \n    \n    organization_id\n    \n , \n    cast(null as STRING) as \n    \n    primary_business_site\n    \n , \n    cast(null as BOOLEAN) as \n    \n    used_in_change_organization_assignments\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        position_id,\n        worker_id,\n        _fivetran_synced, \n        index,   \n        date_of_pay_group_assignment,\n        organization_id,\n        primary_business_site,\n        used_in_change_organization_assignments as is_used_in_change_organization_assignments\n    from fields\n    where current_timestamp() between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_profile": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_profile", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__job_profile.sql", "original_file_path": "models/staging/stg_workday__job_profile.sql", "unique_id": "model.workday.stg_workday__job_profile", "fqn": ["workday", "staging", "stg_workday__job_profile"], "alias": "stg_workday__job_profile", "checksum": {"name": "sha256", "checksum": "c58fefde4e2bab4dfcc7d23f270ba41e4b3a785de9c0f221854b44ce088753d6"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record represents a job profile, providing details on roles, responsibilities, and associated attributes.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_job_description": {"name": "additional_job_description", "description": "Additional details or information about the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_id": {"name": "compensation_grade_id", "description": "Identifier for the compensation grade.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_critical_job": {"name": "is_critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description": {"name": "job_description", "description": "Brief description of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill": {"name": "difficulty_to_fill", "description": "Indication of the difficulty level in filling the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_include_job_code_in_name": {"name": "is_include_job_code_in_name", "description": "Flag indicating whether to include the job code in the job profile name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_category_id": {"name": "job_category_id", "description": "Identifier for the job category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_code": {"name": "job_profile_code", "description": "Code assigned to the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level": {"name": "level", "description": "Level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level": {"name": "management_level", "description": "Management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_title": {"name": "private_title", "description": "Private title associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_public_job": {"name": "is_public_job", "description": "Flag indicating whether the job is public.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referral_payment_plan": {"name": "referral_payment_plan", "description": "Referral payment plan associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_summary": {"name": "job_summary", "description": "Summary or overview of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The title of the job for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "union_code": {"name": "union_code", "description": "Code associated with the union related to the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "union_membership_requirement": {"name": "union_membership_requirement", "description": "Flag indicating whether union membership is a requirement for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_work_shift_required": {"name": "is_work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_study_award_source_code": {"name": "work_study_award_source_code", "description": "Code associated with the source of work study awards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_study_requirement_option_code": {"name": "work_study_requirement_option_code", "description": "Code associated with work study requirement options.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4610162, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__job_profile_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__job_profile_base')),\n                staging_columns=get_job_profile_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        additional_job_description,\n        compensation_grade_id,\n        critical_job as is_critical_job,\n        description as job_description,\n        difficulty_to_fill,\n        effective_date,\n        id as job_profile_id,\n        inactive as is_inactive,\n        include_job_code_in_name as is_include_job_code_in_name,\n        job_category_id,\n        job_profile_code,\n        level,\n        management_level,\n        private_title,\n        public_job as is_public_job,\n        referral_payment_plan,\n        summary as job_summary,\n        title as job_title,\n        union_code,\n        union_membership_requirement,\n        work_shift_required as is_work_shift_required,\n        work_study_award_source_code,\n        work_study_requirement_option_code\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__job_profile_base", "package": null, "version": null}, {"name": "stg_workday__job_profile_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_job_profile_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__job_profile_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__job_profile.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    additional_job_description\n    \n , \n    cast(null as STRING) as \n    \n    compensation_grade_id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    critical_job\n    \n , \n    cast(null as STRING) as \n    \n    description\n    \n , \n    cast(null as STRING) as \n    \n    difficulty_to_fill\n    \n , \n    cast(null as date) as \n    \n    effective_date\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    inactive\n    \n , \n    cast(null as BOOLEAN) as \n    \n    include_job_code_in_name\n    \n , \n    cast(null as STRING) as \n    \n    job_category_id\n    \n , \n    cast(null as STRING) as \n    \n    job_profile_code\n    \n , \n    cast(null as STRING) as \n    \n    level\n    \n , \n    cast(null as STRING) as \n    \n    management_level\n    \n , \n    cast(null as STRING) as \n    \n    private_title\n    \n , \n    cast(null as BOOLEAN) as \n    \n    public_job\n    \n , \n    cast(null as STRING) as \n    \n    referral_payment_plan\n    \n , \n    cast(null as STRING) as \n    \n    summary\n    \n , \n    cast(null as STRING) as \n    \n    title\n    \n , \n    cast(null as STRING) as \n    \n    union_code\n    \n , \n    cast(null as STRING) as \n    \n    union_membership_requirement\n    \n , \n    cast(null as BOOLEAN) as \n    \n    work_shift_required\n    \n , \n    cast(null as STRING) as \n    \n    work_study_award_source_code\n    \n , \n    cast(null as STRING) as \n    \n    work_study_requirement_option_code\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        additional_job_description,\n        compensation_grade_id,\n        critical_job as is_critical_job,\n        description as job_description,\n        difficulty_to_fill,\n        effective_date,\n        id as job_profile_id,\n        inactive as is_inactive,\n        include_job_code_in_name as is_include_job_code_in_name,\n        job_category_id,\n        job_profile_code,\n        level,\n        management_level,\n        private_title,\n        public_job as is_public_job,\n        referral_payment_plan,\n        summary as job_summary,\n        title as job_title,\n        union_code,\n        union_membership_requirement,\n        work_shift_required as is_work_shift_required,\n        work_study_award_source_code,\n        work_study_requirement_option_code\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position_organization": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position_organization", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__position_organization.sql", "original_file_path": "models/staging/stg_workday__position_organization.sql", "unique_id": "model.workday.stg_workday__position_organization", "fqn": ["workday", "staging", "stg_workday__position_organization"], "alias": "stg_workday__position_organization", "checksum": {"name": "sha256", "checksum": "3e066e026cb6c5a57a3780d60185e331275a40666ec842bd51a9f5214c8106f0"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Captures the associations between specific positions and the organizations to which they belong.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type or category of the position within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.474399, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__position_organization_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__position_organization_base')),\n                staging_columns=get_position_organization_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        organization_id,\n        position_id,\n        type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__position_organization_base", "package": null, "version": null}, {"name": "stg_workday__position_organization_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_position_organization_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__position_organization_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__position_organization.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    organization_id\n    \n , \n    cast(null as STRING) as \n    \n    position_id\n    \n , \n    cast(null as STRING) as \n    \n    type\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        organization_id,\n        position_id,\n        type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_leave_status": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_leave_status", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__worker_leave_status.sql", "original_file_path": "models/staging/stg_workday__worker_leave_status.sql", "unique_id": "model.workday.stg_workday__worker_leave_status", "fqn": ["workday", "staging", "stg_workday__worker_leave_status"], "alias": "stg_workday__worker_leave_status", "checksum": {"name": "sha256", "checksum": "7a780769764a426e346115891309d38326b383297d43976f5b368feefe555e0c"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the leave status of workers in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_request_event_id": {"name": "leave_request_event_id", "description": "The unique identifier for the leave request event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adoption_notification_date": {"name": "adoption_notification_date", "description": "The date of adoption notification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adoption_placement_date": {"name": "adoption_placement_date", "description": "The date of adoption placement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age_of_dependent": {"name": "age_of_dependent", "description": "The age of the dependent associated with the leave status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_benefits_effect": {"name": "is_benefits_effect", "description": "The effect of leave on benefits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_caesarean_section_birth": {"name": "is_caesarean_section_birth", "description": "Indicator for Caesarean section birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_birth_date": {"name": "child_birth_date", "description": "The date of child birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_sdate_of_death": {"name": "child_sdate_of_death", "description": "The start date of child death.>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_continuous_service_accrual_effect": {"name": "is_continuous_service_accrual_effect", "description": "The effect of leave on continuous service accrual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_baby_arrived_home_from_hospital": {"name": "date_baby_arrived_home_from_hospital", "description": "The date when the baby arrived home from the hospital.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_child_entered_country": {"name": "date_child_entered_country", "description": "The date when the child entered the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_recall": {"name": "date_of_recall", "description": "The date of recall.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the type of leave", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "estimated_leave_end_date": {"name": "estimated_leave_end_date", "description": "The estimated end date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_due_date": {"name": "expected_due_date", "description": "The expected due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_day_of_work": {"name": "first_day_of_work", "description": "The date when the worker started their first day of work.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_date_for_which_paid": {"name": "last_date_for_which_paid", "description": "The last date being paid before leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_end_date": {"name": "leave_end_date", "description": "The end date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_entitlement_override": {"name": "leave_entitlement_override", "description": "Override for leave entitlement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_last_day_of_work": {"name": "leave_last_day_of_work", "description": "The last day of work associated with the leave status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_of_absence_type": {"name": "leave_of_absence_type", "description": "The type of leave of absence.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_percentage": {"name": "leave_percentage", "description": "The percentage of leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_return_event": {"name": "leave_return_event", "description": "The event associated with the return from leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_start_date": {"name": "leave_start_date", "description": "The start date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_status_code": {"name": "leave_status_code", "description": "The code indicating the status of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_type_reason": {"name": "leave_type_reason", "description": "The reason for the leave type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_during_leave": {"name": "location_during_leave", "description": "The location during the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_multiple_child_indicator": {"name": "is_multiple_child_indicator", "description": "Indicator for multiple children.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_babies_adopted_children": {"name": "number_of_babies_adopted_children", "description": "The number of babies adopted by the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_child_dependents": {"name": "number_of_child_dependents", "description": "The number of child dependents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_previous_births": {"name": "number_of_previous_births", "description": "The number of previous births.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_previous_maternity_leaves": {"name": "number_of_previous_maternity_leaves", "description": "The number of previous maternity leaves.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_on_leave": {"name": "is_on_leave", "description": "Indicator for whether the worker is on leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_paid_time_off_accrual_effect": {"name": "is_paid_time_off_accrual_effect", "description": "The effect of leave on paid time off accrual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_payroll_effect": {"name": "is_payroll_effect", "description": "The effect of leave on payroll.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_single_parent_indicator": {"name": "is_single_parent_indicator", "description": "Indicator for a single parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_security_disability_code": {"name": "social_security_disability_code", "description": "The code indicating social security disability.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stock_vesting_effect": {"name": "is_stock_vesting_effect", "description": "The effect of leave on stock vesting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stop_payment_date": {"name": "stop_payment_date", "description": "The date when stop payment occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_of_confinement": {"name": "week_of_confinement", "description": "Indicator for whether the leave is work-related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_work_related": {"name": "is_work_related", "description": "Indicator for whether the leave is work-related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.51198, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__worker_leave_status_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__worker_leave_status_base')),\n                staging_columns=get_worker_leave_status_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        adoption_notification_date,\n        adoption_placement_date,\n        age_of_dependent,\n        benefits_effect as is_benefits_effect,\n        child_birth_date,\n        child_sdate_of_death,\n        continuous_service_accrual_effect as is_continuous_service_accrual_effect,\n        date_baby_arrived_home_from_hospital,\n        date_child_entered_country,\n        date_of_recall,\n        description,\n        estimated_leave_end_date,\n        expected_due_date,\n        first_day_of_work,\n        last_date_for_which_paid,\n        leave_end_date,\n        leave_entitlement_override,\n        leave_last_day_of_work,\n        leave_of_absence_type,\n        leave_percentage,\n        leave_request_event_id,\n        leave_return_event,\n        leave_start_date,\n        leave_status_code,\n        leave_type_reason,\n        location_during_leave,\n        multiple_child_indicator as is_multiple_child_indicator,\n        number_of_babies_adopted_children,\n        number_of_child_dependents,\n        number_of_previous_births,\n        number_of_previous_maternity_leaves,\n        on_leave as is_on_leave,\n        paid_time_off_accrual_effect as is_paid_time_off_accrual_effect,\n        payroll_effect as is_payroll_effect,\n        single_parent_indicator as is_single_parent_indicator,\n        caesarean_section_birth as is_caesarean_section_birth,\n        social_security_disability_code,\n        stock_vesting_effect as is_stock_vesting_effect,\n        stop_payment_date,\n        week_of_confinement,\n        work_related as is_work_related,\n        worker_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__worker_leave_status_base", "package": null, "version": null}, {"name": "stg_workday__worker_leave_status_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_worker_leave_status_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__worker_leave_status_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__worker_leave_status.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as date) as \n    \n    adoption_notification_date\n    \n , \n    cast(null as date) as \n    \n    adoption_placement_date\n    \n , \n    cast(null as FLOAT64) as \n    \n    age_of_dependent\n    \n , \n    cast(null as BOOLEAN) as \n    \n    benefits_effect\n    \n , \n    cast(null as BOOLEAN) as \n    \n    caesarean_section_birth\n    \n , \n    cast(null as date) as \n    \n    child_birth_date\n    \n , \n    cast(null as date) as \n    \n    child_sdate_of_death\n    \n , \n    cast(null as BOOLEAN) as \n    \n    continuous_service_accrual_effect\n    \n , \n    cast(null as date) as \n    \n    date_baby_arrived_home_from_hospital\n    \n , \n    cast(null as date) as \n    \n    date_child_entered_country\n    \n , \n    cast(null as date) as \n    \n    date_of_recall\n    \n , \n    cast(null as STRING) as \n    \n    description\n    \n , \n    cast(null as date) as \n    \n    estimated_leave_end_date\n    \n , \n    cast(null as date) as \n    \n    expected_due_date\n    \n , \n    cast(null as date) as \n    \n    first_day_of_work\n    \n , \n    cast(null as date) as \n    \n    last_date_for_which_paid\n    \n , \n    cast(null as date) as \n    \n    leave_end_date\n    \n , \n    cast(null as FLOAT64) as \n    \n    leave_entitlement_override\n    \n , \n    cast(null as date) as \n    \n    leave_last_day_of_work\n    \n , \n    cast(null as STRING) as \n    \n    leave_of_absence_type\n    \n , \n    cast(null as FLOAT64) as \n    \n    leave_percentage\n    \n , \n    cast(null as STRING) as \n    \n    leave_request_event_id\n    \n , \n    cast(null as STRING) as \n    \n    leave_return_event\n    \n , \n    cast(null as date) as \n    \n    leave_start_date\n    \n , \n    cast(null as STRING) as \n    \n    leave_status_code\n    \n , \n    cast(null as STRING) as \n    \n    leave_type_reason\n    \n , \n    cast(null as STRING) as \n    \n    location_during_leave\n    \n , \n    cast(null as BOOLEAN) as \n    \n    multiple_child_indicator\n    \n , \n    cast(null as FLOAT64) as \n    \n    number_of_babies_adopted_children\n    \n , \n    cast(null as FLOAT64) as \n    \n    number_of_child_dependents\n    \n , \n    cast(null as FLOAT64) as \n    \n    number_of_previous_births\n    \n , \n    cast(null as FLOAT64) as \n    \n    number_of_previous_maternity_leaves\n    \n , \n    cast(null as BOOLEAN) as \n    \n    on_leave\n    \n , \n    cast(null as BOOLEAN) as \n    \n    paid_time_off_accrual_effect\n    \n , \n    cast(null as BOOLEAN) as \n    \n    payroll_effect\n    \n , \n    cast(null as BOOLEAN) as \n    \n    single_parent_indicator\n    \n , \n    cast(null as STRING) as \n    \n    social_security_disability_code\n    \n , \n    cast(null as BOOLEAN) as \n    \n    stock_vesting_effect\n    \n , \n    cast(null as date) as \n    \n    stop_payment_date\n    \n , \n    cast(null as date) as \n    \n    week_of_confinement\n    \n , \n    cast(null as BOOLEAN) as \n    \n    work_related\n    \n , \n    cast(null as STRING) as \n    \n    worker_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        adoption_notification_date,\n        adoption_placement_date,\n        age_of_dependent,\n        benefits_effect as is_benefits_effect,\n        child_birth_date,\n        child_sdate_of_death,\n        continuous_service_accrual_effect as is_continuous_service_accrual_effect,\n        date_baby_arrived_home_from_hospital,\n        date_child_entered_country,\n        date_of_recall,\n        description,\n        estimated_leave_end_date,\n        expected_due_date,\n        first_day_of_work,\n        last_date_for_which_paid,\n        leave_end_date,\n        leave_entitlement_override,\n        leave_last_day_of_work,\n        leave_of_absence_type,\n        leave_percentage,\n        leave_request_event_id,\n        leave_return_event,\n        leave_start_date,\n        leave_status_code,\n        leave_type_reason,\n        location_during_leave,\n        multiple_child_indicator as is_multiple_child_indicator,\n        number_of_babies_adopted_children,\n        number_of_child_dependents,\n        number_of_previous_births,\n        number_of_previous_maternity_leaves,\n        on_leave as is_on_leave,\n        paid_time_off_accrual_effect as is_paid_time_off_accrual_effect,\n        payroll_effect as is_payroll_effect,\n        single_parent_indicator as is_single_parent_indicator,\n        caesarean_section_birth as is_caesarean_section_birth,\n        social_security_disability_code,\n        stock_vesting_effect as is_stock_vesting_effect,\n        stop_payment_date,\n        week_of_confinement,\n        work_related as is_work_related,\n        worker_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__person_name": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__person_name", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__person_name.sql", "original_file_path": "models/staging/stg_workday__person_name.sql", "unique_id": "model.workday.stg_workday__person_name", "fqn": ["workday", "staging", "stg_workday__person_name"], "alias": "stg_workday__person_name", "checksum": {"name": "sha256", "checksum": "da74b8517c3659e32fa4600075b2c78fd9edf3b9d67b062a39aceeb7007a8106"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the name information for an individual in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_name_type": {"name": "person_name_type", "description": "The type or category of the person name (e.g., legal name, preferred name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_suffix": {"name": "academic_suffix", "description": "The academic suffix, if applicable (e.g., PhD, MD).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_name_type": {"name": "additional_name_type", "description": "Additional type or category for the person name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country associated with the person name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name_singapore_malaysia": {"name": "full_name_singapore_malaysia", "description": "The full name as used in Singapore and Malaysia.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hereditary_suffix": {"name": "hereditary_suffix", "description": "The hereditary suffix, if applicable (e.g., Jr, Sr).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "honorary_suffix": {"name": "honorary_suffix", "description": "The honorary suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name or surname of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_first_name": {"name": "local_first_name", "description": "The local or native first name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_first_name_2": {"name": "local_first_name_2", "description": "Additional local or native first name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_last_name": {"name": "local_last_name", "description": "The local or native last name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_last_name_2": {"name": "local_last_name_2", "description": "Additional local or native last name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_middle_name": {"name": "local_middle_name", "description": "The local or native middle name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_middle_name_2": {"name": "local_middle_name_2", "description": "Additional local or native middle name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_secondary_last_name": {"name": "local_secondary_last_name", "description": "Secondary local or native last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_secondary_last_name_2": {"name": "local_secondary_last_name_2", "description": "Additional secondary local or native last name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_name": {"name": "middle_name", "description": "The middle name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_salutation": {"name": "prefix_salutation", "description": "The prefix or salutation before the name (e.g., Mr., Ms., Dr.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_title": {"name": "prefix_title", "description": "The prefix or title associated with the name (e.g., Professor).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_title_code": {"name": "prefix_title_code", "description": "The code associated with the prefix or title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "professional_suffix": {"name": "professional_suffix", "description": "The professional suffix, if applicable (e.g., Esq., CPA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "religious_suffix": {"name": "religious_suffix", "description": "The religious suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "royal_suffix": {"name": "royal_suffix", "description": "The royal suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secondary_last_name": {"name": "secondary_last_name", "description": "Secondary last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_suffix": {"name": "social_suffix", "description": "The social suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_suffix_id": {"name": "social_suffix_id", "description": "The identifier for the social suffix.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tertiary_last_name": {"name": "tertiary_last_name", "description": "Tertiary last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4932601, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__person_name_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__person_name_base')),\n                staging_columns=get_person_name_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        academic_suffix,\n        additional_name_type,\n        country,\n        first_name,\n        full_name_singapore_malaysia,\n        hereditary_suffix,\n        honorary_suffix,\n        index,\n        last_name,\n        local_first_name,\n        local_first_name_2,\n        local_last_name,\n        local_last_name_2,\n        local_middle_name,\n        local_middle_name_2,\n        local_secondary_last_name,\n        local_secondary_last_name_2,\n        middle_name,\n        prefix_salutation,\n        prefix_title,\n        prefix_title_code,\n        professional_suffix,\n        religious_suffix,\n        royal_suffix,\n        secondary_last_name,\n        social_suffix,\n        social_suffix_id,\n        tertiary_last_name,\n        type as person_name_type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__person_name_base", "package": null, "version": null}, {"name": "stg_workday__person_name_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_person_name_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__person_name_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__person_name.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    academic_suffix\n    \n , \n    cast(null as STRING) as \n    \n    additional_name_type\n    \n , \n    cast(null as STRING) as \n    \n    country\n    \n , \n    cast(null as STRING) as \n    \n    first_name\n    \n , \n    cast(null as STRING) as \n    \n    full_name_singapore_malaysia\n    \n , \n    cast(null as STRING) as \n    \n    hereditary_suffix\n    \n , \n    cast(null as STRING) as \n    \n    honorary_suffix\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as STRING) as \n    \n    last_name\n    \n , \n    cast(null as STRING) as \n    \n    local_first_name\n    \n , \n    cast(null as STRING) as \n    \n    local_first_name_2\n    \n , \n    cast(null as STRING) as \n    \n    local_last_name\n    \n , \n    cast(null as STRING) as \n    \n    local_last_name_2\n    \n , \n    cast(null as STRING) as \n    \n    local_middle_name\n    \n , \n    cast(null as STRING) as \n    \n    local_middle_name_2\n    \n , \n    cast(null as STRING) as \n    \n    local_secondary_last_name\n    \n , \n    cast(null as STRING) as \n    \n    local_secondary_last_name_2\n    \n , \n    cast(null as STRING) as \n    \n    middle_name\n    \n , \n    cast(null as STRING) as \n    \n    personal_info_system_id\n    \n , \n    cast(null as STRING) as \n    \n    prefix_salutation\n    \n , \n    cast(null as STRING) as \n    \n    prefix_title\n    \n , \n    cast(null as STRING) as \n    \n    prefix_title_code\n    \n , \n    cast(null as STRING) as \n    \n    professional_suffix\n    \n , \n    cast(null as STRING) as \n    \n    religious_suffix\n    \n , \n    cast(null as STRING) as \n    \n    royal_suffix\n    \n , \n    cast(null as STRING) as \n    \n    secondary_last_name\n    \n , \n    cast(null as STRING) as \n    \n    social_suffix\n    \n , \n    cast(null as STRING) as \n    \n    social_suffix_id\n    \n , \n    cast(null as STRING) as \n    \n    tertiary_last_name\n    \n , \n    cast(null as STRING) as \n    \n    type\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        academic_suffix,\n        additional_name_type,\n        country,\n        first_name,\n        full_name_singapore_malaysia,\n        hereditary_suffix,\n        honorary_suffix,\n        index,\n        last_name,\n        local_first_name,\n        local_first_name_2,\n        local_last_name,\n        local_last_name_2,\n        local_middle_name,\n        local_middle_name_2,\n        local_secondary_last_name,\n        local_secondary_last_name_2,\n        middle_name,\n        prefix_salutation,\n        prefix_title,\n        prefix_title_code,\n        professional_suffix,\n        religious_suffix,\n        royal_suffix,\n        secondary_last_name,\n        social_suffix,\n        social_suffix_id,\n        tertiary_last_name,\n        type as person_name_type\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__personal_information_ethnicity": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__personal_information_ethnicity", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__personal_information_ethnicity.sql", "original_file_path": "models/staging/stg_workday__personal_information_ethnicity.sql", "unique_id": "model.workday.stg_workday__personal_information_ethnicity", "fqn": ["workday", "staging", "stg_workday__personal_information_ethnicity"], "alias": "stg_workday__personal_information_ethnicity", "checksum": {"name": "sha256", "checksum": "1cddb347cc063152fdf7519ab20008979c18819cf57eda40f40b5c0ae4df795c"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents information about the ethnicity of an individual in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_code": {"name": "ethnicity_code", "description": "The code representing the ethnicity of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_id": {"name": "ethnicity_id", "description": "The identifier associated with the ethnicity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4942741, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__personal_information_ethnicity_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__personal_information_ethnicity_base')),\n                staging_columns=get_personal_information_ethnicity_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        ethnicity_code,\n        ethnicity_id,\n        index\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__personal_information_ethnicity_base", "package": null, "version": null}, {"name": "stg_workday__personal_information_ethnicity_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_personal_information_ethnicity_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__personal_information_ethnicity_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__personal_information_ethnicity.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    ethnicity_code\n    \n , \n    cast(null as STRING) as \n    \n    ethnicity_id\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as STRING) as \n    \n    personal_info_system_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        ethnicity_code,\n        ethnicity_id,\n        index\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_job_family": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_job_family", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__organization_job_family.sql", "original_file_path": "models/staging/stg_workday__organization_job_family.sql", "unique_id": "model.workday.stg_workday__organization_job_family", "fqn": ["workday", "staging", "stg_workday__organization_job_family"], "alias": "stg_workday__organization_job_family", "checksum": {"name": "sha256", "checksum": "25a30264c730bb3d4ed427d08d7262415aa13c72bda44f292aef305dabadb4dc"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Captures the associations between different organizational entities and the job families they are linked to.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_id": {"name": "job_family_group_id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.469383, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__organization_job_family_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__organization_job_family_base')),\n                staging_columns=get_organization_job_family_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_group_id,\n        job_family_id,\n        organization_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__organization_job_family_base", "package": null, "version": null}, {"name": "stg_workday__organization_job_family_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_organization_job_family_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__organization_job_family_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__organization_job_family.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    job_family_group_id\n    \n , \n    cast(null as STRING) as \n    \n    job_family_id\n    \n , \n    cast(null as STRING) as \n    \n    organization_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_group_id,\n        job_family_id,\n        organization_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__job_family.sql", "original_file_path": "models/staging/stg_workday__job_family.sql", "unique_id": "model.workday.stg_workday__job_family", "fqn": ["workday", "staging", "stg_workday__job_family"], "alias": "stg_workday__job_family", "checksum": {"name": "sha256", "checksum": "2b55aade2b7c5f3aaa66b8689637aecadf3960de67f0df66ecd9d511ec3f4a2c"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Each record provides essential information about a specific job family, contributing to the organizational hierarchy and classification of roles.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_code": {"name": "job_family_code", "description": "Code assigned to the job family", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_summary": {"name": "job_family_summary", "description": "The summary of the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.463351, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__job_family_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__job_family_base')),\n                staging_columns=get_job_family_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        effective_date,\n        id as job_family_id,\n        inactive as is_inactive,\n        job_family_code,\n        summary as job_family_summary\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__job_family_base", "package": null, "version": null}, {"name": "stg_workday__job_family_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_job_family_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__job_family_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__job_family.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as date) as \n    \n    effective_date\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    inactive\n    \n , \n    cast(null as STRING) as \n    \n    job_family_code\n    \n , \n    cast(null as STRING) as \n    \n    summary\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        effective_date,\n        id as job_family_id,\n        inactive as is_inactive,\n        job_family_code,\n        summary as job_family_summary\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__military_service": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__military_service", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__military_service.sql", "original_file_path": "models/staging/stg_workday__military_service.sql", "unique_id": "model.workday.stg_workday__military_service", "fqn": ["workday", "staging", "stg_workday__military_service"], "alias": "stg_workday__military_service", "checksum": {"name": "sha256", "checksum": "2723e93ad3a6b887aa7d9b8c5d97bee2714a4b0d8ff0c80decb8be429e77b709"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents information about an individual's military service in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date on which the individual was discharged from military service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments related to the military service record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rank": {"name": "rank", "description": "The rank achieved by the individual during military service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service": {"name": "service", "description": "The specific military service branch in which the individual served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_type": {"name": "service_type", "description": "The type or category of military service (e.g., active duty, reserve, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "military_status": {"name": "military_status", "description": "The status of the individual's military service (e.g., active, inactive, retired).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_begin_date": {"name": "status_begin_date", "description": "The date on which the current military service status began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.495435, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__military_service_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__military_service_base')),\n                staging_columns=get_military_service_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        discharge_date,\n        index,\n        notes,\n        rank,\n        service,\n        service_type,\n        status as military_status,\n        status_begin_date\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__military_service_base", "package": null, "version": null}, {"name": "stg_workday__military_service_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_military_service_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__military_service_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__military_service.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as date) as \n    \n    discharge_date\n    \n , \n    cast(null as INT64) as \n    \n    index\n    \n , \n    cast(null as STRING) as \n    \n    notes\n    \n , \n    cast(null as STRING) as \n    \n    personal_info_system_id\n    \n , \n    cast(null as STRING) as \n    \n    rank\n    \n , \n    cast(null as STRING) as \n    \n    service\n    \n , \n    cast(null as STRING) as \n    \n    service_type\n    \n , \n    cast(null as STRING) as \n    \n    status\n    \n , \n    cast(null as date) as \n    \n    status_begin_date\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        personal_info_system_id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        discharge_date,\n        index,\n        notes,\n        rank,\n        service,\n        service_type,\n        status as military_status,\n        status_begin_date\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__personal_information": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__personal_information", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__personal_information.sql", "original_file_path": "models/staging/stg_workday__personal_information.sql", "unique_id": "model.workday.stg_workday__personal_information", "fqn": ["workday", "staging", "stg_workday__personal_information"], "alias": "stg_workday__personal_information", "checksum": {"name": "sha256", "checksum": "99c2547b9cba3b9798c54da22173f0f4e2d0db3f9623673fc37f0c6f081646bd"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "The personal information associated with each worker.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of personal information record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_nationality": {"name": "additional_nationality", "description": "Additional nationality associated with the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blood_type": {"name": "blood_type", "description": "The blood type of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "citizenship_status": {"name": "citizenship_status", "description": "The citizenship status of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_of_birth": {"name": "city_of_birth", "description": "The city of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_of_birth_code": {"name": "city_of_birth_code", "description": "The city of birth code of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_of_birth": {"name": "country_of_birth", "description": "The country of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_birth": {"name": "date_of_birth", "description": "The date of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_death": {"name": "date_of_death", "description": "The date of death of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The gender of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hispanic_or_latino": {"name": "is_hispanic_or_latino", "description": "lag indicating whether the individual is Hispanic or Latino.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_locality": {"name": "hukou_locality", "description": "The locality associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_postal_code": {"name": "hukou_postal_code", "description": "The postal code associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_region": {"name": "hukou_region", "description": "The region associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_subregion": {"name": "hukou_subregion", "description": "The subregion associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_type": {"name": "hukou_type", "description": "The type of Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_medical_exam_date": {"name": "last_medical_exam_date", "description": "The date of the last medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_medical_exam_valid_to": {"name": "last_medical_exam_valid_to", "description": "The validity date of the last medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_local_hukou": {"name": "is_local_hukou", "description": "Flag indicating whether the Hukou is local.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "marital_status": {"name": "marital_status", "description": "The marital status of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "marital_status_date": {"name": "marital_status_date", "description": "The date of the marital status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_exam_notes": {"name": "medical_exam_notes", "description": "Notes from the medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "native_region": {"name": "native_region", "description": "The native region of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "native_region_code": {"name": "native_region_code", "description": "The code of the native region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personnel_file_agency": {"name": "personnel_file_agency", "description": "The agency associated with the personnel file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "political_affiliation": {"name": "political_affiliation", "description": "The political affiliation of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_nationality": {"name": "primary_nationality", "description": "The primary nationality of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_of_birth": {"name": "region_of_birth", "description": "The region of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_of_birth_code": {"name": "region_of_birth_code", "description": "The code of the region of birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "religion": {"name": "religion", "description": "The religion of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_benefit": {"name": "social_benefit", "description": "The social benefit associated with the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_tobacco_use": {"name": "is_tobacco_use", "description": "Flag indicating whether the individual uses tobacco.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4906838, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__personal_information_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__personal_information_base')),\n                staging_columns=get_personal_information_history_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        additional_nationality,\n        blood_type,\n        citizenship_status,\n        city_of_birth,\n        city_of_birth_code,\n        country_of_birth,\n        date_of_birth,\n        date_of_death,\n        gender,\n        hispanic_or_latino as is_hispanic_or_latino,\n        hukou_locality,\n        hukou_postal_code,\n        hukou_region,\n        hukou_subregion,\n        hukou_type,\n        last_medical_exam_date,\n        last_medical_exam_valid_to,\n        local_hukou as is_local_hukou,\n        marital_status,\n        marital_status_date,\n        medical_exam_notes,\n        native_region,\n        native_region_code,\n        personnel_file_agency,\n        political_affiliation,\n        primary_nationality,\n        region_of_birth,\n        region_of_birth_code,\n        religion,\n        social_benefit,\n        tobacco_use as is_tobacco_use,\n        type\n    from fields\n    where {{ dbt.current_timestamp() }} between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__personal_information_base", "package": null, "version": null}, {"name": "stg_workday__personal_information_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_personal_information_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.current_timestamp"], "nodes": ["model.workday.stg_workday__personal_information_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__personal_information.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_active\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_start\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_end\n    \n , \n    cast(null as STRING) as \n    \n    additional_nationality\n    \n , \n    cast(null as STRING) as \n    \n    blood_type\n    \n , \n    cast(null as STRING) as \n    \n    citizenship_status\n    \n , \n    cast(null as STRING) as \n    \n    city_of_birth\n    \n , \n    cast(null as STRING) as \n    \n    city_of_birth_code\n    \n , \n    cast(null as STRING) as \n    \n    country_of_birth\n    \n , \n    cast(null as date) as \n    \n    date_of_birth\n    \n , \n    cast(null as date) as \n    \n    date_of_death\n    \n , \n    cast(null as STRING) as \n    \n    gender\n    \n , \n    cast(null as BOOLEAN) as \n    \n    hispanic_or_latino\n    \n , \n    cast(null as STRING) as \n    \n    hukou_locality\n    \n , \n    cast(null as STRING) as \n    \n    hukou_postal_code\n    \n , \n    cast(null as STRING) as \n    \n    hukou_region\n    \n , \n    cast(null as STRING) as \n    \n    hukou_subregion\n    \n , \n    cast(null as STRING) as \n    \n    hukou_type\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as date) as \n    \n    last_medical_exam_date\n    \n , \n    cast(null as date) as \n    \n    last_medical_exam_valid_to\n    \n , \n    cast(null as BOOLEAN) as \n    \n    local_hukou\n    \n , \n    cast(null as STRING) as \n    \n    marital_status\n    \n , \n    cast(null as date) as \n    \n    marital_status_date\n    \n , \n    cast(null as STRING) as \n    \n    medical_exam_notes\n    \n , \n    cast(null as STRING) as \n    \n    native_region\n    \n , \n    cast(null as STRING) as \n    \n    native_region_code\n    \n , \n    cast(null as STRING) as \n    \n    personnel_file_agency\n    \n , \n    cast(null as STRING) as \n    \n    political_affiliation\n    \n , \n    cast(null as STRING) as \n    \n    primary_nationality\n    \n , \n    cast(null as STRING) as \n    \n    region_of_birth\n    \n , \n    cast(null as STRING) as \n    \n    region_of_birth_code\n    \n , \n    cast(null as STRING) as \n    \n    religion\n    \n , \n    cast(null as STRING) as \n    \n    social_benefit\n    \n , \n    cast(null as BOOLEAN) as \n    \n    tobacco_use\n    \n , \n    cast(null as STRING) as \n    \n    type\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        additional_nationality,\n        blood_type,\n        citizenship_status,\n        city_of_birth,\n        city_of_birth_code,\n        country_of_birth,\n        date_of_birth,\n        date_of_death,\n        gender,\n        hispanic_or_latino as is_hispanic_or_latino,\n        hukou_locality,\n        hukou_postal_code,\n        hukou_region,\n        hukou_subregion,\n        hukou_type,\n        last_medical_exam_date,\n        last_medical_exam_valid_to,\n        local_hukou as is_local_hukou,\n        marital_status,\n        marital_status_date,\n        medical_exam_notes,\n        native_region,\n        native_region_code,\n        personnel_file_agency,\n        political_affiliation,\n        primary_nationality,\n        region_of_birth,\n        region_of_birth_code,\n        religion,\n        social_benefit,\n        tobacco_use as is_tobacco_use,\n        type\n    from fields\n    where current_timestamp() between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_job_family_group": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_job_family_group", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__job_family_job_family_group.sql", "original_file_path": "models/staging/stg_workday__job_family_job_family_group.sql", "unique_id": "model.workday.stg_workday__job_family_job_family_group", "fqn": ["workday", "staging", "stg_workday__job_family_job_family_group"], "alias": "stg_workday__job_family_job_family_group", "checksum": {"name": "sha256", "checksum": "6fd4740d69f85753d0bf54a02768c8d9b8887e6e58481511bb3067f6dbe9b7eb"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Represents the relationship between job families and job family groups in the Workday dataset.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_id": {"name": "job_family_group_id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4644392, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__job_family_job_family_group_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__job_family_job_family_group_base')),\n                staging_columns=get_job_family_job_family_group_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_id,\n        job_family_group_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_family_group_base", "package": null, "version": null}, {"name": "stg_workday__job_family_job_family_group_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_job_family_job_family_group_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__job_family_job_family_group_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__job_family_job_family_group.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as STRING) as \n    \n    job_family_id\n    \n , \n    cast(null as STRING) as \n    \n    job_family_group_id\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        job_family_id,\n        job_family_group_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__worker.sql", "original_file_path": "models/staging/stg_workday__worker.sql", "unique_id": "model.workday.stg_workday__worker", "fqn": ["workday", "staging", "stg_workday__worker"], "alias": "stg_workday__worker", "checksum": {"name": "sha256", "checksum": "eabb44e7218212b2cfa0ed153715acd2cd920d91f48a20884f237d3307a8d88d"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table serves as a central repository for details related to the employment status, compensation, and other key attributes of each worker.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_tenure_date": {"name": "academic_tenure_date", "description": "Date when academic tenure is achieved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Flag indicating the current active status of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_status_date": {"name": "active_status_date", "description": "Date when the active status was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_currency": {"name": "annual_currency_summary_currency", "description": "Currency used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_frequency": {"name": "annual_currency_summary_frequency", "description": "Frequency of currency for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_primary_compensation_basis": {"name": "annual_currency_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_total_base_pay": {"name": "annual_currency_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_total_salary_and_allowances": {"name": "annual_currency_summary_total_salary_and_allowances", "description": "Total salary and allowances in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_currency": {"name": "annual_summary_currency", "description": "Currency used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_frequency": {"name": "annual_summary_frequency", "description": "Frequency of currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_primary_compensation_basis": {"name": "annual_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_total_base_pay": {"name": "annual_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_total_salary_and_allowances": {"name": "annual_summary_total_salary_and_allowances", "description": "Total salary and allowances in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "benefits_service_date": {"name": "benefits_service_date", "description": "Date when the worker's benefits service starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_service_date": {"name": "company_service_date", "description": "Date when the worker's service with the company started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_effective_date": {"name": "compensation_effective_date", "description": "Effective date when changes to the worker's compensation take effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_id": {"name": "compensation_grade_id", "description": "Identifier for the compensation grade.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_id": {"name": "compensation_grade_profile_id", "description": "Unique identifier for the compensation grade profile associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "continuous_service_date": {"name": "continuous_service_date", "description": "Date when the worker's continuous service with the organization started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_assignment_details": {"name": "contract_assignment_details", "description": "Details of the worker's contract assignment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_currency_code": {"name": "contract_currency_code", "description": "Currency code used for the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_end_date": {"name": "contract_end_date", "description": "Date when the worker's contract is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_frequency_name": {"name": "contract_frequency_name", "description": "Frequency of payment for the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_pay_rate": {"name": "contract_pay_rate", "description": "Pay rate associated with the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_vendor_name": {"name": "contract_vendor_name", "description": "Name of the vendor associated with the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered_workforce": {"name": "date_entered_workforce", "description": "Date when the worker entered the workforce.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_unemployed": {"name": "days_unemployed", "description": "Number of days the worker has been unemployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eligible_for_hire": {"name": "eligible_for_hire", "description": "Flag indicating whether the worker is eligible for hire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eligible_for_rehire_on_latest_termination": {"name": "eligible_for_rehire_on_latest_termination", "description": "Flag indicating whether the worker is eligible for rehire based on the latest termination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_currency": {"name": "employee_compensation_currency", "description": "Currency code used for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_frequency": {"name": "employee_compensation_frequency", "description": "Frequency of payment for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_primary_compensation_basis": {"name": "employee_compensation_primary_compensation_basis", "description": "Primary compensation basis used for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_total_base_pay": {"name": "employee_compensation_total_base_pay", "description": "Total base pay for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_total_salary_and_allowances": {"name": "employee_compensation_total_salary_and_allowances", "description": "Total salary and allowances for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_employment_date": {"name": "end_employment_date", "description": "Date when the worker's employment is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_date_of_return": {"name": "expected_date_of_return", "description": "Expected date of the worker's return.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_retirement_date": {"name": "expected_retirement_date", "description": "Expected date of the worker's retirement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_day_of_work": {"name": "first_day_of_work", "description": "The date when the worker started their first day of work.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_has_international_assignment": {"name": "is_has_international_assignment", "description": "Flag indicating whether the worker has an international assignment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_date": {"name": "hire_date", "description": "The date when the worker was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_reason": {"name": "hire_reason", "description": "The reason for hiring the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hire_rescinded": {"name": "is_hire_rescinded", "description": "Flag indicating whether the worker's hire was rescinded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_country": {"name": "home_country", "description": "The home country of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_currency": {"name": "hourly_frequency_currency", "description": "Currency code used for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_frequency": {"name": "hourly_frequency_frequency", "description": "Frequency of payment for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_primary_compensation_basis": {"name": "hourly_frequency_primary_compensation_basis", "description": "Primary compensation basis used for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_total_base_pay": {"name": "hourly_frequency_total_base_pay", "description": "Total base pay for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_total_salary_and_allowances": {"name": "hourly_frequency_total_salary_and_allowances", "description": "Total salary and allowances for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_datefor_which_paid": {"name": "last_datefor_which_paid", "description": "Last date for which the worker was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_termination_reason": {"name": "local_termination_reason", "description": "The reason for local termination of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "months_continuous_prior_employment": {"name": "months_continuous_prior_employment", "description": "Number of months of continuous prior employment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_not_returning": {"name": "is_not_returning", "description": "Flag indicating whether the worker is not returning.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_hire_date": {"name": "original_hire_date", "description": "The original date when the worker was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_currency": {"name": "pay_group_frequency_currency", "description": "Currency code used for the worker's pay group frequency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_frequency": {"name": "pay_group_frequency_frequency", "description": "Frequency of payment for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_primary_compensation_basis": {"name": "pay_group_frequency_primary_compensation_basis", "description": "Primary compensation basis used for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_total_base_pay": {"name": "pay_group_frequency_total_base_pay", "description": "Total base pay for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_total_salary_and_allowances": {"name": "pay_group_frequency_total_salary_and_allowances", "description": "Total salary and allowances for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_through_date": {"name": "pay_through_date", "description": "The date through which the worker is paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_category": {"name": "primary_termination_category", "description": "The primary termination category for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_reason": {"name": "primary_termination_reason", "description": "The primary termination reason for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probation_end_date": {"name": "probation_end_date", "description": "The date when the worker's probation ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probation_start_date": {"name": "probation_start_date", "description": "The date when the worker's probation starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_reference_id": {"name": "reason_reference_id", "description": "The reference ID for the termination reason.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_regrettable_termination": {"name": "is_regrettable_termination", "description": "Flag indicating whether the worker's termination is regrettable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_rehire": {"name": "is_rehire", "description": "Flag indicating whether the worker is eligible for rehire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resignation_date": {"name": "resignation_date", "description": "The date when the worker resigned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_retired": {"name": "is_retired", "description": "Flag indicating whether the worker is retired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retirement_date": {"name": "retirement_date", "description": "The date when the worker retired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retirement_eligibility_date": {"name": "retirement_eligibility_date", "description": "The date when the worker becomes eligible for retirement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_return_unknown": {"name": "is_return_unknown", "description": "Flag indicating whether the worker's return status is unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seniority_date": {"name": "seniority_date", "description": "The date when the worker's seniority is recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "severance_date": {"name": "severance_date", "description": "The date when the worker's severance is recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_terminated": {"name": "is_terminated", "description": "Has the worker been terminated?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "termination_date": {"name": "termination_date", "description": "The date when the worker is terminated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_termination_involuntary": {"name": "is_termination_involuntary", "description": "Flag indicating whether the termination is involuntary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "termination_last_day_of_work": {"name": "termination_last_day_of_work", "description": "The last day of work for the worker during termination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_off_service_date": {"name": "time_off_service_date", "description": "The date when the worker's time-off service starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_id": {"name": "universal_id", "description": "The universal ID associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The identifier for the user associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vesting_date": {"name": "vesting_date", "description": "The date when the worker's vesting starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_code": {"name": "worker_code", "description": "The code associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4871502, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__worker_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__worker_base')),\n                staging_columns=get_worker_history_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        academic_tenure_date,\n        active as is_active,\n        active_status_date,\n        annual_currency_summary_currency,\n        annual_currency_summary_frequency,\n        annual_currency_summary_primary_compensation_basis,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_total_salary_and_allowances,\n        annual_summary_currency,\n        annual_summary_frequency,\n        annual_summary_primary_compensation_basis,\n        annual_summary_total_base_pay,\n        annual_summary_total_salary_and_allowances,\n        benefits_service_date,\n        company_service_date,\n        compensation_effective_date,\n        compensation_grade_id,\n        compensation_grade_profile_id,\n        continuous_service_date,\n        contract_assignment_details,\n        contract_currency_code,\n        contract_end_date,\n        contract_frequency_name,\n        contract_pay_rate,\n        contract_vendor_name,\n        date_entered_workforce,\n        days_unemployed,\n        eligible_for_hire,\n        eligible_for_rehire_on_latest_termination,\n        employee_compensation_currency,\n        employee_compensation_frequency,\n        employee_compensation_primary_compensation_basis,\n        employee_compensation_total_base_pay,\n        employee_compensation_total_salary_and_allowances,\n        end_employment_date,\n        expected_date_of_return,\n        expected_retirement_date,\n        first_day_of_work,\n        has_international_assignment as is_has_international_assignment,\n        hire_date,\n        hire_reason,\n        hire_rescinded as is_hire_rescinded,\n        home_country,\n        hourly_frequency_currency,\n        hourly_frequency_frequency,\n        hourly_frequency_primary_compensation_basis,\n        hourly_frequency_total_base_pay,\n        hourly_frequency_total_salary_and_allowances,\n        last_datefor_which_paid,\n        local_termination_reason,\n        months_continuous_prior_employment,\n        not_returning as is_not_returning,\n        original_hire_date,\n        pay_group_frequency_currency,\n        pay_group_frequency_frequency,\n        pay_group_frequency_primary_compensation_basis,\n        pay_group_frequency_total_base_pay,\n        pay_group_frequency_total_salary_and_allowances,\n        pay_through_date,\n        primary_termination_category,\n        primary_termination_reason,\n        probation_end_date,\n        probation_start_date,\n        reason_reference_id,\n        regrettable_termination as is_regrettable_termination,\n        rehire as is_rehire,\n        resignation_date,\n        retired as is_retired,\n        retirement_date,\n        retirement_eligibility_date,\n        return_unknown as is_return_unknown,\n        seniority_date,\n        severance_date,\n        terminated as is_terminated,\n        termination_date,\n        termination_involuntary as is_termination_involuntary,\n        termination_last_day_of_work,\n        time_off_service_date,\n        universal_id,\n        user_id,\n        vesting_date,\n        worker_code\n    from fields\n    where {{ dbt.current_timestamp() }} between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__worker_base", "package": null, "version": null}, {"name": "stg_workday__worker_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_worker_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.current_timestamp"], "nodes": ["model.workday.stg_workday__worker_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__worker.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_active\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_start\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_end\n    \n , \n    cast(null as date) as \n    \n    academic_tenure_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    active\n    \n , \n    cast(null as date) as \n    \n    active_status_date\n    \n , \n    cast(null as STRING) as \n    \n    annual_currency_summary_currency\n    \n , \n    cast(null as STRING) as \n    \n    annual_currency_summary_frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_currency_summary_primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_currency_summary_total_base_pay\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_currency_summary_total_salary_and_allowances\n    \n , \n    cast(null as STRING) as \n    \n    annual_summary_currency\n    \n , \n    cast(null as STRING) as \n    \n    annual_summary_frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_summary_primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_summary_total_base_pay\n    \n , \n    cast(null as FLOAT64) as \n    \n    annual_summary_total_salary_and_allowances\n    \n , \n    cast(null as date) as \n    \n    benefits_service_date\n    \n , \n    cast(null as date) as \n    \n    company_service_date\n    \n , \n    cast(null as date) as \n    \n    compensation_effective_date\n    \n , \n    cast(null as STRING) as \n    \n    compensation_grade_id\n    \n , \n    cast(null as STRING) as \n    \n    compensation_grade_profile_id\n    \n , \n    cast(null as date) as \n    \n    continuous_service_date\n    \n , \n    cast(null as STRING) as \n    \n    contract_assignment_details\n    \n , \n    cast(null as STRING) as \n    \n    contract_currency_code\n    \n , \n    cast(null as date) as \n    \n    contract_end_date\n    \n , \n    cast(null as STRING) as \n    \n    contract_frequency_name\n    \n , \n    cast(null as FLOAT64) as \n    \n    contract_pay_rate\n    \n , \n    cast(null as STRING) as \n    \n    contract_vendor_name\n    \n , \n    cast(null as date) as \n    \n    date_entered_workforce\n    \n , \n    cast(null as FLOAT64) as \n    \n    days_unemployed\n    \n , \n    cast(null as STRING) as \n    \n    eligible_for_hire\n    \n , \n    cast(null as STRING) as \n    \n    eligible_for_rehire_on_latest_termination\n    \n , \n    cast(null as STRING) as \n    \n    employee_compensation_currency\n    \n , \n    cast(null as STRING) as \n    \n    employee_compensation_frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    employee_compensation_primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    employee_compensation_total_base_pay\n    \n , \n    cast(null as FLOAT64) as \n    \n    employee_compensation_total_salary_and_allowances\n    \n , \n    cast(null as date) as \n    \n    end_employment_date\n    \n , \n    cast(null as date) as \n    \n    expected_date_of_return\n    \n , \n    cast(null as date) as \n    \n    expected_retirement_date\n    \n , \n    cast(null as date) as \n    \n    first_day_of_work\n    \n , \n    cast(null as BOOLEAN) as \n    \n    has_international_assignment\n    \n , \n    cast(null as date) as \n    \n    hire_date\n    \n , \n    cast(null as STRING) as \n    \n    hire_reason\n    \n , \n    cast(null as BOOLEAN) as \n    \n    hire_rescinded\n    \n , \n    cast(null as STRING) as \n    \n    home_country\n    \n , \n    cast(null as STRING) as \n    \n    hourly_frequency_currency\n    \n , \n    cast(null as STRING) as \n    \n    hourly_frequency_frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    hourly_frequency_primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    hourly_frequency_total_base_pay\n    \n , \n    cast(null as FLOAT64) as \n    \n    hourly_frequency_total_salary_and_allowances\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as date) as \n    \n    last_datefor_which_paid\n    \n , \n    cast(null as STRING) as \n    \n    local_termination_reason\n    \n , \n    cast(null as FLOAT64) as \n    \n    months_continuous_prior_employment\n    \n , \n    cast(null as BOOLEAN) as \n    \n    not_returning\n    \n , \n    cast(null as date) as \n    \n    original_hire_date\n    \n , \n    cast(null as STRING) as \n    \n    pay_group_frequency_currency\n    \n , \n    cast(null as STRING) as \n    \n    pay_group_frequency_frequency\n    \n , \n    cast(null as FLOAT64) as \n    \n    pay_group_frequency_primary_compensation_basis\n    \n , \n    cast(null as FLOAT64) as \n    \n    pay_group_frequency_total_base_pay\n    \n , \n    cast(null as FLOAT64) as \n    \n    pay_group_frequency_total_salary_and_allowances\n    \n , \n    cast(null as date) as \n    \n    pay_through_date\n    \n , \n    cast(null as STRING) as \n    \n    primary_termination_category\n    \n , \n    cast(null as STRING) as \n    \n    primary_termination_reason\n    \n , \n    cast(null as date) as \n    \n    probation_end_date\n    \n , \n    cast(null as date) as \n    \n    probation_start_date\n    \n , \n    cast(null as STRING) as \n    \n    reason_reference_id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    regrettable_termination\n    \n , \n    cast(null as BOOLEAN) as \n    \n    rehire\n    \n , \n    cast(null as date) as \n    \n    resignation_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    retired\n    \n , \n    cast(null as date) as \n    \n    retirement_date\n    \n , \n    cast(null as date) as \n    \n    retirement_eligibility_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    return_unknown\n    \n , \n    cast(null as date) as \n    \n    seniority_date\n    \n , \n    cast(null as date) as \n    \n    severance_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    terminated\n    \n , \n    cast(null as date) as \n    \n    termination_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    termination_involuntary\n    \n , \n    cast(null as date) as \n    \n    termination_last_day_of_work\n    \n , \n    cast(null as date) as \n    \n    time_off_service_date\n    \n , \n    cast(null as STRING) as \n    \n    universal_id\n    \n , \n    cast(null as STRING) as \n    \n    user_id\n    \n , \n    cast(null as date) as \n    \n    vesting_date\n    \n , \n    cast(null as STRING) as \n    \n    worker_code\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as worker_id,\n        source_relation,\n        _fivetran_synced,\n        academic_tenure_date,\n        active as is_active,\n        active_status_date,\n        annual_currency_summary_currency,\n        annual_currency_summary_frequency,\n        annual_currency_summary_primary_compensation_basis,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_total_salary_and_allowances,\n        annual_summary_currency,\n        annual_summary_frequency,\n        annual_summary_primary_compensation_basis,\n        annual_summary_total_base_pay,\n        annual_summary_total_salary_and_allowances,\n        benefits_service_date,\n        company_service_date,\n        compensation_effective_date,\n        compensation_grade_id,\n        compensation_grade_profile_id,\n        continuous_service_date,\n        contract_assignment_details,\n        contract_currency_code,\n        contract_end_date,\n        contract_frequency_name,\n        contract_pay_rate,\n        contract_vendor_name,\n        date_entered_workforce,\n        days_unemployed,\n        eligible_for_hire,\n        eligible_for_rehire_on_latest_termination,\n        employee_compensation_currency,\n        employee_compensation_frequency,\n        employee_compensation_primary_compensation_basis,\n        employee_compensation_total_base_pay,\n        employee_compensation_total_salary_and_allowances,\n        end_employment_date,\n        expected_date_of_return,\n        expected_retirement_date,\n        first_day_of_work,\n        has_international_assignment as is_has_international_assignment,\n        hire_date,\n        hire_reason,\n        hire_rescinded as is_hire_rescinded,\n        home_country,\n        hourly_frequency_currency,\n        hourly_frequency_frequency,\n        hourly_frequency_primary_compensation_basis,\n        hourly_frequency_total_base_pay,\n        hourly_frequency_total_salary_and_allowances,\n        last_datefor_which_paid,\n        local_termination_reason,\n        months_continuous_prior_employment,\n        not_returning as is_not_returning,\n        original_hire_date,\n        pay_group_frequency_currency,\n        pay_group_frequency_frequency,\n        pay_group_frequency_primary_compensation_basis,\n        pay_group_frequency_total_base_pay,\n        pay_group_frequency_total_salary_and_allowances,\n        pay_through_date,\n        primary_termination_category,\n        primary_termination_reason,\n        probation_end_date,\n        probation_start_date,\n        reason_reference_id,\n        regrettable_termination as is_regrettable_termination,\n        rehire as is_rehire,\n        resignation_date,\n        retired as is_retired,\n        retirement_date,\n        retirement_eligibility_date,\n        return_unknown as is_return_unknown,\n        seniority_date,\n        severance_date,\n        terminated as is_terminated,\n        termination_date,\n        termination_involuntary as is_termination_involuntary,\n        termination_last_day_of_work,\n        time_off_service_date,\n        universal_id,\n        user_id,\n        vesting_date,\n        worker_code\n    from fields\n    where current_timestamp() between _fivetran_start and _fivetran_end\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization", "resource_type": "model", "package_name": "workday", "path": "staging/stg_workday__organization.sql", "original_file_path": "models/staging/stg_workday__organization.sql", "unique_id": "model.workday.stg_workday__organization", "fqn": ["workday", "staging", "stg_workday__organization"], "alias": "stg_workday__organization", "checksum": {"name": "sha256", "checksum": "ddc0897b633fd79f01412ef8b78788ca8168409bbdd6a076e7ae77eae46e5b4c"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Identifier for the organization.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "availability_date": {"name": "availability_date", "description": "Date when the organization becomes available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_available_for_hire": {"name": "is_available_for_hire", "description": "Flag indicating whether the organization is available for hiring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Code assigned to the organization for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_description": {"name": "organization_description", "description": "The description of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "external_url": {"name": "external_url", "description": "External URL associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hiring_freeze": {"name": "is_hiring_freeze", "description": "Flag indicating whether the organization is under a hiring freeze.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_inactive": {"name": "is_inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive_date": {"name": "inactive_date", "description": "Date when the organization becomes inactive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_include_manager_in_name": {"name": "is_include_manager_in_name", "description": "Flag indicating whether to include the manager in the organization name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_include_organization_code_in_name": {"name": "is_include_organization_code_in_name", "description": "Flag indicating whether to include the organization code in the name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_updated_date_time": {"name": "last_updated_date_time", "description": "Date and time when the organization record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_location": {"name": "organization_location", "description": "The location of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_id": {"name": "manager_id", "description": "Identifier for the manager associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_code": {"name": "organization_code", "description": "Code associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_owner_id": {"name": "organization_owner_id", "description": "Identifier for the owner of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "staffing_model": {"name": "staffing_model", "description": "Staffing model associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_sub_type": {"name": "organization_sub_type", "description": "Subtype or classification of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "superior_organization_id": {"name": "superior_organization_id", "description": "Identifier for the superior organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_availability_date": {"name": "supervisory_position_availability_date", "description": "Availability date for supervisory positions within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_earliest_hire_date": {"name": "supervisory_position_earliest_hire_date", "description": "Earliest hire date for supervisory positions within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_time_type": {"name": "supervisory_position_time_type", "description": "Time type associated with supervisory positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_worker_type": {"name": "supervisory_position_worker_type", "description": "Worker type associated with supervisory positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "top_level_organization_id": {"name": "top_level_organization_id", "description": "Identifier for the top-level organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_type": {"name": "organization_type", "description": "Type or category of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility level of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "workday://models/staging/stg_workday.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457909.4733849, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_workday__organization_base') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_workday__organization_base')),\n                staging_columns=get_organization_columns()\n            )\n        }}\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='workday_union_schemas', \n            union_database_variable='workday_union_databases') \n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        availability_date,\n        available_for_hire as is_available_for_hire,\n        code,\n        description as organization_description,\n        external_url,\n        hiring_freeze as is_hiring_freeze,\n        id as organization_id,\n        inactive as is_inactive,\n        inactive_date,\n        include_manager_in_name as is_include_manager_in_name,\n        include_organization_code_in_name as is_include_organization_code_in_name,\n        last_updated_date_time,\n        location as organization_location,\n        manager_id,\n        name as organization_name,\n        organization_code,\n        organization_owner_id,\n        staffing_model,\n        sub_type as organization_sub_type,\n        superior_organization_id,\n        supervisory_position_availability_date,\n        supervisory_position_earliest_hire_date,\n        supervisory_position_time_type,\n        supervisory_position_worker_type,\n        top_level_organization_id,\n        type as organization_type,\n        visibility\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_workday__organization_base", "package": null, "version": null}, {"name": "stg_workday__organization_base", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.workday.get_organization_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.workday.stg_workday__organization_base"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday__organization.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_base`\n),\n\nfields as (\n\n    select\n        \n    cast(null as BOOLEAN) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    availability_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    available_for_hire\n    \n , \n    cast(null as STRING) as \n    \n    code\n    \n , \n    cast(null as STRING) as \n    \n    description\n    \n , \n    cast(null as STRING) as \n    \n    external_url\n    \n , \n    cast(null as BOOLEAN) as \n    \n    hiring_freeze\n    \n , \n    cast(null as STRING) as \n    \n    id\n    \n , \n    cast(null as BOOLEAN) as \n    \n    inactive\n    \n , \n    cast(null as date) as \n    \n    inactive_date\n    \n , \n    cast(null as BOOLEAN) as \n    \n    include_manager_in_name\n    \n , \n    cast(null as BOOLEAN) as \n    \n    include_organization_code_in_name\n    \n , \n    cast(null as TIMESTAMP) as \n    \n    last_updated_date_time\n    \n , \n    cast(null as STRING) as \n    \n    location\n    \n , \n    cast(null as STRING) as \n    \n    manager_id\n    \n , \n    cast(null as STRING) as \n    \n    name\n    \n , \n    cast(null as STRING) as \n    \n    organization_code\n    \n , \n    cast(null as STRING) as \n    \n    organization_owner_id\n    \n , \n    cast(null as STRING) as \n    \n    staffing_model\n    \n , \n    cast(null as STRING) as \n    \n    sub_type\n    \n , \n    cast(null as STRING) as \n    \n    superior_organization_id\n    \n , \n    cast(null as date) as \n    \n    supervisory_position_availability_date\n    \n , \n    cast(null as date) as \n    \n    supervisory_position_earliest_hire_date\n    \n , \n    cast(null as STRING) as \n    \n    supervisory_position_time_type\n    \n , \n    cast(null as STRING) as \n    \n    supervisory_position_worker_type\n    \n , \n    cast(null as STRING) as \n    \n    top_level_organization_id\n    \n , \n    cast(null as STRING) as \n    \n    type\n    \n , \n    cast(null as STRING) as \n    \n    visibility\n    \n \n\n\n        \n\n\n, cast('' as STRING) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        source_relation,\n        _fivetran_synced,\n        availability_date,\n        available_for_hire as is_available_for_hire,\n        code,\n        description as organization_description,\n        external_url,\n        hiring_freeze as is_hiring_freeze,\n        id as organization_id,\n        inactive as is_inactive,\n        inactive_date,\n        include_manager_in_name as is_include_manager_in_name,\n        include_organization_code_in_name as is_include_organization_code_in_name,\n        last_updated_date_time,\n        location as organization_location,\n        manager_id,\n        name as organization_name,\n        organization_code,\n        organization_owner_id,\n        staffing_model,\n        sub_type as organization_sub_type,\n        superior_organization_id,\n        supervisory_position_availability_date,\n        supervisory_position_earliest_hire_date,\n        supervisory_position_time_type,\n        supervisory_position_worker_type,\n        top_level_organization_id,\n        type as organization_type,\n        visibility\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_job_family_group_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_job_family_group_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__job_family_job_family_group_base.sql", "original_file_path": "models/staging/base/stg_workday__job_family_job_family_group_base.sql", "unique_id": "model.workday.stg_workday__job_family_job_family_group_base", "fqn": ["workday", "staging", "base", "stg_workday__job_family_job_family_group_base"], "alias": "stg_workday__job_family_job_family_group_base", "checksum": {"name": "sha256", "checksum": "e2032528b0352adb9b447a62934a158666a681a00bfd8821c454342850710217"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.236744, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='job_family_job_family_group', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='job_family_job_family_group',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "job_family_job_family_group"], ["workday", "job_family_job_family_group"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.job_family_job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__job_family_job_family_group_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_job_family_group`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__personal_information_ethnicity_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__personal_information_ethnicity_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__personal_information_ethnicity_base.sql", "original_file_path": "models/staging/base/stg_workday__personal_information_ethnicity_base.sql", "unique_id": "model.workday.stg_workday__personal_information_ethnicity_base", "fqn": ["workday", "staging", "base", "stg_workday__personal_information_ethnicity_base"], "alias": "stg_workday__personal_information_ethnicity_base", "checksum": {"name": "sha256", "checksum": "83d4f52d542558f35ac9c4bca924abf5d50bd6d060b57de257d9b3a8011375bc"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.281452, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='personal_information_ethnicity', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='personal_information_ethnicity',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "personal_information_ethnicity"], ["workday", "personal_information_ethnicity"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.personal_information_ethnicity"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__personal_information_ethnicity_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`personal_information_ethnicity`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_group_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_group_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__job_family_group_base.sql", "original_file_path": "models/staging/base/stg_workday__job_family_group_base.sql", "unique_id": "model.workday.stg_workday__job_family_group_base", "fqn": ["workday", "staging", "base", "stg_workday__job_family_group_base"], "alias": "stg_workday__job_family_group_base", "checksum": {"name": "sha256", "checksum": "bea26ff96c14d3e08fd64f97fbc8fbefc3cc6cc6726f7eb27132f966e3ace85d"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.290935, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='job_family_group', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='job_family_group',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "job_family_group"], ["workday", "job_family_group"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__job_family_group_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_group`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_position_organization_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_position_organization_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__worker_position_organization_base.sql", "original_file_path": "models/staging/base/stg_workday__worker_position_organization_base.sql", "unique_id": "model.workday.stg_workday__worker_position_organization_base", "fqn": ["workday", "staging", "base", "stg_workday__worker_position_organization_base"], "alias": "stg_workday__worker_position_organization_base", "checksum": {"name": "sha256", "checksum": "42729b33f262620d892e95707fef1e711b95c66a4df3fb612d1eb73d024a7e38"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.299616, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='worker_position_organization_history', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='worker_position_organization_history',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "worker_position_organization_history"], ["workday", "worker_position_organization_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.worker_position_organization_history"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__worker_position_organization_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`worker_position_organization_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__position_base.sql", "original_file_path": "models/staging/base/stg_workday__position_base.sql", "unique_id": "model.workday.stg_workday__position_base", "fqn": ["workday", "staging", "base", "stg_workday__position_base"], "alias": "stg_workday__position_base", "checksum": {"name": "sha256", "checksum": "4ccfff02ed1a6e0e94868985aa08ad5eaac5c78e608ae24eb36ebeb3da3b1443"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.310397, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='position', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='position',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "position"], ["workday", "position"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.position"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__position_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`position`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__person_contact_email_address_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__person_contact_email_address_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__person_contact_email_address_base.sql", "original_file_path": "models/staging/base/stg_workday__person_contact_email_address_base.sql", "unique_id": "model.workday.stg_workday__person_contact_email_address_base", "fqn": ["workday", "staging", "base", "stg_workday__person_contact_email_address_base"], "alias": "stg_workday__person_contact_email_address_base", "checksum": {"name": "sha256", "checksum": "2bfb4c913c999795db2691f4b3bc115fbae9bbad6e4eb59ad305bc057e7e0e5b"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.319407, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='person_contact_email_address', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='person_contact_email_address',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "person_contact_email_address"], ["workday", "person_contact_email_address"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.person_contact_email_address"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__person_contact_email_address_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`person_contact_email_address`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_job_family_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_job_family_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__organization_job_family_base.sql", "original_file_path": "models/staging/base/stg_workday__organization_job_family_base.sql", "unique_id": "model.workday.stg_workday__organization_job_family_base", "fqn": ["workday", "staging", "base", "stg_workday__organization_job_family_base"], "alias": "stg_workday__organization_job_family_base", "checksum": {"name": "sha256", "checksum": "8a999ebe4367e8c4e6994124834c09f9d1eeb411d6e00353c9995bc0900ee1ea"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.328724, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization_job_family', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='organization_job_family',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "organization_job_family"], ["workday", "organization_job_family"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.organization_job_family"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__organization_job_family_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`organization_job_family`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_job_profile_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_job_profile_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__job_family_job_profile_base.sql", "original_file_path": "models/staging/base/stg_workday__job_family_job_profile_base.sql", "unique_id": "model.workday.stg_workday__job_family_job_profile_base", "fqn": ["workday", "staging", "base", "stg_workday__job_family_job_profile_base"], "alias": "stg_workday__job_family_job_profile_base", "checksum": {"name": "sha256", "checksum": "61149fbd447008acfc11c0cce919a3dcdfc878b1e43f1a904bed99cd0e12e934"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.3379369, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='job_family_job_profile', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='job_family_job_profile',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "job_family_job_profile"], ["workday", "job_family_job_profile"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.job_family_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__job_family_job_profile_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_job_profile`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position_organization_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position_organization_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__position_organization_base.sql", "original_file_path": "models/staging/base/stg_workday__position_organization_base.sql", "unique_id": "model.workday.stg_workday__position_organization_base", "fqn": ["workday", "staging", "base", "stg_workday__position_organization_base"], "alias": "stg_workday__position_organization_base", "checksum": {"name": "sha256", "checksum": "e9e1144f5ba976bda0612b7899e5c418c8f2880a69bb98c7bd61826b438cf705"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.348377, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='position_organization', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='position_organization',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "position_organization"], ["workday", "position_organization"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__position_organization_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`position_organization`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_role_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_role_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__organization_role_base.sql", "original_file_path": "models/staging/base/stg_workday__organization_role_base.sql", "unique_id": "model.workday.stg_workday__organization_role_base", "fqn": ["workday", "staging", "base", "stg_workday__organization_role_base"], "alias": "stg_workday__organization_role_base", "checksum": {"name": "sha256", "checksum": "7da1ae4c5e420c6a429f6082802496377da44449aefb62728c64e31c64923832"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.359376, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization_role', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='organization_role',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "organization_role"], ["workday", "organization_role"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.organization_role"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__organization_role_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`organization_role`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_leave_status_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_leave_status_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__worker_leave_status_base.sql", "original_file_path": "models/staging/base/stg_workday__worker_leave_status_base.sql", "unique_id": "model.workday.stg_workday__worker_leave_status_base", "fqn": ["workday", "staging", "base", "stg_workday__worker_leave_status_base"], "alias": "stg_workday__worker_leave_status_base", "checksum": {"name": "sha256", "checksum": "25de6c8505c09d17787931dd2ad7fb497ee4fcc6ad9c076417ac327d38b2cee5"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.36832, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='worker_leave_status', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='worker_leave_status',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "worker_leave_status"], ["workday", "worker_leave_status"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.worker_leave_status"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__worker_leave_status_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`worker_leave_status`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_family_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_family_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__job_family_base.sql", "original_file_path": "models/staging/base/stg_workday__job_family_base.sql", "unique_id": "model.workday.stg_workday__job_family_base", "fqn": ["workday", "staging", "base", "stg_workday__job_family_base"], "alias": "stg_workday__job_family_base", "checksum": {"name": "sha256", "checksum": "a6d51501e8a9f185408e2c8c963b04ed89e1f87260216f3e994f324119a0f804"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.377909, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='job_family', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='job_family',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "job_family"], ["workday", "job_family"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.job_family"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__job_family_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`job_family`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__job_profile_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__job_profile_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__job_profile_base.sql", "original_file_path": "models/staging/base/stg_workday__job_profile_base.sql", "unique_id": "model.workday.stg_workday__job_profile_base", "fqn": ["workday", "staging", "base", "stg_workday__job_profile_base"], "alias": "stg_workday__job_profile_base", "checksum": {"name": "sha256", "checksum": "ddeb40a89a0b03a8748dae6a224bade7705498441a9f295682bd24ef643fc563"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.387128, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='job_profile', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='job_profile',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "job_profile"], ["workday", "job_profile"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__job_profile_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`job_profile`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__organization_base.sql", "original_file_path": "models/staging/base/stg_workday__organization_base.sql", "unique_id": "model.workday.stg_workday__organization_base", "fqn": ["workday", "staging", "base", "stg_workday__organization_base"], "alias": "stg_workday__organization_base", "checksum": {"name": "sha256", "checksum": "ee0cb72047f2c7760251317c86318a9f46c5a8be9113fcb7d81b269e1b4b4e0c"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.3960161, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='organization',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "organization"], ["workday", "organization"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.organization"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__organization_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`organization`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__organization_role_worker_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__organization_role_worker_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__organization_role_worker_base.sql", "original_file_path": "models/staging/base/stg_workday__organization_role_worker_base.sql", "unique_id": "model.workday.stg_workday__organization_role_worker_base", "fqn": ["workday", "staging", "base", "stg_workday__organization_role_worker_base"], "alias": "stg_workday__organization_role_worker_base", "checksum": {"name": "sha256", "checksum": "74e858892ef8851aec9a06e4e05dbca91361b09939c257c69db38356d59acf05"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.406373, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization_role_worker', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='organization_role_worker',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "organization_role_worker"], ["workday", "organization_role_worker"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.organization_role_worker"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__organization_role_worker_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`organization_role_worker`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__worker_base.sql", "original_file_path": "models/staging/base/stg_workday__worker_base.sql", "unique_id": "model.workday.stg_workday__worker_base", "fqn": ["workday", "staging", "base", "stg_workday__worker_base"], "alias": "stg_workday__worker_base", "checksum": {"name": "sha256", "checksum": "5f0f82a654f8f22d1e129cebdf87aa064125f5deeeca51c50d53f249dd0d96e1"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.415187, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='worker_history', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='worker_history',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "worker_history"], ["workday", "worker_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.worker_history"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__worker_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`worker_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__position_job_profile_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__position_job_profile_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__position_job_profile_base.sql", "original_file_path": "models/staging/base/stg_workday__position_job_profile_base.sql", "unique_id": "model.workday.stg_workday__position_job_profile_base", "fqn": ["workday", "staging", "base", "stg_workday__position_job_profile_base"], "alias": "stg_workday__position_job_profile_base", "checksum": {"name": "sha256", "checksum": "7a2843eac9ceff71866501a413274121b15a2e8d1337b83962e0045cb1b403c5"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.428263, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='position_job_profile', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='position_job_profile',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "position_job_profile"], ["workday", "position_job_profile"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.position_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__position_job_profile_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`position_job_profile`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__worker_position_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__worker_position_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__worker_position_base.sql", "original_file_path": "models/staging/base/stg_workday__worker_position_base.sql", "unique_id": "model.workday.stg_workday__worker_position_base", "fqn": ["workday", "staging", "base", "stg_workday__worker_position_base"], "alias": "stg_workday__worker_position_base", "checksum": {"name": "sha256", "checksum": "8a8431d94738ad8c342bba23f86ace1e658cf63ac9254481bf8463622129514e"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.4424791, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='worker_position_history', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='worker_position_history',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "worker_position_history"], ["workday", "worker_position_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.worker_position_history"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__worker_position_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`worker_position_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__person_name_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__person_name_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__person_name_base.sql", "original_file_path": "models/staging/base/stg_workday__person_name_base.sql", "unique_id": "model.workday.stg_workday__person_name_base", "fqn": ["workday", "staging", "base", "stg_workday__person_name_base"], "alias": "stg_workday__person_name_base", "checksum": {"name": "sha256", "checksum": "85c57cfa1fe54db08605b75e32060e1bd488a4f71eae27b2cb8a2805ac4ac655"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.453226, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='person_name', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='person_name',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "person_name"], ["workday", "person_name"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.person_name"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__person_name_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`person_name`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__military_service_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__military_service_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__military_service_base.sql", "original_file_path": "models/staging/base/stg_workday__military_service_base.sql", "unique_id": "model.workday.stg_workday__military_service_base", "fqn": ["workday", "staging", "base", "stg_workday__military_service_base"], "alias": "stg_workday__military_service_base", "checksum": {"name": "sha256", "checksum": "9478cb8eea5671a0261ed280e3723a9ad826ee22b77b9dfe709be5fc85fd295e"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.465496, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='military_service', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='military_service',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "military_service"], ["workday", "military_service"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.military_service"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__military_service_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`military_service`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.stg_workday__personal_information_base": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_stg_workday", "name": "stg_workday__personal_information_base", "resource_type": "model", "package_name": "workday", "path": "staging/base/stg_workday__personal_information_base.sql", "original_file_path": "models/staging/base/stg_workday__personal_information_base.sql", "unique_id": "model.workday.stg_workday__personal_information_base", "fqn": ["workday", "staging", "base", "stg_workday__personal_information_base"], "alias": "stg_workday__personal_information_base", "checksum": {"name": "sha256", "checksum": "0767af75bcb79f32dd324d8bf4e57ffc0d0014bda0609b426df78cdc17566e96"}, "config": {"enabled": true, "alias": null, "schema": "stg_workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_workday", "materialized": "view"}, "created_at": 1708457908.476165, "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_base`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='personal_information_history', \n        database_variable='workday_database', \n        schema_variable='workday_schema', \n        default_database=target.database,\n        default_schema='workday',\n        default_variable='personal_information_history',\n        union_schema_variable='workday_union_schemas',\n        union_database_variable='workday_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["workday", "personal_information_history"], ["workday", "personal_information_history"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.workday.workday.personal_information_history"]}, "compiled_path": "target/compiled/workday/models/staging/base/stg_workday__personal_information_base.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n         \n            \n        select * \n    from `singular-vector-135519`.`erin_workday_hcm_ga`.`personal_information_history`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.int_workday__worker_position_enriched": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "int_workday__worker_position_enriched", "resource_type": "model", "package_name": "workday", "path": "intermediate/int_workday__worker_position_enriched.sql", "original_file_path": "models/intermediate/int_workday__worker_position_enriched.sql", "unique_id": "model.workday.int_workday__worker_position_enriched", "fqn": ["workday", "intermediate", "int_workday__worker_position_enriched"], "alias": "int_workday__worker_position_enriched", "checksum": {"name": "sha256", "checksum": "e1edfa413e2b14d1d10b647f624db287bca53f0177c1621dbb48f8b259b9016f"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "ephemeral"}, "created_at": 1708457908.487882, "relation_name": null, "raw_code": "with worker_position_data as (\n\n    select \n        *,\n        {{ dbt.current_timestamp() }} as current_date\n    from {{ ref('stg_workday__worker_position') }}\n),\n\nworker_position_data_enhanced as (\n\n    select \n        worker_id,\n        source_relation,\n        position_id,\n        employee_type, \n        business_title,\n        fte_percent,\n        position_start_date,\n        position_end_date,\n        position_effective_date,\n        position_location,\n        management_level_code,\n        job_profile_id,\n        case when position_end_date is null\n            then {{ dbt.datediff('position_start_date', 'current_date', 'day') }}\n            else {{ dbt.datediff('position_start_date', 'position_end_date', 'day') }}\n        end as days_at_position,\n        row_number() over (partition by worker_id order by position_end_date desc) as row_number\n    from worker_position_data\n),\n\nworker_position_measures as (\n\n    select \n        worker_id,\n        source_relation,\n        count(distinct position_id) as worker_positions,\n        count(distinct management_level_code) as worker_levels,\n        sum(days_at_position) as position_days\n    from worker_position_data_enhanced\n    group by 1, 2\n),\n\nmost_recent_position as (\n\n    select *\n    from worker_position_data_enhanced\n    where row_number = 1\n),\n\nworker_position_enriched as (\n\n    select\n        most_recent_position.worker_id,\n        most_recent_position.source_relation,\n        most_recent_position.position_id, \n        most_recent_position.business_title,\n        most_recent_position.job_profile_id, \n        most_recent_position.employee_type as most_recent_position_type,\n        most_recent_position.position_location as most_recent_location,\n        most_recent_position.management_level_code as most_recent_level,\n        most_recent_position.fte_percent,\n        most_recent_position.days_at_position,\n        most_recent_position.position_start_date as most_recent_position_start_date,\n        most_recent_position.position_end_date as most_recent_position_end_date,\n        most_recent_position.position_effective_date as most_recent_position_effective_date,\n        worker_position_measures.worker_positions,\n        worker_position_measures.worker_levels, \n        worker_position_measures.position_days\n    from most_recent_position\n    left join worker_position_measures \n        on most_recent_position.worker_id = worker_position_measures.worker_id\n        and most_recent_position.source_relation = worker_position_measures.source_relation\n)\n\nselect * \nfrom worker_position_enriched", "language": "sql", "refs": [{"name": "stg_workday__worker_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": ["model.workday.stg_workday__worker_position"]}, "compiled_path": "target/compiled/workday/models/intermediate/int_workday__worker_position_enriched.sql", "compiled": true, "compiled_code": "with worker_position_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\n),\n\nworker_position_data_enhanced as (\n\n    select \n        worker_id,\n        source_relation,\n        position_id,\n        employee_type, \n        business_title,\n        fte_percent,\n        position_start_date,\n        position_end_date,\n        position_effective_date,\n        position_location,\n        management_level_code,\n        job_profile_id,\n        case when position_end_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(position_end_date as datetime),\n        cast(position_start_date as datetime),\n        day\n    )\n\n  \n        end as days_at_position,\n        row_number() over (partition by worker_id order by position_end_date desc) as row_number\n    from worker_position_data\n),\n\nworker_position_measures as (\n\n    select \n        worker_id,\n        source_relation,\n        count(distinct position_id) as worker_positions,\n        count(distinct management_level_code) as worker_levels,\n        sum(days_at_position) as position_days\n    from worker_position_data_enhanced\n    group by 1, 2\n),\n\nmost_recent_position as (\n\n    select *\n    from worker_position_data_enhanced\n    where row_number = 1\n),\n\nworker_position_enriched as (\n\n    select\n        most_recent_position.worker_id,\n        most_recent_position.source_relation,\n        most_recent_position.position_id, \n        most_recent_position.business_title,\n        most_recent_position.job_profile_id, \n        most_recent_position.employee_type as most_recent_position_type,\n        most_recent_position.position_location as most_recent_location,\n        most_recent_position.management_level_code as most_recent_level,\n        most_recent_position.fte_percent,\n        most_recent_position.days_at_position,\n        most_recent_position.position_start_date as most_recent_position_start_date,\n        most_recent_position.position_end_date as most_recent_position_end_date,\n        most_recent_position.position_effective_date as most_recent_position_effective_date,\n        worker_position_measures.worker_positions,\n        worker_position_measures.worker_levels, \n        worker_position_measures.position_days\n    from most_recent_position\n    left join worker_position_measures \n        on most_recent_position.worker_id = worker_position_measures.worker_id\n        and most_recent_position.source_relation = worker_position_measures.source_relation\n)\n\nselect * \nfrom worker_position_enriched", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.int_workday__personal_details": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "int_workday__personal_details", "resource_type": "model", "package_name": "workday", "path": "intermediate/int_workday__personal_details.sql", "original_file_path": "models/intermediate/int_workday__personal_details.sql", "unique_id": "model.workday.int_workday__personal_details", "fqn": ["workday", "intermediate", "int_workday__personal_details"], "alias": "int_workday__personal_details", "checksum": {"name": "sha256", "checksum": "594516db9541d923dcc1958d6ed5747fb91aee48aaa01e0acf8fcbd2fb1a8950"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "ephemeral"}, "created_at": 1708457908.505614, "relation_name": null, "raw_code": "with worker_personal_info_data as(\n\n    select \n        worker_id, \n        source_relation,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino\n    from {{ ref('stg_workday__personal_information') }}\n),\n\nworker_name as (\n\n    select \n        worker_id, \n        source_relation,\n        first_name,\n        last_name\n    from {{ ref('stg_workday__person_name') }}\n    where lower(person_name_type) = 'preferred'\n),\n\nworker_email as(\n\n    select \n        worker_id,\n        source_relation,\n        email_address\n    from {{ ref('stg_workday__person_contact_email_address') }}\n    where lower(email_code) like '%work_primary%'\n),\n\nworker_ethnicity as (\n\n    select \n        worker_id,\n        source_relation,\n        {{ fivetran_utils.string_agg('distinct ethnicity_code', \"', '\" ) }} as ethnicity_codes\n    from {{ ref('stg_workday__personal_information_ethnicity') }}\n    group by 1, 2\n),\n\nworker_military as (\n\n    select \n        worker_id,\n        source_relation,\n        true as is_military_service,\n        military_status \n    from {{ ref('stg_workday__military_service') }}\n),\n\nworker_personal_details as (\n\n    select \n        worker_personal_info_data.*,\n        worker_name.first_name,\n        worker_name.last_name,\n        worker_email.email_address,\n        worker_ethnicity.ethnicity_codes,\n        worker_military.military_status\n    from worker_personal_info_data\n    left join worker_name \n        on worker_personal_info_data.worker_id = worker_name.worker_id\n        and worker_personal_info_data.source_relation = worker_name.source_relation\n    left join worker_email \n        on worker_personal_info_data.worker_id = worker_email.worker_id\n        and worker_personal_info_data.source_relation = worker_email.source_relation\n    left join worker_ethnicity \n        on worker_personal_info_data.worker_id = worker_ethnicity.worker_id\n        and worker_personal_info_data.source_relation = worker_ethnicity.source_relation\n    left join worker_military\n        on worker_personal_info_data.worker_id = worker_military.worker_id\n        and worker_personal_info_data.source_relation = worker_military.source_relation\n)\n\nselect * \nfrom worker_personal_details", "language": "sql", "refs": [{"name": "stg_workday__personal_information", "package": null, "version": null}, {"name": "stg_workday__person_name", "package": null, "version": null}, {"name": "stg_workday__person_contact_email_address", "package": null, "version": null}, {"name": "stg_workday__personal_information_ethnicity", "package": null, "version": null}, {"name": "stg_workday__military_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.workday.stg_workday__personal_information", "model.workday.stg_workday__person_name", "model.workday.stg_workday__person_contact_email_address", "model.workday.stg_workday__personal_information_ethnicity", "model.workday.stg_workday__military_service"]}, "compiled_path": "target/compiled/workday/models/intermediate/int_workday__personal_details.sql", "compiled": true, "compiled_code": "with worker_personal_info_data as(\n\n    select \n        worker_id, \n        source_relation,\n        date_of_birth,\n        gender,\n        is_hispanic_or_latino\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`\n),\n\nworker_name as (\n\n    select \n        worker_id, \n        source_relation,\n        first_name,\n        last_name\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\n    where lower(person_name_type) = 'preferred'\n),\n\nworker_email as(\n\n    select \n        worker_id,\n        source_relation,\n        email_address\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\n    where lower(email_code) like '%work_primary%'\n),\n\nworker_ethnicity as (\n\n    select \n        worker_id,\n        source_relation,\n        \n    string_agg(distinct ethnicity_code, ', ')\n\n as ethnicity_codes\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\n    group by 1, 2\n),\n\nworker_military as (\n\n    select \n        worker_id,\n        source_relation,\n        true as is_military_service,\n        military_status \n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`\n),\n\nworker_personal_details as (\n\n    select \n        worker_personal_info_data.*,\n        worker_name.first_name,\n        worker_name.last_name,\n        worker_email.email_address,\n        worker_ethnicity.ethnicity_codes,\n        worker_military.military_status\n    from worker_personal_info_data\n    left join worker_name \n        on worker_personal_info_data.worker_id = worker_name.worker_id\n        and worker_personal_info_data.source_relation = worker_name.source_relation\n    left join worker_email \n        on worker_personal_info_data.worker_id = worker_email.worker_id\n        and worker_personal_info_data.source_relation = worker_email.source_relation\n    left join worker_ethnicity \n        on worker_personal_info_data.worker_id = worker_ethnicity.worker_id\n        and worker_personal_info_data.source_relation = worker_ethnicity.source_relation\n    left join worker_military\n        on worker_personal_info_data.worker_id = worker_military.worker_id\n        and worker_personal_info_data.source_relation = worker_military.source_relation\n)\n\nselect * \nfrom worker_personal_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.workday.int_workday__worker_details": {"database": "dbt-package-testing", "schema": "zz_dbt_renee_workday", "name": "int_workday__worker_details", "resource_type": "model", "package_name": "workday", "path": "intermediate/int_workday__worker_details.sql", "original_file_path": "models/intermediate/int_workday__worker_details.sql", "unique_id": "model.workday.int_workday__worker_details", "fqn": ["workday", "intermediate", "int_workday__worker_details"], "alias": "int_workday__worker_details", "checksum": {"name": "sha256", "checksum": "98594d1ac2b7a464df705e177c7c849fd4b4514e9ecee135ba1fc1cb20c78a15"}, "config": {"enabled": true, "alias": null, "schema": "workday", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "workday", "materialized": "ephemeral"}, "created_at": 1708457908.5171032, "relation_name": null, "raw_code": "with worker_data as (\n\n    select \n        *,\n        {{ dbt.current_timestamp() }} as current_date\n    from {{ ref('stg_workday__worker') }}\n),\n\nworker_details as (\n\n    select \n        worker_id,\n        source_relation,\n        worker_code,\n        user_id,\n        universal_id,\n        case when is_active then true else false end as is_user_active,\n        case when hire_date <= current_date\n            and (termination_date is null or termination_date > current_date)\n            then true \n            else false \n        end as is_employed,\n        hire_date,\n        case when termination_date > current_date then null\n            else termination_date \n        end as departure_date,    \n        case when termination_date is null\n            then {{ dbt.datediff('hire_date', 'current_date', 'day') }}\n            else {{ dbt.datediff('hire_date', 'termination_date', 'day') }}\n        end as days_of_employment,\n        is_terminated,\n        primary_termination_category,\n        primary_termination_reason,\n        case\n            when is_terminated and is_regrettable_termination then true\n            when is_terminated and not is_regrettable_termination then false\n            else null\n        end as is_regrettable_termination, \n        compensation_effective_date,\n        employee_compensation_frequency,\n        annual_currency_summary_currency,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_primary_compensation_basis,\n        annual_summary_currency,\n        annual_summary_total_base_pay,\n        annual_summary_primary_compensation_basis,\n        compensation_grade_id,\n        compensation_grade_profile_id\n    from worker_data\n)\n\nselect * \nfrom worker_details", "language": "sql", "refs": [{"name": "stg_workday__worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.datediff"], "nodes": ["model.workday.stg_workday__worker"]}, "compiled_path": "target/compiled/workday/models/intermediate/int_workday__worker_details.sql", "compiled": true, "compiled_code": "with worker_data as (\n\n    select \n        *,\n        current_timestamp() as current_date\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`\n),\n\nworker_details as (\n\n    select \n        worker_id,\n        source_relation,\n        worker_code,\n        user_id,\n        universal_id,\n        case when is_active then true else false end as is_user_active,\n        case when hire_date <= current_date\n            and (termination_date is null or termination_date > current_date)\n            then true \n            else false \n        end as is_employed,\n        hire_date,\n        case when termination_date > current_date then null\n            else termination_date \n        end as departure_date,    \n        case when termination_date is null\n            then \n\n    datetime_diff(\n        cast(current_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n            else \n\n    datetime_diff(\n        cast(termination_date as datetime),\n        cast(hire_date as datetime),\n        day\n    )\n\n  \n        end as days_of_employment,\n        is_terminated,\n        primary_termination_category,\n        primary_termination_reason,\n        case\n            when is_terminated and is_regrettable_termination then true\n            when is_terminated and not is_regrettable_termination then false\n            else null\n        end as is_regrettable_termination, \n        compensation_effective_date,\n        employee_compensation_frequency,\n        annual_currency_summary_currency,\n        annual_currency_summary_total_base_pay,\n        annual_currency_summary_primary_compensation_basis,\n        annual_summary_currency,\n        annual_summary_total_base_pay,\n        annual_summary_primary_compensation_basis,\n        compensation_grade_id,\n        compensation_grade_profile_id\n    from worker_data\n)\n\nselect * \nfrom worker_details", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.my_new_project.unique_my_first_dbt_model_id.16e066b321": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_my_first_dbt_model_id", "resource_type": "test", "package_name": "my_new_project", "path": "unique_my_first_dbt_model_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.my_new_project.unique_my_first_dbt_model_id.16e066b321", "fqn": ["my_new_project", "example", "unique_my_first_dbt_model_id"], "alias": "unique_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.148959, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "compiled_path": "target/compiled/my_new_project/models/example/schema.yml/unique_my_first_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.my_first_dbt_model", "attached_node": "model.my_new_project.my_first_dbt_model"}, "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_my_first_dbt_model_id", "resource_type": "test", "package_name": "my_new_project", "path": "not_null_my_first_dbt_model_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710", "fqn": ["my_new_project", "example", "not_null_my_first_dbt_model_id"], "alias": "not_null_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.152095, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_first_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "compiled_path": "target/compiled/my_new_project/models/example/schema.yml/not_null_my_first_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.my_first_dbt_model", "attached_node": "model.my_new_project.my_first_dbt_model"}, "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "unique_my_second_dbt_model_id", "resource_type": "test", "package_name": "my_new_project", "path": "unique_my_second_dbt_model_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493", "fqn": ["my_new_project", "example", "unique_my_second_dbt_model_id"], "alias": "unique_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.154706, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_second_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.my_new_project.my_second_dbt_model"]}, "compiled_path": "target/compiled/my_new_project/models/example/schema.yml/unique_my_second_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.my_second_dbt_model", "attached_node": "model.my_new_project.my_second_dbt_model"}, "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_my_second_dbt_model_id", "resource_type": "test", "package_name": "my_new_project", "path": "not_null_my_second_dbt_model_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778", "fqn": ["my_new_project", "example", "not_null_my_second_dbt_model_id"], "alias": "not_null_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.1574779, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "my_second_dbt_model", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.my_new_project.my_second_dbt_model"]}, "compiled_path": "target/compiled/my_new_project/models/example/schema.yml/not_null_my_second_dbt_model_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.my_second_dbt_model", "attached_node": "model.my_new_project.my_second_dbt_model"}, "test.workday.not_null_workday__employee_overview_worker_id.a9f1737e97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('workday__employee_overview')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_workday__employee_overview_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_workday__employee_overview_worker_id.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.not_null_workday__employee_overview_worker_id.a9f1737e97", "fqn": ["workday", "not_null_workday__employee_overview_worker_id"], "alias": "not_null_workday__employee_overview_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.223608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "workday__employee_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__employee_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/not_null_workday__employee_overview_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__employee_overview`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.workday__employee_overview", "attached_node": "model.workday.workday__employee_overview"}, "test.workday.dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id.fc3f0049e6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id"], "model": "{{ get_where_subquery(ref('workday__employee_overview')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id.fc3f0049e6", "fqn": ["workday", "dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id"], "alias": "dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5"}, "created_at": 1708457909.226887, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5\") }}", "language": "sql", "refs": [{"name": "workday__employee_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__employee_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/dbt_utils_unique_combination_o_baebab87b66bee8f30aae44954be92b5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__employee_overview`\n    group by source_relation, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.workday__employee_overview", "attached_node": "model.workday.workday__employee_overview"}, "test.workday.not_null_workday__job_overview_job_profile_id.dc998c6857": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_profile_id", "model": "{{ get_where_subquery(ref('workday__job_overview')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_workday__job_overview_job_profile_id", "resource_type": "test", "package_name": "workday", "path": "not_null_workday__job_overview_job_profile_id.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.not_null_workday__job_overview_job_profile_id.dc998c6857", "fqn": ["workday", "not_null_workday__job_overview_job_profile_id"], "alias": "not_null_workday__job_overview_job_profile_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.2435882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "workday__job_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__job_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/not_null_workday__job_overview_job_profile_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_profile_id\nfrom `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__job_overview`\nwhere job_profile_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_profile_id", "file_key_name": "models.workday__job_overview", "attached_node": "model.workday.workday__job_overview"}, "test.workday.dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id.4c0858721c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_profile_id"], "model": "{{ get_where_subquery(ref('workday__job_overview')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id.4c0858721c", "fqn": ["workday", "dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id"], "alias": "dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656"}, "created_at": 1708457909.2460108, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656\") }}", "language": "sql", "refs": [{"name": "workday__job_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__job_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/dbt_utils_unique_combination_o_fd1fd88d13da04a4a93c7c9712fde656.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_profile_id\n    from `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__job_overview`\n    group by source_relation, job_profile_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.workday__job_overview", "attached_node": "model.workday.workday__job_overview"}, "test.workday.not_null_workday__position_overview_position_id.603beb3f22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('workday__position_overview')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_workday__position_overview_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_workday__position_overview_position_id.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.not_null_workday__position_overview_position_id.603beb3f22", "fqn": ["workday", "not_null_workday__position_overview_position_id"], "alias": "not_null_workday__position_overview_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.252526, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "workday__position_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__position_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/not_null_workday__position_overview_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__position_overview`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.workday__position_overview", "attached_node": "model.workday.workday__position_overview"}, "test.workday.dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id.ab5c35f587": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "position_id"], "model": "{{ get_where_subquery(ref('workday__position_overview')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id.ab5c35f587", "fqn": ["workday", "dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id"], "alias": "dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e"}, "created_at": 1708457909.255162, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e\") }}", "language": "sql", "refs": [{"name": "workday__position_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__position_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/dbt_utils_unique_combination_o_19d7304dc170fd11d99d58fa0666294e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, position_id\n    from `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__position_overview`\n    group by source_relation, position_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.workday__position_overview", "attached_node": "model.workday.workday__position_overview"}, "test.workday.not_null_workday__organization_overview_organization_id.5b1070ba31": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('workday__organization_overview')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_workday__organization_overview_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_workday__organization_overview_organization_id.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.not_null_workday__organization_overview_organization_id.5b1070ba31", "fqn": ["workday", "not_null_workday__organization_overview_organization_id"], "alias": "not_null_workday__organization_overview_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.2611682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "workday__organization_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__organization_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/not_null_workday__organization_overview_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__organization_overview`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.workday__organization_overview", "attached_node": "model.workday.workday__organization_overview"}, "test.workday.not_null_workday__organization_overview_organization_role_id.a909dac412": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_role_id", "model": "{{ get_where_subquery(ref('workday__organization_overview')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_workday__organization_overview_organization_role_id", "resource_type": "test", "package_name": "workday", "path": "not_null_workday__organization_overview_organization_role_id.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.not_null_workday__organization_overview_organization_role_id.a909dac412", "fqn": ["workday", "not_null_workday__organization_overview_organization_role_id"], "alias": "not_null_workday__organization_overview_organization_role_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.263592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "workday__organization_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__organization_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/not_null_workday__organization_overview_organization_role_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_role_id\nfrom `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__organization_overview`\nwhere organization_role_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_role_id", "file_key_name": "models.workday__organization_overview", "attached_node": "model.workday.workday__organization_overview"}, "test.workday.dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id.75cff5f3e5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "organization_id", "organization_role_id", "position_id", "worker_id"], "model": "{{ get_where_subquery(ref('workday__organization_overview')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1.sql", "original_file_path": "models/workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id.75cff5f3e5", "fqn": ["workday", "dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id"], "alias": "dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1"}, "created_at": 1708457909.266795, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1\") }}", "language": "sql", "refs": [{"name": "workday__organization_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.workday__organization_overview"]}, "compiled_path": "target/compiled/workday/models/workday.yml/dbt_utils_unique_combination_o_6a1676b7f7536fc12e49d925c29c69f1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, organization_id, organization_role_id, position_id, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_workday`.`workday__organization_overview`\n    group by source_relation, organization_id, organization_role_id, position_id, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.workday__organization_overview", "attached_node": "model.workday.workday__organization_overview"}, "test.workday.not_null_stg_workday__job_profile_job_profile_id.1166250eaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_profile_id", "model": "{{ get_where_subquery(ref('stg_workday__job_profile')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_profile_job_profile_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_profile_job_profile_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_profile_job_profile_id.1166250eaa", "fqn": ["workday", "staging", "not_null_stg_workday__job_profile_job_profile_id"], "alias": "not_null_stg_workday__job_profile_job_profile_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.514422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_profile_job_profile_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_profile_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile`\nwhere job_profile_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_profile_id", "file_key_name": "models.stg_workday__job_profile", "attached_node": "model.workday.stg_workday__job_profile"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id.cf214684ed": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_profile_id"], "model": "{{ get_where_subquery(ref('stg_workday__job_profile')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id.cf214684ed", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id"], "alias": "dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1"}, "created_at": 1708457909.517333, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_e3c849c2fc4ab71ebeb8387d01d386b1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_profile_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_profile`\n    group by source_relation, job_profile_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__job_profile", "attached_node": "model.workday.stg_workday__job_profile"}, "test.workday.not_null_stg_workday__job_family_job_profile_job_family_id.f5bbfef4e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_profile')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_job_profile_job_family_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_family_job_profile_job_family_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_job_profile_job_family_id.f5bbfef4e8", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_job_profile_job_family_id"], "alias": "not_null_stg_workday__job_family_job_profile_job_family_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.524418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_family_job_profile_job_family_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile`\nwhere job_family_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_id", "file_key_name": "models.stg_workday__job_family_job_profile", "attached_node": "model.workday.stg_workday__job_family_job_profile"}, "test.workday.not_null_stg_workday__job_family_job_profile_job_profile_id.c7a636316c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_profile_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_profile')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_job_profile_job_profile_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_family_job_profile_job_profile_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_job_profile_job_profile_id.c7a636316c", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_job_profile_job_profile_id"], "alias": "not_null_stg_workday__job_family_job_profile_job_profile_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.5272908, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_family_job_profile_job_profile_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_profile_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile`\nwhere job_profile_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_profile_id", "file_key_name": "models.stg_workday__job_family_job_profile", "attached_node": "model.workday.stg_workday__job_family_job_profile"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id.fed96122e7": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_family_id", "job_profile_id"], "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_profile')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id.fed96122e7", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id"], "alias": "dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378"}, "created_at": 1708457909.529933, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_687e466c168eb554e7505109993ad378.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_family_id, job_profile_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_profile`\n    group by source_relation, job_family_id, job_profile_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__job_family_job_profile", "attached_node": "model.workday.stg_workday__job_family_job_profile"}, "test.workday.not_null_stg_workday__job_family_job_family_id.0dbfcdcd3f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_job_family_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_family_job_family_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_job_family_id.0dbfcdcd3f", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_job_family_id"], "alias": "not_null_stg_workday__job_family_job_family_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.535962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_family", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_family_job_family_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family`\nwhere job_family_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_id", "file_key_name": "models.stg_workday__job_family", "attached_node": "model.workday.stg_workday__job_family"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id.9678e90d0e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_family_id"], "model": "{{ get_where_subquery(ref('stg_workday__job_family')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id.9678e90d0e", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id"], "alias": "dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd"}, "created_at": 1708457909.5388749, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_family", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_8c4bbdfb0e3b262b877b3ee051a456cd.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_family_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family`\n    group by source_relation, job_family_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__job_family", "attached_node": "model.workday.stg_workday__job_family"}, "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_id.589a75cf0b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_family_group')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_job_family_group_job_family_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_family_job_family_group_job_family_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_id.589a75cf0b", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_job_family_group_job_family_id"], "alias": "not_null_stg_workday__job_family_job_family_group_job_family_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.544511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_family_job_family_group_job_family_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group`\nwhere job_family_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_id", "file_key_name": "models.stg_workday__job_family_job_family_group", "attached_node": "model.workday.stg_workday__job_family_job_family_group"}, "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_group_id.f105a73bde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_group_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_family_group')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_job_family_group_job_family_group_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_group_id.f105a73bde", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_job_family_group_job_family_group_id"], "alias": "not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af"}, "created_at": 1708457909.547335, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_fami_c0a4daa8ee8fbab4cd5d40cfe44484af.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_group_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group`\nwhere job_family_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_group_id", "file_key_name": "models.stg_workday__job_family_job_family_group", "attached_node": "model.workday.stg_workday__job_family_job_family_group"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id.b4f7618b5a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_family_id", "job_family_group_id"], "model": "{{ get_where_subquery(ref('stg_workday__job_family_job_family_group')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id.b4f7618b5a", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id"], "alias": "dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4"}, "created_at": 1708457909.549789, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_abd343132a10cb21fdac5aa2f7f027f4.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_family_id, job_family_group_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_job_family_group`\n    group by source_relation, job_family_id, job_family_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__job_family_job_family_group", "attached_node": "model.workday.stg_workday__job_family_job_family_group"}, "test.workday.not_null_stg_workday__job_family_group_job_family_group_id.e25ebb9009": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_group_id", "model": "{{ get_where_subquery(ref('stg_workday__job_family_group')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__job_family_group_job_family_group_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__job_family_group_job_family_group_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__job_family_group_job_family_group_id.e25ebb9009", "fqn": ["workday", "staging", "not_null_stg_workday__job_family_group_job_family_group_id"], "alias": "not_null_stg_workday__job_family_group_job_family_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.5565472, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__job_family_group_job_family_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_group_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group`\nwhere job_family_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_group_id", "file_key_name": "models.stg_workday__job_family_group", "attached_node": "model.workday.stg_workday__job_family_group"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id.c9dcd0e168": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_family_group_id"], "model": "{{ get_where_subquery(ref('stg_workday__job_family_group')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id.c9dcd0e168", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id"], "alias": "dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5"}, "created_at": 1708457909.559165, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5\") }}", "language": "sql", "refs": [{"name": "stg_workday__job_family_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__job_family_group"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_0d5a68eb7f7a6eca3c69f9765e8245e5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_family_group_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__job_family_group`\n    group by source_relation, job_family_group_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__job_family_group", "attached_node": "model.workday.stg_workday__job_family_group"}, "test.workday.not_null_stg_workday__organization_role_organization_id.917651c7a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_role')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_role_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_role_organization_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_role_organization_id.917651c7a7", "fqn": ["workday", "staging", "not_null_stg_workday__organization_role_organization_id"], "alias": "not_null_stg_workday__organization_role_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.565061, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_role_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__organization_role", "attached_node": "model.workday.stg_workday__organization_role"}, "test.workday.not_null_stg_workday__organization_role_organization_role_id.2ea32fe93f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_role_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_role')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_role_organization_role_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_role_organization_role_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_role_organization_role_id.2ea32fe93f", "fqn": ["workday", "staging", "not_null_stg_workday__organization_role_organization_role_id"], "alias": "not_null_stg_workday__organization_role_organization_role_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.567747, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_role_organization_role_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_role_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role`\nwhere organization_role_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_role_id", "file_key_name": "models.stg_workday__organization_role", "attached_node": "model.workday.stg_workday__organization_role"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id.4d7bc3feaf": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "organization_id", "organization_role_id"], "model": "{{ get_where_subquery(ref('stg_workday__organization_role')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id.4d7bc3feaf", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id"], "alias": "dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908"}, "created_at": 1708457909.571003, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908\") }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_59895b9f0fc91ae384647edc8727b908.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, organization_id, organization_role_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role`\n    group by source_relation, organization_id, organization_role_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__organization_role", "attached_node": "model.workday.stg_workday__organization_role"}, "test.workday.not_null_stg_workday__organization_role_worker_organization_worker_code.ddc8d566ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_worker_code", "model": "{{ get_where_subquery(ref('stg_workday__organization_role_worker')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_role_worker_organization_worker_code", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_role_worker_organization_worker_code.ddc8d566ca", "fqn": ["workday", "staging", "not_null_stg_workday__organization_role_worker_organization_worker_code"], "alias": "not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda"}, "created_at": 1708457909.5778172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda\") }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role_worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role_worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organiza_0783852f549eb5adccc96839860dacda.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_worker_code\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker`\nwhere organization_worker_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_worker_code", "file_key_name": "models.stg_workday__organization_role_worker", "attached_node": "model.workday.stg_workday__organization_role_worker"}, "test.workday.not_null_stg_workday__organization_role_worker_organization_id.b98960b9f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_role_worker')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_role_worker_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_role_worker_organization_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_role_worker_organization_id.b98960b9f5", "fqn": ["workday", "staging", "not_null_stg_workday__organization_role_worker_organization_id"], "alias": "not_null_stg_workday__organization_role_worker_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.580362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role_worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role_worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_role_worker_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__organization_role_worker", "attached_node": "model.workday.stg_workday__organization_role_worker"}, "test.workday.not_null_stg_workday__organization_role_worker_role_id.1703a44b72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "role_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_role_worker')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_role_worker_role_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_role_worker_role_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_role_worker_role_id.1703a44b72", "fqn": ["workday", "staging", "not_null_stg_workday__organization_role_worker_role_id"], "alias": "not_null_stg_workday__organization_role_worker_role_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.5829709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role_worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role_worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_role_worker_role_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect role_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker`\nwhere role_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "role_id", "file_key_name": "models.stg_workday__organization_role_worker", "attached_node": "model.workday.stg_workday__organization_role_worker"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id.e5d078d6c4": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "organization_worker_code", "organization_id", "role_id"], "model": "{{ get_where_subquery(ref('stg_workday__organization_role_worker')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id.e5d078d6c4", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id"], "alias": "dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a"}, "created_at": 1708457909.585461, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a\") }}", "language": "sql", "refs": [{"name": "stg_workday__organization_role_worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_role_worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_6e794cc0ac3401d5d54e8752f043a72a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, organization_worker_code, organization_id, role_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_role_worker`\n    group by source_relation, organization_worker_code, organization_id, role_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__organization_role_worker", "attached_node": "model.workday.stg_workday__organization_role_worker"}, "test.workday.not_null_stg_workday__organization_job_family_job_family_id.a2ab2ad617": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_family_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_job_family')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_job_family_job_family_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_job_family_job_family_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_job_family_job_family_id.a2ab2ad617", "fqn": ["workday", "staging", "not_null_stg_workday__organization_job_family_job_family_id"], "alias": "not_null_stg_workday__organization_job_family_job_family_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.5930722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_job_family", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_job_family"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_job_family_job_family_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_family_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family`\nwhere job_family_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_family_id", "file_key_name": "models.stg_workday__organization_job_family", "attached_node": "model.workday.stg_workday__organization_job_family"}, "test.workday.not_null_stg_workday__organization_job_family_organization_id.3fc5ce5e7e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__organization_job_family')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_job_family_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_job_family_organization_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_job_family_organization_id.3fc5ce5e7e", "fqn": ["workday", "staging", "not_null_stg_workday__organization_job_family_organization_id"], "alias": "not_null_stg_workday__organization_job_family_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.5956118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization_job_family", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_job_family"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_job_family_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__organization_job_family", "attached_node": "model.workday.stg_workday__organization_job_family"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id.56b8e9156b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_family_id", "organization_id"], "model": "{{ get_where_subquery(ref('stg_workday__organization_job_family')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id.56b8e9156b", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id"], "alias": "dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456"}, "created_at": 1708457909.598376, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456\") }}", "language": "sql", "refs": [{"name": "stg_workday__organization_job_family", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization_job_family"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_c7d681ee4f556f503a1ef56336da4456.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_family_id, organization_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization_job_family`\n    group by source_relation, job_family_id, organization_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__organization_job_family", "attached_node": "model.workday.stg_workday__organization_job_family"}, "test.workday.not_null_stg_workday__organization_organization_id.f11f86e5c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__organization_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__organization_organization_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__organization_organization_id.f11f86e5c7", "fqn": ["workday", "staging", "not_null_stg_workday__organization_organization_id"], "alias": "not_null_stg_workday__organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.604574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__organization_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__organization", "attached_node": "model.workday.stg_workday__organization"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id.4aab1c6db5": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "organization_id"], "model": "{{ get_where_subquery(ref('stg_workday__organization')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id.4aab1c6db5", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id"], "alias": "dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5"}, "created_at": 1708457909.607525, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5\") }}", "language": "sql", "refs": [{"name": "stg_workday__organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_1a475c490ede95cbc66c26dc8aa2ded5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, organization_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__organization`\n    group by source_relation, organization_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__organization", "attached_node": "model.workday.stg_workday__organization"}, "test.workday.not_null_stg_workday__position_organization_organization_id.567af692ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__position_organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__position_organization_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__position_organization_organization_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__position_organization_organization_id.567af692ad", "fqn": ["workday", "staging", "not_null_stg_workday__position_organization_organization_id"], "alias": "not_null_stg_workday__position_organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.6137862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__position_organization_organization_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__position_organization", "attached_node": "model.workday.stg_workday__position_organization"}, "test.workday.not_null_stg_workday__position_organization_position_id.f62eb486b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('stg_workday__position_organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__position_organization_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__position_organization_position_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__position_organization_position_id.f62eb486b7", "fqn": ["workday", "staging", "not_null_stg_workday__position_organization_position_id"], "alias": "not_null_stg_workday__position_organization_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.617035, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__position_organization_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.stg_workday__position_organization", "attached_node": "model.workday.stg_workday__position_organization"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id.34a4df1e63": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "organization_id", "position_id"], "model": "{{ get_where_subquery(ref('stg_workday__position_organization')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id.34a4df1e63", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id"], "alias": "dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc"}, "created_at": 1708457909.6196868, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc\") }}", "language": "sql", "refs": [{"name": "stg_workday__position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_1dcef4f0ffa993a9cdcc81a7b54e5dfc.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, organization_id, position_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_organization`\n    group by source_relation, organization_id, position_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__position_organization", "attached_node": "model.workday.stg_workday__position_organization"}, "test.workday.not_null_stg_workday__position_position_id.8a8bc89d4e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('stg_workday__position')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__position_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__position_position_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__position_position_id.8a8bc89d4e", "fqn": ["workday", "staging", "not_null_stg_workday__position_position_id"], "alias": "not_null_stg_workday__position_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.6257112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__position_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.stg_workday__position", "attached_node": "model.workday.stg_workday__position"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id.a6b218cf83": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "position_id"], "model": "{{ get_where_subquery(ref('stg_workday__position')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id.a6b218cf83", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id"], "alias": "dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32"}, "created_at": 1708457909.629258, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32\") }}", "language": "sql", "refs": [{"name": "stg_workday__position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_56256b3f4ad97a96cbfec5c5131e6b32.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, position_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position`\n    group by source_relation, position_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__position", "attached_node": "model.workday.stg_workday__position"}, "test.workday.not_null_stg_workday__position_job_profile_job_profile_id.214e63eb51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "job_profile_id", "model": "{{ get_where_subquery(ref('stg_workday__position_job_profile')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__position_job_profile_job_profile_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__position_job_profile_job_profile_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__position_job_profile_job_profile_id.214e63eb51", "fqn": ["workday", "staging", "not_null_stg_workday__position_job_profile_job_profile_id"], "alias": "not_null_stg_workday__position_job_profile_job_profile_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.635468, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__position_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__position_job_profile_job_profile_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_profile_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile`\nwhere job_profile_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "job_profile_id", "file_key_name": "models.stg_workday__position_job_profile", "attached_node": "model.workday.stg_workday__position_job_profile"}, "test.workday.not_null_stg_workday__position_job_profile_position_id.edebffbee7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('stg_workday__position_job_profile')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__position_job_profile_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__position_job_profile_position_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__position_job_profile_position_id.edebffbee7", "fqn": ["workday", "staging", "not_null_stg_workday__position_job_profile_position_id"], "alias": "not_null_stg_workday__position_job_profile_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.638519, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__position_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__position_job_profile_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.stg_workday__position_job_profile", "attached_node": "model.workday.stg_workday__position_job_profile"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id.a1a5a991fb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "job_profile_id", "position_id"], "model": "{{ get_where_subquery(ref('stg_workday__position_job_profile')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id.a1a5a991fb", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id"], "alias": "dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62"}, "created_at": 1708457909.6412108, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62\") }}", "language": "sql", "refs": [{"name": "stg_workday__position_job_profile", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__position_job_profile"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_7040778b997fa6202660b8c836d5ef62.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, job_profile_id, position_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__position_job_profile`\n    group by source_relation, job_profile_id, position_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__position_job_profile", "attached_node": "model.workday.stg_workday__position_job_profile"}, "test.workday.not_null_stg_workday__worker_worker_id.8dae310560": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__worker')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_worker_id.8dae310560", "fqn": ["workday", "staging", "not_null_stg_workday__worker_worker_id"], "alias": "not_null_stg_workday__worker_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.6472619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__worker", "attached_node": "model.workday.stg_workday__worker"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id.e1ce9c23d8": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id"], "model": "{{ get_where_subquery(ref('stg_workday__worker')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id.e1ce9c23d8", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id"], "alias": "dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33"}, "created_at": 1708457909.649845, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_fecd80881ef8302856b8e8b0c6cecb33.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker`\n    group by source_relation, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__worker", "attached_node": "model.workday.stg_workday__worker"}, "test.workday.not_null_stg_workday__personal_information_worker_id.560ec905d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__personal_information')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__personal_information_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__personal_information_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__personal_information_worker_id.560ec905d1", "fqn": ["workday", "staging", "not_null_stg_workday__personal_information_worker_id"], "alias": "not_null_stg_workday__personal_information_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.656584, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__personal_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__personal_information"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__personal_information_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__personal_information", "attached_node": "model.workday.stg_workday__personal_information"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id.2d458129a6": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id"], "model": "{{ get_where_subquery(ref('stg_workday__personal_information')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id.2d458129a6", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id"], "alias": "dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13"}, "created_at": 1708457909.659456, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13\") }}", "language": "sql", "refs": [{"name": "stg_workday__personal_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__personal_information"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_dd394e30bffba2e2c399ddf7b9de2e13.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information`\n    group by source_relation, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__personal_information", "attached_node": "model.workday.stg_workday__personal_information"}, "test.workday.not_null_stg_workday__person_name_worker_id.666b7b3a90": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__person_name')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__person_name_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__person_name_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__person_name_worker_id.666b7b3a90", "fqn": ["workday", "staging", "not_null_stg_workday__person_name_worker_id"], "alias": "not_null_stg_workday__person_name_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.665144, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__person_name", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_name"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__person_name_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__person_name", "attached_node": "model.workday.stg_workday__person_name"}, "test.workday.not_null_stg_workday__person_name_person_name_type.59eb1d6f63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_name_type", "model": "{{ get_where_subquery(ref('stg_workday__person_name')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__person_name_person_name_type", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__person_name_person_name_type.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__person_name_person_name_type.59eb1d6f63", "fqn": ["workday", "staging", "not_null_stg_workday__person_name_person_name_type"], "alias": "not_null_stg_workday__person_name_person_name_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.668187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__person_name", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_name"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__person_name_person_name_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_name_type\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\nwhere person_name_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "person_name_type", "file_key_name": "models.stg_workday__person_name", "attached_node": "model.workday.stg_workday__person_name"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type.c4f63f27fd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id", "person_name_type"], "model": "{{ get_where_subquery(ref('stg_workday__person_name')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type.c4f63f27fd", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type"], "alias": "dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574"}, "created_at": 1708457909.671028, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574\") }}", "language": "sql", "refs": [{"name": "stg_workday__person_name", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_name"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_44cc9ea0a6775c0a350964ebfc21b574.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id, person_name_type\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_name`\n    group by source_relation, worker_id, person_name_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__person_name", "attached_node": "model.workday.stg_workday__person_name"}, "test.workday.not_null_stg_workday__personal_information_ethnicity_worker_id.08e20915fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__personal_information_ethnicity')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__personal_information_ethnicity_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__personal_information_ethnicity_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__personal_information_ethnicity_worker_id.08e20915fd", "fqn": ["workday", "staging", "not_null_stg_workday__personal_information_ethnicity_worker_id"], "alias": "not_null_stg_workday__personal_information_ethnicity_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.677804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__personal_information_ethnicity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__personal_information_ethnicity"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__personal_information_ethnicity_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__personal_information_ethnicity", "attached_node": "model.workday.stg_workday__personal_information_ethnicity"}, "test.workday.not_null_stg_workday__personal_information_ethnicity_ethnicity_id.89c11054f2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ethnicity_id", "model": "{{ get_where_subquery(ref('stg_workday__personal_information_ethnicity')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__personal_information_ethnicity_ethnicity_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__personal_information_ethnicity_ethnicity_id.89c11054f2", "fqn": ["workday", "staging", "not_null_stg_workday__personal_information_ethnicity_ethnicity_id"], "alias": "not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5"}, "created_at": 1708457909.6808288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5\") }}", "language": "sql", "refs": [{"name": "stg_workday__personal_information_ethnicity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__personal_information_ethnicity"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__personal_e65829867ddf84c220ea148ba5494da5.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ethnicity_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\nwhere ethnicity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ethnicity_id", "file_key_name": "models.stg_workday__personal_information_ethnicity", "attached_node": "model.workday.stg_workday__personal_information_ethnicity"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id.52eddf5fd3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id", "ethnicity_id"], "model": "{{ get_where_subquery(ref('stg_workday__personal_information_ethnicity')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id.52eddf5fd3", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id"], "alias": "dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5"}, "created_at": 1708457909.684293, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5\") }}", "language": "sql", "refs": [{"name": "stg_workday__personal_information_ethnicity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__personal_information_ethnicity"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_ffb3ce643c74c9f7d528c6e3811e50a5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id, ethnicity_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__personal_information_ethnicity`\n    group by source_relation, worker_id, ethnicity_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__personal_information_ethnicity", "attached_node": "model.workday.stg_workday__personal_information_ethnicity"}, "test.workday.not_null_stg_workday__military_service_worker_id.a196487e38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__military_service')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__military_service_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__military_service_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__military_service_worker_id.a196487e38", "fqn": ["workday", "staging", "not_null_stg_workday__military_service_worker_id"], "alias": "not_null_stg_workday__military_service_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.691474, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__military_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__military_service"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__military_service_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__military_service", "attached_node": "model.workday.stg_workday__military_service"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id.77c49e46ff": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id"], "model": "{{ get_where_subquery(ref('stg_workday__military_service')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id.77c49e46ff", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id"], "alias": "dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9"}, "created_at": 1708457909.6939662, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9\") }}", "language": "sql", "refs": [{"name": "stg_workday__military_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__military_service"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_4ed209a16d6006f56687bce05216daf9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__military_service`\n    group by source_relation, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__military_service", "attached_node": "model.workday.stg_workday__military_service"}, "test.workday.not_null_stg_workday__person_contact_email_address_person_contact_email_address_id.b8e6adf279": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_contact_email_address_id", "model": "{{ get_where_subquery(ref('stg_workday__person_contact_email_address')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__person_contact_email_address_person_contact_email_address_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__person_contact_email_address_person_contact_email_address_id.b8e6adf279", "fqn": ["workday", "staging", "not_null_stg_workday__person_contact_email_address_person_contact_email_address_id"], "alias": "not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08"}, "created_at": 1708457909.699994, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08\") }}", "language": "sql", "refs": [{"name": "stg_workday__person_contact_email_address", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_contact_email_address"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__person_c_74359aa56eef2ed577a1adb5458ccb08.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect person_contact_email_address_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\nwhere person_contact_email_address_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "person_contact_email_address_id", "file_key_name": "models.stg_workday__person_contact_email_address", "attached_node": "model.workday.stg_workday__person_contact_email_address"}, "test.workday.not_null_stg_workday__person_contact_email_address_worker_id.9237f19755": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__person_contact_email_address')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__person_contact_email_address_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__person_contact_email_address_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__person_contact_email_address_worker_id.9237f19755", "fqn": ["workday", "staging", "not_null_stg_workday__person_contact_email_address_worker_id"], "alias": "not_null_stg_workday__person_contact_email_address_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.70256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__person_contact_email_address", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_contact_email_address"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__person_contact_email_address_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__person_contact_email_address", "attached_node": "model.workday.stg_workday__person_contact_email_address"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id.ff90e55696": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id", "person_contact_email_address_id"], "model": "{{ get_where_subquery(ref('stg_workday__person_contact_email_address')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id.ff90e55696", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id"], "alias": "dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb"}, "created_at": 1708457909.7051451, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb\") }}", "language": "sql", "refs": [{"name": "stg_workday__person_contact_email_address", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__person_contact_email_address"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_60ecbd731515397eb7045adcbc31b8fb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id, person_contact_email_address_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__person_contact_email_address`\n    group by source_relation, worker_id, person_contact_email_address_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__person_contact_email_address", "attached_node": "model.workday.stg_workday__person_contact_email_address"}, "test.workday.not_null_stg_workday__worker_position_position_id.4dfd73b611": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_position')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_position_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_position_position_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_position_position_id.4dfd73b611", "fqn": ["workday", "staging", "not_null_stg_workday__worker_position_position_id"], "alias": "not_null_stg_workday__worker_position_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.711762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_position_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.stg_workday__worker_position", "attached_node": "model.workday.stg_workday__worker_position"}, "test.workday.not_null_stg_workday__worker_position_worker_id.98db71611d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_position')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_position_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_position_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_position_worker_id.98db71611d", "fqn": ["workday", "staging", "not_null_stg_workday__worker_position_worker_id"], "alias": "not_null_stg_workday__worker_position_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.714331, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_position_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__worker_position", "attached_node": "model.workday.stg_workday__worker_position"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id.307e2e96c3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "position_id", "worker_id"], "model": "{{ get_where_subquery(ref('stg_workday__worker_position')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id.307e2e96c3", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id"], "alias": "dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7"}, "created_at": 1708457909.716963, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_3ad453cb34c5956fe70257654beec9d7.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, position_id, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position`\n    group by source_relation, position_id, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__worker_position", "attached_node": "model.workday.stg_workday__worker_position"}, "test.workday.not_null_stg_workday__worker_leave_status_leave_request_event_id.a172377761": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "leave_request_event_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_leave_status')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_leave_status_leave_request_event_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_leave_status_leave_request_event_id.a172377761", "fqn": ["workday", "staging", "not_null_stg_workday__worker_leave_status_leave_request_event_id"], "alias": "not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308"}, "created_at": 1708457909.724502, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker_leave_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_leave_status"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_l_c2bd4624d54474d8cc43b5b9a29cf308.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect leave_request_event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status`\nwhere leave_request_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "leave_request_event_id", "file_key_name": "models.stg_workday__worker_leave_status", "attached_node": "model.workday.stg_workday__worker_leave_status"}, "test.workday.not_null_stg_workday__worker_leave_status_worker_id.c899fb3a61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_leave_status')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_leave_status_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_leave_status_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_leave_status_worker_id.c899fb3a61", "fqn": ["workday", "staging", "not_null_stg_workday__worker_leave_status_worker_id"], "alias": "not_null_stg_workday__worker_leave_status_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.726979, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker_leave_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_leave_status"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_leave_status_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__worker_leave_status", "attached_node": "model.workday.stg_workday__worker_leave_status"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id.19d4edcafd": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "leave_request_event_id", "worker_id"], "model": "{{ get_where_subquery(ref('stg_workday__worker_leave_status')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id.19d4edcafd", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id"], "alias": "dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f"}, "created_at": 1708457909.729755, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker_leave_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_leave_status"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_c584e5c8d592358916f69a681935716f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, leave_request_event_id, worker_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_leave_status`\n    group by source_relation, leave_request_event_id, worker_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__worker_leave_status", "attached_node": "model.workday.stg_workday__worker_leave_status"}, "test.workday.not_null_stg_workday__worker_position_organization_position_id.196dd9786d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "position_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_position_organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_position_organization_position_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_position_organization_position_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_position_organization_position_id.196dd9786d", "fqn": ["workday", "staging", "not_null_stg_workday__worker_position_organization_position_id"], "alias": "not_null_stg_workday__worker_position_organization_position_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.735578, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_position_organization_position_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect position_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`\nwhere position_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "position_id", "file_key_name": "models.stg_workday__worker_position_organization", "attached_node": "model.workday.stg_workday__worker_position_organization"}, "test.workday.not_null_stg_workday__worker_position_organization_worker_id.d8cf960f0b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "worker_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_position_organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_position_organization_worker_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_position_organization_worker_id.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_position_organization_worker_id.d8cf960f0b", "fqn": ["workday", "staging", "not_null_stg_workday__worker_position_organization_worker_id"], "alias": "not_null_stg_workday__worker_position_organization_worker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708457909.738647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_position_organization_worker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect worker_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`\nwhere worker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "worker_id", "file_key_name": "models.stg_workday__worker_position_organization", "attached_node": "model.workday.stg_workday__worker_position_organization"}, "test.workday.not_null_stg_workday__worker_position_organization_organization_id.a79000dec1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ get_where_subquery(ref('stg_workday__worker_position_organization')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "not_null_stg_workday__worker_position_organization_organization_id", "resource_type": "test", "package_name": "workday", "path": "not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.not_null_stg_workday__worker_position_organization_organization_id.a79000dec1", "fqn": ["workday", "staging", "not_null_stg_workday__worker_position_organization_organization_id"], "alias": "not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23"}, "created_at": 1708457909.741168, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/not_null_stg_workday__worker_p_90dbe3fb66cda8c3c13fbdcf1b2f4d23.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "organization_id", "file_key_name": "models.stg_workday__worker_position_organization", "attached_node": "model.workday.stg_workday__worker_position_organization"}, "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id.d63632b244": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_relation", "worker_id", "position_id", "organization_id"], "model": "{{ get_where_subquery(ref('stg_workday__worker_position_organization')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "zz_dbt_renee_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id", "resource_type": "test", "package_name": "workday", "path": "dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926.sql", "original_file_path": "models/staging/stg_workday.yml", "unique_id": "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id.d63632b244", "fqn": ["workday", "staging", "dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id"], "alias": "dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926"}, "created_at": 1708457909.743711, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926\") }}", "language": "sql", "refs": [{"name": "stg_workday__worker_position_organization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.workday.stg_workday__worker_position_organization"]}, "compiled_path": "target/compiled/workday/models/staging/stg_workday.yml/dbt_utils_unique_combination_o_3204ed06ee9feaa711c97af18a025926.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, worker_id, position_id, organization_id\n    from `dbt-package-testing`.`zz_dbt_renee_stg_workday`.`stg_workday__worker_position_organization`\n    group by source_relation, worker_id, position_id, organization_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_workday__worker_position_organization", "attached_node": "model.workday.stg_workday__worker_position_organization"}}, "sources": {"source.workday.workday.job_profile": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "job_profile", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.job_profile", "fqn": ["workday", "staging", "workday", "job_profile"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "job_profile", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a job profile, providing details on roles, responsibilities, and associated attributes.", "columns": {"id": {"name": "id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_job_description": {"name": "additional_job_description", "description": "Additional details or information about the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_id": {"name": "compensation_grade_id", "description": "Identifier for the compensation grade.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "critical_job": {"name": "critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Brief description of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill": {"name": "difficulty_to_fill", "description": "Indication of the difficulty level in filling the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive": {"name": "inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "include_job_code_in_name": {"name": "include_job_code_in_name", "description": "Flag indicating whether to include the job code in the job profile name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_category_id": {"name": "job_category_id", "description": "Identifier for the job category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_code": {"name": "job_profile_code", "description": "Code assigned to the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level": {"name": "level", "description": "Level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level": {"name": "management_level", "description": "Management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_title": {"name": "private_title", "description": "Private title associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "public_job": {"name": "public_job", "description": "Flag indicating whether the job is public.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "referral_payment_plan": {"name": "referral_payment_plan", "description": "Referral payment plan associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "summary": {"name": "summary", "description": "Summary or overview of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "union_code": {"name": "union_code", "description": "Code associated with the union related to the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "union_membership_requirement": {"name": "union_membership_requirement", "description": "Flag indicating whether union membership is a requirement for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift_required": {"name": "work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_study_award_source_code": {"name": "work_study_award_source_code", "description": "Code associated with the source of work study awards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_study_requirement_option_code": {"name": "work_study_requirement_option_code", "description": "Code associated with work study requirement options.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`job_profile`", "created_at": 1708457909.7503428}, "source.workday.workday.job_family_job_profile": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "job_family_job_profile", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.job_family_job_profile", "fqn": ["workday", "staging", "workday", "job_family_job_profile"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "job_family_job_profile", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the relationship between job families and job profiles in the Workday dataset.", "columns": {"job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_job_profile`", "created_at": 1708457909.7506711}, "source.workday.workday.job_family": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "job_family", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.job_family", "fqn": ["workday", "staging", "workday", "job_family"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "job_family", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record provides essential information about a specific job family, contributing to the organizational hierarchy and classification of roles.", "columns": {"id": {"name": "id", "description": "Unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive": {"name": "inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_code": {"name": "job_family_code", "description": "Code assigned to the job family", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "summary": {"name": "summary", "description": "Summary or overview of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`job_family`", "created_at": 1708457909.7509608}, "source.workday.workday.job_family_job_family_group": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "job_family_job_family_group", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.job_family_job_family_group", "fqn": ["workday", "staging", "workday", "job_family_job_family_group"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "job_family_job_family_group", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the relationship between job families and job family groups in the Workday dataset.", "columns": {"job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_id": {"name": "job_family_group_id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_job_family_group`", "created_at": 1708457909.751225}, "source.workday.workday.job_family_group": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "job_family_group", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.job_family_group", "fqn": ["workday", "staging", "workday", "job_family_group"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "job_family_group", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record corresponds to a specific group of related job families, providing an organizational structure for roles with similar characteristics.", "columns": {"id": {"name": "id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive": {"name": "inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_code": {"name": "job_family_group_code", "description": "Code assigned to the job family group for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "summary": {"name": "summary", "description": "Summary or overview of the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`job_family_group`", "created_at": 1708457909.751499}, "source.workday.workday.organization_role": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "organization_role", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.organization_role", "fqn": ["workday", "staging", "workday", "organization_role"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "organization_role", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Captures the associations between different organizational entities and the roles assigned to them, providing valuable insights into organizational roles and responsibilities.", "columns": {"organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_id": {"name": "role_id", "description": "Identifier for the specific role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_role_code": {"name": "organization_role_code", "description": "Code assigned to the organization role for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`organization_role`", "created_at": 1708457909.751764}, "source.workday.workday.organization_role_worker": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "organization_role_worker", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.organization_role_worker", "fqn": ["workday", "staging", "workday", "organization_role_worker"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "organization_role_worker", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Captures the linkages between individual workers, the organizations to which they belong, and the roles they fulfill.", "columns": {"associated_worker_id": {"name": "associated_worker_id", "description": "Identifier for the worker associated with the organization role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "role_id": {"name": "role_id", "description": "Identifier for the specific role.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`organization_role_worker`", "created_at": 1708457909.752034}, "source.workday.workday.organization_job_family": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "organization_job_family", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.organization_job_family", "fqn": ["workday", "staging", "workday", "organization_job_family"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "organization_job_family", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Captures the associations between different organizational entities and the job families they are linked to.", "columns": {"job_family_id": {"name": "job_family_id", "description": "Identifier for the job family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_family_group_id": {"name": "job_family_group_id", "description": "Identifier for the job family group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`organization_job_family`", "created_at": 1708457909.7523}, "source.workday.workday.organization": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "organization", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.organization", "fqn": ["workday", "staging", "workday", "organization"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "organization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Identifier for the organization.", "columns": {"id": {"name": "id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "availability_date": {"name": "availability_date", "description": "Date when the organization becomes available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_for_hire": {"name": "available_for_hire", "description": "Flag indicating whether the organization is available for hiring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Code assigned to the organization for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "external_url": {"name": "external_url", "description": "External URL associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hiring_freeze": {"name": "hiring_freeze", "description": "Flag indicating whether the organization is under a hiring freeze.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive": {"name": "inactive", "description": "Flag indicating whether this is inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inactive_date": {"name": "inactive_date", "description": "Date when the organization becomes inactive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "include_manager_in_name": {"name": "include_manager_in_name", "description": "Flag indicating whether to include the manager in the organization name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "include_organization_code_in_name": {"name": "include_organization_code_in_name", "description": "Flag indicating whether to include the organization code in the name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_updated_date_time": {"name": "last_updated_date_time", "description": "Date and time when the organization record was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "Location associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manager_id": {"name": "manager_id", "description": "Identifier for the manager associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_code": {"name": "organization_code", "description": "Code associated with the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_owner_id": {"name": "organization_owner_id", "description": "Identifier for the owner of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "staffing_model": {"name": "staffing_model", "description": "Staffing model associated with the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "Subtype or classification of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "superior_organization_id": {"name": "superior_organization_id", "description": "Identifier for the superior organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_availability_date": {"name": "supervisory_position_availability_date", "description": "Availability date for supervisory positions within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_earliest_hire_date": {"name": "supervisory_position_earliest_hire_date", "description": "Earliest hire date for supervisory positions within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_time_type": {"name": "supervisory_position_time_type", "description": "Time type associated with supervisory positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_position_worker_type": {"name": "supervisory_position_worker_type", "description": "Worker type associated with supervisory positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "top_level_organization_id": {"name": "top_level_organization_id", "description": "Identifier for the top-level organization, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type or category of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility level of the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`organization`", "created_at": 1708457909.7526379}, "source.workday.workday.position_organization": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "position_organization", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.position_organization", "fqn": ["workday", "staging", "workday", "position_organization"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "position_organization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Captures the associations between specific positions and the organizations to which they belong.", "columns": {"organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type or category of the position within the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`position_organization`", "created_at": 1708457909.752907}, "source.workday.workday.position": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "position", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.position", "fqn": ["workday", "staging", "workday", "position"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "position", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Resource for understanding the details and attributes associated with each position.", "columns": {"id": {"name": "id", "description": "Unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_tenure_eligible": {"name": "academic_tenure_eligible", "description": "Flag indicating whether the position is eligible for academic tenure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "availability_date": {"name": "availability_date", "description": "Date when the organization becomes available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_for_hire": {"name": "available_for_hire", "description": "Flag indicating whether the organization is available for hiring.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_for_overlap": {"name": "available_for_overlap", "description": "Flag indicating whether the position is available for overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_for_recruiting": {"name": "available_for_recruiting", "description": "Flag indicating whether the position is available for recruiting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed": {"name": "closed", "description": "Flag indicating whether the position is closed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_code": {"name": "compensation_grade_code", "description": "Code associated with the compensation grade of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_code": {"name": "compensation_grade_profile_code", "description": "Code associated with the compensation grade profile of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_package_code": {"name": "compensation_package_code", "description": "Code associated with the compensation package of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_step_code": {"name": "compensation_step_code", "description": "Code associated with the compensation step of the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "critical_job": {"name": "critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill_code": {"name": "difficulty_to_fill_code", "description": "Code indicating the difficulty level in filling the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_hire_date": {"name": "earliest_hire_date", "description": "Earliest date when the position can be filled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "earliest_overlap_date": {"name": "earliest_overlap_date", "description": "Earliest date when the position can overlap with other positions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hiring_freeze": {"name": "hiring_freeze", "description": "Flag indicating whether the organization is under a hiring freeze.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description": {"name": "job_description", "description": "Detailed description of the job associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_description_summary": {"name": "job_description_summary", "description": "Summary or overview of the job description for the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_posting_title": {"name": "job_posting_title", "description": "Title used for job postings associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_code": {"name": "position_code", "description": "Code associated with the position for reference and categorization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_time_type_code": {"name": "position_time_type_code", "description": "Code indicating the time type associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis": {"name": "primary_compensation_basis", "description": "Primary basis of compensation for the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis_amount_change": {"name": "primary_compensation_basis_amount_change", "description": "Change in the amount of the primary compensation basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_compensation_basis_percent_change": {"name": "primary_compensation_basis_percent_change", "description": "Change in the percentage of the primary compensation basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "supervisory_organization_id": {"name": "supervisory_organization_id", "description": "Identifier for the supervisory organization associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift_required": {"name": "work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_for_filled_position_id": {"name": "worker_for_filled_position_id", "description": "Identifier for the worker filling the position, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_position_id": {"name": "worker_position_id", "description": "Identifier for the worker associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_type_code": {"name": "worker_type_code", "description": "Code indicating the type of worker associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`position`", "created_at": 1708457909.753577}, "source.workday.workday.position_job_profile": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "position_job_profile", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.position_job_profile", "fqn": ["workday", "staging", "workday", "position_job_profile"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "position_job_profile", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Captures the associations between specific positions and the job profiles they are linked to.", "columns": {"job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill_code": {"name": "difficulty_to_fill_code", "description": "Code indicating the difficulty level in filling the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_critical_job": {"name": "is_critical_job", "description": "Flag indicating whether the position is considered critical based on the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_category_code": {"name": "job_category_code", "description": "Code indicating the category of the job profile associated with the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level_code": {"name": "management_level_code", "description": "Code indicating the management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name associated with the job profile linked to the position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift_required": {"name": "work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`position_job_profile`", "created_at": 1708457909.753878}, "source.workday.workday.worker_history": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "worker_history", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.worker_history", "fqn": ["workday", "staging", "workday", "worker_history"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "worker_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "This table serves as a central repository for details related to the employment status, compensation, and other key attributes of each worker.", "columns": {"id": {"name": "id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_tenure_date": {"name": "academic_tenure_date", "description": "Date when academic tenure is achieved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Flag indicating the current active status of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_status_date": {"name": "active_status_date", "description": "Date when the active status was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_currency": {"name": "annual_currency_summary_currency", "description": "Currency used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_frequency": {"name": "annual_currency_summary_frequency", "description": "Frequency of currency for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_primary_compensation_basis": {"name": "annual_currency_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual compensation summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_total_base_pay": {"name": "annual_currency_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_currency_summary_total_salary_and_allowances": {"name": "annual_currency_summary_total_salary_and_allowances", "description": "Total salary and allowances in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_currency": {"name": "annual_summary_currency", "description": "Currency used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_frequency": {"name": "annual_summary_frequency", "description": "Frequency of currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_primary_compensation_basis": {"name": "annual_summary_primary_compensation_basis", "description": "Primary compensation basis used for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_total_base_pay": {"name": "annual_summary_total_base_pay", "description": "Total base pay in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "annual_summary_total_salary_and_allowances": {"name": "annual_summary_total_salary_and_allowances", "description": "Total salary and allowances in the currency for annual summaries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "benefits_service_date": {"name": "benefits_service_date", "description": "Date when the worker's benefits service starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_service_date": {"name": "company_service_date", "description": "Date when the worker's service with the company started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_effective_date": {"name": "compensation_effective_date", "description": "Effective date when changes to the worker's compensation take effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_id": {"name": "compensation_grade_id", "description": "Identifier for the compensation grade.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compensation_grade_profile_id": {"name": "compensation_grade_profile_id", "description": "Unique identifier for the compensation grade profile associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "continuous_service_date": {"name": "continuous_service_date", "description": "Date when the worker's continuous service with the organization started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_assignment_details": {"name": "contract_assignment_details", "description": "Details of the worker's contract assignment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_currency_code": {"name": "contract_currency_code", "description": "Currency code used for the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_end_date": {"name": "contract_end_date", "description": "Date when the worker's contract is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_frequency_name": {"name": "contract_frequency_name", "description": "Frequency of payment for the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_pay_rate": {"name": "contract_pay_rate", "description": "Pay rate associated with the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_vendor_name": {"name": "contract_vendor_name", "description": "Name of the vendor associated with the worker's contract.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_entered_workforce": {"name": "date_entered_workforce", "description": "Date when the worker entered the workforce.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_unemployed": {"name": "days_unemployed", "description": "Number of days the worker has been unemployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eligible_for_hire": {"name": "eligible_for_hire", "description": "Flag indicating whether the worker is eligible for hire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eligible_for_rehire_on_latest_termination": {"name": "eligible_for_rehire_on_latest_termination", "description": "Flag indicating whether the worker is eligible for rehire based on the latest termination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_currency": {"name": "employee_compensation_currency", "description": "Currency code used for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_frequency": {"name": "employee_compensation_frequency", "description": "Frequency of payment for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_primary_compensation_basis": {"name": "employee_compensation_primary_compensation_basis", "description": "Primary compensation basis used for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_total_base_pay": {"name": "employee_compensation_total_base_pay", "description": "Total base pay for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_compensation_total_salary_and_allowances": {"name": "employee_compensation_total_salary_and_allowances", "description": "Total salary and allowances for the worker's employee compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_employment_date": {"name": "end_employment_date", "description": "Date when the worker's employment is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_date_of_return": {"name": "expected_date_of_return", "description": "Expected date of the worker's return.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_retirement_date": {"name": "expected_retirement_date", "description": "Expected date of the worker's retirement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_day_of_work": {"name": "first_day_of_work", "description": "The date when the worker started their first day of work.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_international_assignment": {"name": "has_international_assignment", "description": "Flag indicating whether the worker has an international assignment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_date": {"name": "hire_date", "description": "The date when the worker was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_reason": {"name": "hire_reason", "description": "The reason for hiring the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hire_rescinded": {"name": "hire_rescinded", "description": "Flag indicating whether the worker's hire was rescinded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_country": {"name": "home_country", "description": "The home country of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_currency": {"name": "hourly_frequency_currency", "description": "Currency code used for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_frequency": {"name": "hourly_frequency_frequency", "description": "Frequency of payment for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_primary_compensation_basis": {"name": "hourly_frequency_primary_compensation_basis", "description": "Primary compensation basis used for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_total_base_pay": {"name": "hourly_frequency_total_base_pay", "description": "Total base pay for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hourly_frequency_total_salary_and_allowances": {"name": "hourly_frequency_total_salary_and_allowances", "description": "Total salary and allowances for the worker's hourly compensation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_datefor_which_paid": {"name": "last_datefor_which_paid", "description": "Last date for which the worker was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_termination_reason": {"name": "local_termination_reason", "description": "The reason for local termination of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "months_continuous_prior_employment": {"name": "months_continuous_prior_employment", "description": "Number of months of continuous prior employment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "not_returning": {"name": "not_returning", "description": "Flag indicating whether the worker is not returning.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_hire_date": {"name": "original_hire_date", "description": "The original date when the worker was hired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_currency": {"name": "pay_group_frequency_currency", "description": "Currency code used for the worker's pay group frequency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_frequency": {"name": "pay_group_frequency_frequency", "description": "Frequency of payment for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_primary_compensation_basis": {"name": "pay_group_frequency_primary_compensation_basis", "description": "Primary compensation basis used for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_total_base_pay": {"name": "pay_group_frequency_total_base_pay", "description": "Total base pay for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group_frequency_total_salary_and_allowances": {"name": "pay_group_frequency_total_salary_and_allowances", "description": "Total salary and allowances for the worker's pay group.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_through_date": {"name": "pay_through_date", "description": "The date through which the worker is paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_category": {"name": "primary_termination_category", "description": "The primary termination category for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_termination_reason": {"name": "primary_termination_reason", "description": "The primary termination reason for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probation_end_date": {"name": "probation_end_date", "description": "The date when the worker's probation ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "probation_start_date": {"name": "probation_start_date", "description": "The date when the worker's probation starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_reference_id": {"name": "reason_reference_id", "description": "The reference ID for the termination reason.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regrettable_termination": {"name": "regrettable_termination", "description": "Flag indicating whether the worker's termination is regrettable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rehire": {"name": "rehire", "description": "Flag indicating whether the worker is eligible for rehire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resignation_date": {"name": "resignation_date", "description": "The date when the worker resigned.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retired": {"name": "retired", "description": "Flag indicating whether the worker is retired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retirement_date": {"name": "retirement_date", "description": "The date when the worker retired.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "retirement_eligibility_date": {"name": "retirement_eligibility_date", "description": "The date when the worker becomes eligible for retirement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "return_unknown": {"name": "return_unknown", "description": "Flag indicating whether the worker's return status is unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seniority_date": {"name": "seniority_date", "description": "The date when the worker's seniority is recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "severance_date": {"name": "severance_date", "description": "The date when the worker's severance is recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "terminated": {"name": "terminated", "description": "Flag indicating whether the worker is terminated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "termination_date": {"name": "termination_date", "description": "The date when the worker is terminated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "termination_involuntary": {"name": "termination_involuntary", "description": "Flag indicating whether the termination is involuntary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "termination_last_day_of_work": {"name": "termination_last_day_of_work", "description": "The last day of work for the worker during termination.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_off_service_date": {"name": "time_off_service_date", "description": "The date when the worker's time-off service starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "universal_id": {"name": "universal_id", "description": "The universal ID associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The identifier for the user associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vesting_date": {"name": "vesting_date", "description": "The date when the worker's vesting starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_code": {"name": "worker_code", "description": "The code associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`worker_history`", "created_at": 1708457909.754385}, "source.workday.workday.personal_information_history": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "personal_information_history", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.personal_information_history", "fqn": ["workday", "staging", "workday", "personal_information_history"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "personal_information_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The personal information associated with each worker.", "columns": {"id": {"name": "id", "description": "The identifier for each personal information record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "TRUE if it is the currently active record. FALSE if it is a historical version of the record. Only one version of the record can be TRUE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "Timestamp when the record was first created or modified in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "Timestamp marking the end of a record being active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of personal information record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_nationality": {"name": "additional_nationality", "description": "Additional nationality associated with the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blood_type": {"name": "blood_type", "description": "The blood type of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "citizenship_status": {"name": "citizenship_status", "description": "The citizenship status of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_of_birth": {"name": "city_of_birth", "description": "The city of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city_of_birth_code": {"name": "city_of_birth_code", "description": "The city of birth code of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country_of_birth": {"name": "country_of_birth", "description": "The country of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_birth": {"name": "date_of_birth", "description": "The date of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_death": {"name": "date_of_death", "description": "The date of death of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The gender of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hispanic_or_latino": {"name": "hispanic_or_latino", "description": "lag indicating whether the individual is Hispanic or Latino.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_locality": {"name": "hukou_locality", "description": "The locality associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_postal_code": {"name": "hukou_postal_code", "description": "The postal code associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_region": {"name": "hukou_region", "description": "The region associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_subregion": {"name": "hukou_subregion", "description": "The subregion associated with the Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hukou_type": {"name": "hukou_type", "description": "The type of Hukou.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_medical_exam_date": {"name": "last_medical_exam_date", "description": "The date of the last medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_medical_exam_valid_to": {"name": "last_medical_exam_valid_to", "description": "The validity date of the last medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_hukou": {"name": "local_hukou", "description": "Flag indicating whether the Hukou is local.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "marital_status": {"name": "marital_status", "description": "The marital status of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "marital_status_date": {"name": "marital_status_date", "description": "The date of the marital status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_exam_notes": {"name": "medical_exam_notes", "description": "Notes from the medical exam.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "native_region": {"name": "native_region", "description": "The native region of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "native_region_code": {"name": "native_region_code", "description": "The code of the native region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personnel_file_agency": {"name": "personnel_file_agency", "description": "The agency associated with the personnel file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "political_affiliation": {"name": "political_affiliation", "description": "The political affiliation of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_nationality": {"name": "primary_nationality", "description": "The primary nationality of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_of_birth": {"name": "region_of_birth", "description": "The region of birth of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region_of_birth_code": {"name": "region_of_birth_code", "description": "The code of the region of birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "religion": {"name": "religion", "description": "The religion of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_benefit": {"name": "social_benefit", "description": "The social benefit associated with the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tobacco_use": {"name": "tobacco_use", "description": "Flag indicating whether the individual uses tobacco.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`personal_information_history`", "created_at": 1708457909.7547631}, "source.workday.workday.person_name": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "person_name", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.person_name", "fqn": ["workday", "staging", "workday", "person_name"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "person_name", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the name information for an individual in the Workday system.", "columns": {"index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personal_info_system_id": {"name": "personal_info_system_id", "description": "The system ID associated with the personal information of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type or category of the person name (e.g., legal name, preferred name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_suffix": {"name": "academic_suffix", "description": "The academic suffix, if applicable (e.g., PhD, MD).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "additional_name_type": {"name": "additional_name_type", "description": "Additional type or category for the person name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country associated with the person name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_name_singapore_malaysia": {"name": "full_name_singapore_malaysia", "description": "The full name as used in Singapore and Malaysia.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hereditary_suffix": {"name": "hereditary_suffix", "description": "The hereditary suffix, if applicable (e.g., Jr, Sr).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "honorary_suffix": {"name": "honorary_suffix", "description": "The honorary suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name or surname of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_first_name": {"name": "local_first_name", "description": "The local or native first name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_first_name_2": {"name": "local_first_name_2", "description": "Additional local or native first name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_last_name": {"name": "local_last_name", "description": "The local or native last name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_last_name_2": {"name": "local_last_name_2", "description": "Additional local or native last name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_middle_name": {"name": "local_middle_name", "description": "The local or native middle name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_middle_name_2": {"name": "local_middle_name_2", "description": "Additional local or native middle name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_secondary_last_name": {"name": "local_secondary_last_name", "description": "Secondary local or native last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_secondary_last_name_2": {"name": "local_secondary_last_name_2", "description": "Additional secondary local or native last name, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_name": {"name": "middle_name", "description": "The middle name of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_salutation": {"name": "prefix_salutation", "description": "The prefix or salutation before the name (e.g., Mr., Ms., Dr.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_title": {"name": "prefix_title", "description": "The prefix or title associated with the name (e.g., Professor).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prefix_title_code": {"name": "prefix_title_code", "description": "The code associated with the prefix or title.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "professional_suffix": {"name": "professional_suffix", "description": "The professional suffix, if applicable (e.g., Esq., CPA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "religious_suffix": {"name": "religious_suffix", "description": "The religious suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "royal_suffix": {"name": "royal_suffix", "description": "The royal suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secondary_last_name": {"name": "secondary_last_name", "description": "Secondary last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_suffix": {"name": "social_suffix", "description": "The social suffix, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_suffix_id": {"name": "social_suffix_id", "description": "The identifier for the social suffix.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tertiary_last_name": {"name": "tertiary_last_name", "description": "Tertiary last name or surname, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`person_name`", "created_at": 1708457909.755182}, "source.workday.workday.personal_information_ethnicity": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "personal_information_ethnicity", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.personal_information_ethnicity", "fqn": ["workday", "staging", "workday", "personal_information_ethnicity"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "personal_information_ethnicity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents information about the ethnicity of an individual in the Workday system.", "columns": {"index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personal_info_system_id": {"name": "personal_info_system_id", "description": "The system ID associated with the personal information of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_code": {"name": "ethnicity_code", "description": "The code representing the ethnicity of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_id": {"name": "ethnicity_id", "description": "The identifier associated with the ethnicity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`personal_information_ethnicity`", "created_at": 1708457909.755472}, "source.workday.workday.military_service": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "military_service", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.military_service", "fqn": ["workday", "staging", "workday", "military_service"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "military_service", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents information about an individual's military service in the Workday system.", "columns": {"index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personal_info_system_id": {"name": "personal_info_system_id", "description": "The system ID associated with the personal information of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date on which the individual was discharged from military service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments related to the military service record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rank": {"name": "rank", "description": "The rank achieved by the individual during military service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service": {"name": "service", "description": "The specific military service branch in which the individual served.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_type": {"name": "service_type", "description": "The type or category of military service (e.g., active duty, reserve, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the individual's military service (e.g., active, inactive, retired).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_begin_date": {"name": "status_begin_date", "description": "The date on which the current military service status began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`military_service`", "created_at": 1708457909.755758}, "source.workday.workday.person_contact_email_address": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "person_contact_email_address", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.person_contact_email_address", "fqn": ["workday", "staging", "workday", "person_contact_email_address"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "person_contact_email_address", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the email addresses associated with a person in the Workday system.", "columns": {"id": {"name": "id", "description": "Unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "personal_info_system_id": {"name": "personal_info_system_id", "description": "The system ID associated with the personal information of the individual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "The actual email address of the person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_code": {"name": "email_code", "description": "A code or label associated with the type or purpose of the email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_comment": {"name": "email_comment", "description": "Any additional comments or notes related to the email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`person_contact_email_address`", "created_at": 1708457909.756035}, "source.workday.workday.worker_position_history": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "worker_position_history", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.worker_position_history", "fqn": ["workday", "staging", "workday", "worker_position_history"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "worker_position_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the positions held by workers in the Workday system", "columns": {"position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "TRUE if it is the currently active record. FALSE if it is a historical version of the record. Only one version of the record can be TRUE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "Timestamp when the record was first created or modified in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "Timestamp marking the end of a record being active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_end_date": {"name": "academic_pay_setup_data_annual_work_period_end_date", "description": "The end date of the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_start_date": {"name": "academic_pay_setup_data_annual_work_period_start_date", "description": "The start date of the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_annual_work_period_work_percent_of_year": {"name": "academic_pay_setup_data_annual_work_period_work_percent_of_year", "description": "The work percentage of the year in the annual work period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_disbursement_plan_period_end_date": {"name": "academic_pay_setup_data_disbursement_plan_period_end_date", "description": "The end date of the disbursement plan period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "academic_pay_setup_data_disbursement_plan_period_start_date": {"name": "academic_pay_setup_data_disbursement_plan_period_start_date", "description": "The start date of the disbursement plan period in academic pay setup data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_display_language": {"name": "business_site_summary_display_language", "description": "The display language of the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_local": {"name": "business_site_summary_local", "description": "Local information related to the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_location": {"name": "business_site_summary_location", "description": "The location of the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_location_type": {"name": "business_site_summary_location_type", "description": "The type of location for the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_name": {"name": "business_site_summary_name", "description": "The name associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_scheduled_weekly_hours": {"name": "business_site_summary_scheduled_weekly_hours", "description": "The scheduled weekly hours associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_site_summary_time_profile": {"name": "business_site_summary_time_profile", "description": "The time profile associated with the business site summary.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_title": {"name": "business_title", "description": "The business title associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "critical_job": {"name": "critical_job", "description": "Flag indicating whether the job is critical.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_weekly_hours": {"name": "default_weekly_hours", "description": "The default weekly hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "difficulty_to_fill": {"name": "difficulty_to_fill", "description": "Indication of the difficulty level in filling the job.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "Date when the job profile becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_type": {"name": "employee_type", "description": "The type of employee associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "The end date of the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_employment_date": {"name": "end_employment_date", "description": "Date when the worker's employment is scheduled to end.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_from_head_count": {"name": "exclude_from_head_count", "description": "Flag indicating whether the position is excluded from headcount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_assignment_end_date": {"name": "expected_assignment_end_date", "description": "The expected end date of the assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "external_employee": {"name": "external_employee", "description": "Flag indicating whether the worker is an external employee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "federal_withholding_fein": {"name": "federal_withholding_fein", "description": "The Federal Employer Identification Number (FEIN) for federal withholding.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "frequency": {"name": "frequency", "description": "The frequency associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_time_equivalent_percentage": {"name": "full_time_equivalent_percentage", "description": "The full-time equivalent (FTE) percentage associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "headcount_restriction_code": {"name": "headcount_restriction_code", "description": "The code associated with headcount restriction for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_country": {"name": "home_country", "description": "The home country of the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "host_country": {"name": "host_country", "description": "The host country associated with the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "international_assignment_type": {"name": "international_assignment_type", "description": "The type of international assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_primary_job": {"name": "is_primary_job", "description": "Flag indicating whether the job is the primary job for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_exempt": {"name": "job_exempt", "description": "Indicates whether the job is exempt from certain regulations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "job_profile_id": {"name": "job_profile_id", "description": "Identifier for the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "management_level_code": {"name": "management_level_code", "description": "Code indicating the management level associated with the job profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_fte": {"name": "paid_fte", "description": "The paid full-time equivalent (FTE) associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_group": {"name": "pay_group", "description": "The pay group associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_rate": {"name": "pay_rate", "description": "The pay rate associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_rate_type": {"name": "pay_rate_type", "description": "The type of pay rate associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pay_through_date": {"name": "pay_through_date", "description": "The date through which the worker is paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payroll_entity": {"name": "payroll_entity", "description": "The payroll entity associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payroll_file_number": {"name": "payroll_file_number", "description": "The file number associated with payroll for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "regular_paid_equivalent_hours": {"name": "regular_paid_equivalent_hours", "description": "The regular paid equivalent hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scheduled_weekly_hours": {"name": "scheduled_weekly_hours", "description": "The scheduled weekly hours associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specify_paid_fte": {"name": "specify_paid_fte", "description": "Flag indicating whether to specify paid FTE for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specify_working_fte": {"name": "specify_working_fte", "description": "Flag indicating whether to specify working FTE for the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_international_assignment_reason": {"name": "start_international_assignment_reason", "description": "The reason for starting an international assignment associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_hours_profile": {"name": "work_hours_profile", "description": "The work hours profile associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift": {"name": "work_shift", "description": "The work shift associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_shift_required": {"name": "work_shift_required", "description": "Flag indicating whether a work shift is required.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_space": {"name": "work_space", "description": "The work space associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_hours_profile_classification": {"name": "worker_hours_profile_classification", "description": "The classification of worker hours profile associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_fte": {"name": "working_fte", "description": "The working full-time equivalent (FTE) associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_frequency": {"name": "working_time_frequency", "description": "The frequency of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_unit": {"name": "working_time_unit", "description": "The unit of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "working_time_value": {"name": "working_time_value", "description": "The value of working time associated with the worker position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`worker_position_history`", "created_at": 1708457909.7564669}, "source.workday.workday.worker_leave_status": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "worker_leave_status", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.worker_leave_status", "fqn": ["workday", "staging", "workday", "worker_leave_status"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "worker_leave_status", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Represents the leave status of workers in the Workday system.", "columns": {"leave_request_event_id": {"name": "leave_request_event_id", "description": "The unique identifier for the leave request event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Indicates if the record was soft-deleted by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adoption_notification_date": {"name": "adoption_notification_date", "description": "The date of adoption notification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adoption_placement_date": {"name": "adoption_placement_date", "description": "The date of adoption placement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age_of_dependent": {"name": "age_of_dependent", "description": "The age of the dependent associated with the leave status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "benefits_effect": {"name": "benefits_effect", "description": "The effect of leave on benefits.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "caesarean_section_birth": {"name": "caesarean_section_birth", "description": "Indicator for Caesarean section birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_birth_date": {"name": "child_birth_date", "description": "The date of child birth.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "child_sdate_of_death": {"name": "child_sdate_of_death", "description": "The start date of child death.>", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "continuous_service_accrual_effect": {"name": "continuous_service_accrual_effect", "description": "The effect of leave on continuous service accrual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_baby_arrived_home_from_hospital": {"name": "date_baby_arrived_home_from_hospital", "description": "The date when the baby arrived home from the hospital.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_child_entered_country": {"name": "date_child_entered_country", "description": "The date when the child entered the country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_recall": {"name": "date_of_recall", "description": "The date of recall.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the type of leave", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "estimated_leave_end_date": {"name": "estimated_leave_end_date", "description": "The estimated end date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expected_due_date": {"name": "expected_due_date", "description": "The expected due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_day_of_work": {"name": "first_day_of_work", "description": "The date when the worker started their first day of work.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_date_for_which_paid": {"name": "last_date_for_which_paid", "description": "The last date being paid before leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_end_date": {"name": "leave_end_date", "description": "The end date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_entitlement_override": {"name": "leave_entitlement_override", "description": "Override for leave entitlement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_last_day_of_work": {"name": "leave_last_day_of_work", "description": "The last day of work associated with the leave status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_of_absence_type": {"name": "leave_of_absence_type", "description": "The type of leave of absence.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_percentage": {"name": "leave_percentage", "description": "The percentage of leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_return_event": {"name": "leave_return_event", "description": "The event associated with the return from leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_start_date": {"name": "leave_start_date", "description": "The start date of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_status_code": {"name": "leave_status_code", "description": "The code indicating the status of the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "leave_type_reason": {"name": "leave_type_reason", "description": "The reason for the leave type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_during_leave": {"name": "location_during_leave", "description": "The location during the leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "multiple_child_indicator": {"name": "multiple_child_indicator", "description": "Indicator for multiple children.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_babies_adopted_children": {"name": "number_of_babies_adopted_children", "description": "The number of babies adopted by the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_child_dependents": {"name": "number_of_child_dependents", "description": "The number of child dependents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_previous_births": {"name": "number_of_previous_births", "description": "The number of previous births.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_previous_maternity_leaves": {"name": "number_of_previous_maternity_leaves", "description": "The number of previous maternity leaves.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "on_leave": {"name": "on_leave", "description": "Indicator for whether the worker is on leave.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_time_off_accrual_effect": {"name": "paid_time_off_accrual_effect", "description": "The effect of leave on paid time off accrual.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payroll_effect": {"name": "payroll_effect", "description": "The effect of leave on payroll.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "single_parent_indicator": {"name": "single_parent_indicator", "description": "Indicator for a single parent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "social_security_disability_code": {"name": "social_security_disability_code", "description": "The code indicating social security disability.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stock_vesting_effect": {"name": "stock_vesting_effect", "description": "The effect of leave on stock vesting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "stop_payment_date": {"name": "stop_payment_date", "description": "The date when stop payment occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "week_of_confinement": {"name": "week_of_confinement", "description": "Indicator for whether the leave is work-related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_related": {"name": "work_related", "description": "Indicator for whether the leave is work-related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`worker_leave_status`", "created_at": 1708457909.756905}, "source.workday.workday.worker_position_organization_history": {"database": "singular-vector-135519", "schema": "erin_workday_hcm_ga", "name": "worker_position_organization_history", "resource_type": "source", "package_name": "workday", "path": "models/staging/src_workday.yml", "original_file_path": "models/staging/src_workday.yml", "unique_id": "source.workday.workday.worker_position_organization_history", "fqn": ["workday", "staging", "workday", "worker_position_organization_history"], "source_name": "workday", "source_description": "", "loader": "", "identifier": "worker_position_organization_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ties together workers to the positions and organizations they hold in the Workday system.", "columns": {"source_relation": {"name": "source_relation", "description": "The record's source if the unioning functionality is used. Otherwise this field will be empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "Identifier for the specific position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Unique identifier for the worker.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "TRUE if it is the currently active record. FALSE if it is a historical version of the record. Only one version of the record can be TRUE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "Timestamp when the record was first created or modified in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "Timestamp marking the end of a record being active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp the record was synced by Fivetran.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "An index for a particular identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_of_pay_group_assignment": {"name": "date_of_pay_group_assignment", "description": "Date a group's pay is assigned to be processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Identifier for the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_business_site": {"name": "primary_business_site", "description": "Primary location a worker's business is situated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_used_in_change_organization_assignments": {"name": "is_used_in_change_organization_assignments", "description": "If a worker has opted to change these organization assignments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`singular-vector-135519`.`erin_workday_hcm_ga`.`worker_position_organization_history`", "created_at": 1708457909.757199}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.4695702, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.470342, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.471402, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.480615, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.4933271, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.49471, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.495865, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.4966831, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.502552, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5033941, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.504885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.505337, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.505953, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5065029, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.506999, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.507657, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5082629, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.509126, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.509629, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.510119, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5113358, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5124722, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5148008, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5156732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.516659, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.517638, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.518145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.520975, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.522482, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5250702, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5337112, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.534573, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5382469, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.543254, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.544107, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.546292, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.548157, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5594711, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.560534, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5609658, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.561343, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.561933, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5622962, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5644522, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5656488, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.571094, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.574333, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.575818, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5783849, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5800488, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.583808, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.586904, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5880141, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5886989, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.590527, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5914738, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5917819, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.592448, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.592872, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.593357, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.593573, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.593846, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.594335, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.596204, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5978408, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.598308, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.5995672, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6001549, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.601121, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6023521, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.602803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.60349, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.604394, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.604885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.605263, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.606961, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6074922, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6082828, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6088269, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.610274, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.610919, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6115541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.612158, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.614631, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6151512, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6156118, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.61602, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.616472, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.61745, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.618762, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6197991, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.620846, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6215591, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6293912, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6298869, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.630503, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.632447, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.632894, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.633354, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6372201, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6407611, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6477408, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.648522, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.64899, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.649261, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6496708, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.650007, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6507719, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6531441, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.653701, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.654382, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6555111, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.669801, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.675105, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6762109, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.67704, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.677938, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.678962, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.682244, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.683908, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.6856499, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.686365, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.688597, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.699421, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7038789, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.704603, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.707325, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.708044, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.709641, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7111669, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.712966, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7135842, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7140899, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.714866, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.715364, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.716192, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.716939, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7176802, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.718242, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.719052, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.719845, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.731812, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.741847, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.745044, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.748225, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7509718, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.760544, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.761556, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7622101, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7659972, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.766643, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.768343, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.769409, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.769821, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.770984, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7714849, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.772245, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.772616, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.773634, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.774139, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.774838, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.775161, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.77567, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7761369, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7768488, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.777198, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.784477, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.786625, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.786967, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.788358, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.789004, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.789471, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.792882, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7941508, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.7951329, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8022668, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.804137, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.804641, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.806026, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.807971, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.809237, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.809767, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.810265, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.817368, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.818625, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.81926, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.823232, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.82426, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.824702, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.825183, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8262951, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.834273, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.842975, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8453271, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.845939, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.847399, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8479319, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.848303, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.848686, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8490171, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.849458, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.849797, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.851156, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8516638, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.855009, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8563159, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8574238, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.858633, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.859346, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.860111, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8610518, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8617349, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.862554, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8633149, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8639371, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.865324, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8693278, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.871088, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.871958, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.875606, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.879196, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8814158, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.882071, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.882731, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.882976, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.88412, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8846111, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.885261, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.885618, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.886273, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8865988, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.887518, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.887994, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.88859, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.88882, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.889527, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.889947, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.890708, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.891083, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8924391, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.8935099, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.894329, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.89479, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.896126, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.896526, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.897182, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.89763, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.898249, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.898676, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.899429, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.899741, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.900578, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.901071, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.901811, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.902105, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.904188, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.904613, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9051242, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.905659, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.906197, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.90671, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.907516, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9080598, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.908514, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.908936, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9095721, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9099789, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.910422, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9108229, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.91155, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.911923, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.912575, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9128692, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.913713, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.914477, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.914886, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.916325, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.916818, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.917949, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.918742, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.919123, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.920097, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.92077, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9215, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.922187, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9233239, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.923877, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9243362, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.924851, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.926147, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.926591, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.926998, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.927302, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9277701, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.927995, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9284549, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.928923, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.93075, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9311612, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9316669, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.932896, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.933442, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.933834, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.93435, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9347332, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9403698, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9408908, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9415529, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.942417, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.943112, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.944222, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9447591, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.945187, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9457521, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.946622, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9473238, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9488661, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9498398, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.95052, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.951081, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9521, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.953332, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.954071, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.954705, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.958431, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.958776, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9592378, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.95957, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.960469, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9609668, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.96125, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9618402, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.962346, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.963135, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9636428, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9642398, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.966472, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9670668, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9679842, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.96895, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.972049, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.97357, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.974056, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9746182, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9751081, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.975845, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.977419, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.980596, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9815302, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.982177, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.982795, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.983757, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.98458, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.985211, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9862761, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9868858, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9877, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.989844, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9912288, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.991776, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.992104, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.992633, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.992956, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.993492, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.993824, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.9984598, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457905.998983, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.000392, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.001077, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.00172, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0022678, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.004446, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.005429, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0059662, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.007044, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.008107, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0096881, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0103738, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0124469, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.015543, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.016137, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.018594, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.019673, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.021324, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.022659, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.022902, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0241, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.024742, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.025509, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.026251, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.027196, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0284328, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.029543, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.03113, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0319118, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.032767, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.03483, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.037694, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.039554, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0423849, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.043828, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.044717, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.046274, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.04844, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.049634, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.050905, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.052417, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.053728, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.055087, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.056295, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0578308, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0599391, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.061289, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.062965, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.064138, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0650308, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.065977, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.067174, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.069056, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.071275, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.073199, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.075577, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.077141, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0794308, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.080539, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.0813131, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.087845, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.091918, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.092722, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.093179, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.094285, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.094976, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.095486, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.096116, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.096631, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.098273, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.100252, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1018019, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1036181, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.104254, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.105196, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.106107, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1075299, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.108305, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.109217, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.110702, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.11293, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1146162, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.115686, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.116734, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.118402, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.120074, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.12232, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.123592, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.124348, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.127025, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1310232, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.133708, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.138334, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.139141, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1395159, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.145231, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1563919, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1574268, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.158151, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.159699, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.16027, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.160804, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.161328, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.161783, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.162247, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.163181, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1638038, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.164852, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1664371, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.16747, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.168519, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.172748, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.173868, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1768682, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.178761, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1819808, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1908128, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.1938019, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.196446, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.197886, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.200325, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.202423, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.204125, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2048059, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2060008, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.207938, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2091782, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.211582, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.213186, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.213695, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.214278, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.214725, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2160609, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2202911, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2243268, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.225278, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.227499, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.230331, "supported_languages": null}, "macro.workday.get_person_contact_email_address_columns": {"name": "get_person_contact_email_address_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_person_contact_email_address_columns.sql", "original_file_path": "macros/get_person_contact_email_address_columns.sql", "unique_id": "macro.workday.get_person_contact_email_address_columns", "macro_sql": "{% macro get_person_contact_email_address_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email_comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"personal_info_system_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.233349, "supported_languages": null}, "macro.workday.get_military_service_columns": {"name": "get_military_service_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_military_service_columns.sql", "original_file_path": "macros/get_military_service_columns.sql", "unique_id": "macro.workday.get_military_service_columns", "macro_sql": "{% macro get_military_service_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"discharge_date\", \"datatype\": \"date\"},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"personal_info_system_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rank\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status_begin_date\", \"datatype\": \"date\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.236862, "supported_languages": null}, "macro.workday.get_position_job_profile_columns": {"name": "get_position_job_profile_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_position_job_profile_columns.sql", "original_file_path": "macros/get_position_job_profile_columns.sql", "unique_id": "macro.workday.get_position_job_profile_columns", "macro_sql": "{% macro get_position_job_profile_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"difficulty_to_fill_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_critical_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_category_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_profile_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"management_level_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_shift_required\", \"datatype\": dbt.type_boolean()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2402828, "supported_languages": null}, "macro.workday.get_job_family_job_family_group_columns": {"name": "get_job_family_job_family_group_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_job_family_job_family_group_columns.sql", "original_file_path": "macros/get_job_family_job_family_group_columns.sql", "unique_id": "macro.workday.get_job_family_job_family_group_columns", "macro_sql": "{% macro get_job_family_job_family_group_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"job_family_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_family_group_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2420511, "supported_languages": null}, "macro.workday.get_worker_history_columns": {"name": "get_worker_history_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_worker_history_columns.sql", "original_file_path": "macros/get_worker_history_columns.sql", "unique_id": "macro.workday.get_worker_history_columns", "macro_sql": "{% macro get_worker_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"academic_tenure_date\", \"datatype\": \"date\"},\n    {\"name\": \"active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"active_status_date\", \"datatype\": \"date\"},\n    {\"name\": \"annual_currency_summary_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"annual_currency_summary_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"annual_currency_summary_primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"annual_currency_summary_total_base_pay\", \"datatype\": dbt.type_float()},\n    {\"name\": \"annual_currency_summary_total_salary_and_allowances\", \"datatype\": dbt.type_float()},\n    {\"name\": \"annual_summary_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"annual_summary_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"annual_summary_primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"annual_summary_total_base_pay\", \"datatype\": dbt.type_float()},\n    {\"name\": \"annual_summary_total_salary_and_allowances\", \"datatype\": dbt.type_float()},\n    {\"name\": \"benefits_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"company_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"compensation_effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"compensation_grade_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_grade_profile_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"continuous_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"contract_assignment_details\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_currency_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"contract_frequency_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_pay_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"contract_vendor_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_entered_workforce\", \"datatype\": \"date\"},\n    {\"name\": \"days_unemployed\", \"datatype\": dbt.type_float()},\n    {\"name\": \"eligible_for_hire\", \"datatype\": dbt.type_string()},\n    {\"name\": \"eligible_for_rehire_on_latest_termination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_compensation_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_compensation_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"employee_compensation_primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"employee_compensation_total_base_pay\", \"datatype\": dbt.type_float()},\n    {\"name\": \"employee_compensation_total_salary_and_allowances\", \"datatype\": dbt.type_float()},\n    {\"name\": \"end_employment_date\", \"datatype\": \"date\"},\n    {\"name\": \"expected_date_of_return\", \"datatype\": \"date\"},\n    {\"name\": \"expected_retirement_date\", \"datatype\": \"date\"},\n    {\"name\": \"first_day_of_work\", \"datatype\": \"date\"},\n    {\"name\": \"has_international_assignment\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"hire_date\", \"datatype\": \"date\"},\n    {\"name\": \"hire_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hire_rescinded\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"home_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hourly_frequency_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hourly_frequency_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hourly_frequency_primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"hourly_frequency_total_base_pay\", \"datatype\": dbt.type_float()},\n    {\"name\": \"hourly_frequency_total_salary_and_allowances\", \"datatype\": dbt.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_datefor_which_paid\", \"datatype\": \"date\"},\n    {\"name\": \"local_termination_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"months_continuous_prior_employment\", \"datatype\": dbt.type_float()},\n    {\"name\": \"not_returning\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"original_hire_date\", \"datatype\": \"date\"},\n    {\"name\": \"pay_group_frequency_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_group_frequency_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_group_frequency_primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pay_group_frequency_total_base_pay\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pay_group_frequency_total_salary_and_allowances\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pay_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"primary_termination_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_termination_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"probation_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"probation_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"reason_reference_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"regrettable_termination\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"rehire\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"resignation_date\", \"datatype\": \"date\"},\n    {\"name\": \"retired\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"retirement_date\", \"datatype\": \"date\"},\n    {\"name\": \"retirement_eligibility_date\", \"datatype\": \"date\"},\n    {\"name\": \"return_unknown\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"seniority_date\", \"datatype\": \"date\"},\n    {\"name\": \"severance_date\", \"datatype\": \"date\"},\n    {\"name\": \"terminated\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"termination_date\", \"datatype\": \"date\"},\n    {\"name\": \"termination_involuntary\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"termination_last_day_of_work\", \"datatype\": \"date\"},\n    {\"name\": \"time_off_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"universal_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vesting_date\", \"datatype\": \"date\"},\n    {\"name\": \"worker_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.270236, "supported_languages": null}, "macro.workday.get_job_family_group_columns": {"name": "get_job_family_group_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_job_family_group_columns.sql", "original_file_path": "macros/get_job_family_group_columns.sql", "unique_id": "macro.workday.get_job_family_group_columns", "macro_sql": "{% macro get_job_family_group_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inactive\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_family_group_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"summary\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2728052, "supported_languages": null}, "macro.workday.get_worker_leave_status_columns": {"name": "get_worker_leave_status_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_worker_leave_status_columns.sql", "original_file_path": "macros/get_worker_leave_status_columns.sql", "unique_id": "macro.workday.get_worker_leave_status_columns", "macro_sql": "{% macro get_worker_leave_status_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"adoption_notification_date\", \"datatype\": \"date\"},\n    {\"name\": \"adoption_placement_date\", \"datatype\": \"date\"},\n    {\"name\": \"age_of_dependent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"benefits_effect\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"caesarean_section_birth\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"child_birth_date\", \"datatype\": \"date\"},\n    {\"name\": \"child_sdate_of_death\", \"datatype\": \"date\"},\n    {\"name\": \"continuous_service_accrual_effect\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"date_baby_arrived_home_from_hospital\", \"datatype\": \"date\"},\n    {\"name\": \"date_child_entered_country\", \"datatype\": \"date\"},\n    {\"name\": \"date_of_recall\", \"datatype\": \"date\"},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"estimated_leave_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"expected_due_date\", \"datatype\": \"date\"},\n    {\"name\": \"first_day_of_work\", \"datatype\": \"date\"},\n    {\"name\": \"last_date_for_which_paid\", \"datatype\": \"date\"},\n    {\"name\": \"leave_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"leave_entitlement_override\", \"datatype\": dbt.type_float()},\n    {\"name\": \"leave_last_day_of_work\", \"datatype\": \"date\"},\n    {\"name\": \"leave_of_absence_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"leave_percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"leave_request_event_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"leave_return_event\", \"datatype\": dbt.type_string()},\n    {\"name\": \"leave_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"leave_status_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"leave_type_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_during_leave\", \"datatype\": dbt.type_string()},\n    {\"name\": \"multiple_child_indicator\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"number_of_babies_adopted_children\", \"datatype\": dbt.type_float()},\n    {\"name\": \"number_of_child_dependents\", \"datatype\": dbt.type_float()},\n    {\"name\": \"number_of_previous_births\", \"datatype\": dbt.type_float()},\n    {\"name\": \"number_of_previous_maternity_leaves\", \"datatype\": dbt.type_float()},\n    {\"name\": \"on_leave\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"paid_time_off_accrual_effect\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"payroll_effect\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"single_parent_indicator\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"social_security_disability_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"stock_vesting_effect\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"stop_payment_date\", \"datatype\": \"date\"},\n    {\"name\": \"week_of_confinement\", \"datatype\": \"date\"},\n    {\"name\": \"work_related\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"worker_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.2850401, "supported_languages": null}, "macro.workday.get_organization_role_worker_columns": {"name": "get_organization_role_worker_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_organization_role_worker_columns.sql", "original_file_path": "macros/get_organization_role_worker_columns.sql", "unique_id": "macro.workday.get_organization_role_worker_columns", "macro_sql": "{% macro get_organization_role_worker_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"associated_worker_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"role_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.286963, "supported_languages": null}, "macro.workday.get_job_profile_columns": {"name": "get_job_profile_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_job_profile_columns.sql", "original_file_path": "macros/get_job_profile_columns.sql", "unique_id": "macro.workday.get_job_profile_columns", "macro_sql": "{% macro get_job_profile_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"additional_job_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_grade_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"critical_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"difficulty_to_fill\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inactive\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"include_job_code_in_name\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_category_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_profile_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"management_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"private_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"public_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"referral_payment_plan\", \"datatype\": dbt.type_string()},\n    {\"name\": \"summary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"union_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"union_membership_requirement\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_shift_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"work_study_award_source_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_study_requirement_option_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.294027, "supported_languages": null}, "macro.workday.get_organization_role_columns": {"name": "get_organization_role_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_organization_role_columns.sql", "original_file_path": "macros/get_organization_role_columns.sql", "unique_id": "macro.workday.get_organization_role_columns", "macro_sql": "{% macro get_organization_role_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_role_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"role_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.295809, "supported_languages": null}, "macro.workday.get_person_name_columns": {"name": "get_person_name_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_person_name_columns.sql", "original_file_path": "macros/get_person_name_columns.sql", "unique_id": "macro.workday.get_person_name_columns", "macro_sql": "{% macro get_person_name_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"academic_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"additional_name_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_name_singapore_malaysia\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hereditary_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"honorary_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_first_name_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_last_name_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_middle_name_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_secondary_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"local_secondary_last_name_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"personal_info_system_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prefix_salutation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prefix_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"prefix_title_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"professional_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"religious_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"royal_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"secondary_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"social_suffix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"social_suffix_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tertiary_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3055182, "supported_languages": null}, "macro.workday.get_job_family_job_profile_columns": {"name": "get_job_family_job_profile_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_job_family_job_profile_columns.sql", "original_file_path": "macros/get_job_family_job_profile_columns.sql", "unique_id": "macro.workday.get_job_family_job_profile_columns", "macro_sql": "{% macro get_job_family_job_profile_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"job_family_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_profile_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.307192, "supported_languages": null}, "macro.workday.get_worker_position_history_columns": {"name": "get_worker_position_history_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_worker_position_history_columns.sql", "original_file_path": "macros/get_worker_position_history_columns.sql", "unique_id": "macro.workday.get_worker_position_history_columns", "macro_sql": "{% macro get_worker_position_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"academic_pay_setup_data_annual_work_period_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"academic_pay_setup_data_annual_work_period_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"academic_pay_setup_data_annual_work_period_work_percent_of_year\", \"datatype\": dbt.type_float()},\n    {\"name\": \"academic_pay_setup_data_disbursement_plan_period_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"academic_pay_setup_data_disbursement_plan_period_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"business_site_summary_display_language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_site_summary_local\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_site_summary_location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_site_summary_location_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_site_summary_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_site_summary_scheduled_weekly_hours\", \"datatype\": dbt.type_float()},\n    {\"name\": \"business_site_summary_time_profile\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"critical_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"default_weekly_hours\", \"datatype\": dbt.type_float()},\n    {\"name\": \"difficulty_to_fill\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"employee_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"end_date\", \"datatype\": \"date\"},\n    {\"name\": \"end_employment_date\", \"datatype\": \"date\"},\n    {\"name\": \"exclude_from_head_count\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"expected_assignment_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"external_employee\", \"datatype\": dbt.type_string()},\n    {\"name\": \"federal_withholding_fein\", \"datatype\": dbt.type_string()},\n    {\"name\": \"frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"full_time_equivalent_percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"headcount_restriction_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"home_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"host_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"international_assignment_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_primary_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_exempt\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_profile_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"management_level_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paid_fte\", \"datatype\": dbt.type_float()},\n    {\"name\": \"pay_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_rate\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_rate_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pay_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"payroll_entity\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payroll_file_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"regular_paid_equivalent_hours\", \"datatype\": dbt.type_float()},\n    {\"name\": \"scheduled_weekly_hours\", \"datatype\": dbt.type_float()},\n    {\"name\": \"specify_paid_fte\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"specify_working_fte\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"start_date\", \"datatype\": \"date\"},\n    {\"name\": \"start_international_assignment_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_hours_profile\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_shift\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_shift_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"work_space\", \"datatype\": dbt.type_string()},\n    {\"name\": \"worker_hours_profile_classification\", \"datatype\": dbt.type_string()},\n    {\"name\": \"worker_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"working_fte\", \"datatype\": dbt.type_float()},\n    {\"name\": \"working_time_frequency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"working_time_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"working_time_value\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.327086, "supported_languages": null}, "macro.workday.get_personal_information_ethnicity_columns": {"name": "get_personal_information_ethnicity_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_personal_information_ethnicity_columns.sql", "original_file_path": "macros/get_personal_information_ethnicity_columns.sql", "unique_id": "macro.workday.get_personal_information_ethnicity_columns", "macro_sql": "{% macro get_personal_information_ethnicity_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ethnicity_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ethnicity_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"personal_info_system_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3295941, "supported_languages": null}, "macro.workday.get_personal_information_history_columns": {"name": "get_personal_information_history_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_personal_information_history_columns.sql", "original_file_path": "macros/get_personal_information_history_columns.sql", "unique_id": "macro.workday.get_personal_information_history_columns", "macro_sql": "{% macro get_personal_information_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"additional_nationality\", \"datatype\": dbt.type_string()},\n    {\"name\": \"blood_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"citizenship_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city_of_birth\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city_of_birth_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country_of_birth\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_of_birth\", \"datatype\": \"date\"},\n    {\"name\": \"date_of_death\", \"datatype\": \"date\"},\n    {\"name\": \"gender\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hispanic_or_latino\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"hukou_locality\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hukou_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hukou_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hukou_subregion\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hukou_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_medical_exam_date\", \"datatype\": \"date\"},\n    {\"name\": \"last_medical_exam_valid_to\", \"datatype\": \"date\"},\n    {\"name\": \"local_hukou\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"marital_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"marital_status_date\", \"datatype\": \"date\"},\n    {\"name\": \"medical_exam_notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"native_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"native_region_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"personnel_file_agency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"political_affiliation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_nationality\", \"datatype\": dbt.type_string()},\n    {\"name\": \"region_of_birth\", \"datatype\": dbt.type_string()},\n    {\"name\": \"region_of_birth_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"religion\", \"datatype\": dbt.type_string()},\n    {\"name\": \"social_benefit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tobacco_use\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.340922, "supported_languages": null}, "macro.workday.get_worker_position_organization_history_columns": {"name": "get_worker_position_organization_history_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_worker_position_organization_history_columns.sql", "original_file_path": "macros/get_worker_position_organization_history_columns.sql", "unique_id": "macro.workday.get_worker_position_organization_history_columns", "macro_sql": "{% macro get_worker_position_organization_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"worker_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date_of_pay_group_assignment\", \"datatype\": \"date\"},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_business_site\", \"datatype\": dbt.type_string()},\n    {\"name\": \"used_in_change_organization_assignments\", \"datatype\": dbt.type_boolean()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.344408, "supported_languages": null}, "macro.workday.get_organization_job_family_columns": {"name": "get_organization_job_family_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_organization_job_family_columns.sql", "original_file_path": "macros/get_organization_job_family_columns.sql", "unique_id": "macro.workday.get_organization_job_family_columns", "macro_sql": "{% macro get_organization_job_family_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"job_family_group_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_family_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.346228, "supported_languages": null}, "macro.workday.get_job_family_columns": {"name": "get_job_family_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_job_family_columns.sql", "original_file_path": "macros/get_job_family_columns.sql", "unique_id": "macro.workday.get_job_family_columns", "macro_sql": "{% macro get_job_family_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inactive\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"job_family_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"summary\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.348653, "supported_languages": null}, "macro.workday.get_organization_columns": {"name": "get_organization_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_organization_columns.sql", "original_file_path": "macros/get_organization_columns.sql", "unique_id": "macro.workday.get_organization_columns", "macro_sql": "{% macro get_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"availability_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"available_for_hire\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"external_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hiring_freeze\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"inactive\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"inactive_date\", \"datatype\": \"date\"},\n    {\"name\": \"include_manager_in_name\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"include_organization_code_in_name\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"last_updated_date_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"location\", \"datatype\": dbt.type_string()},\n    {\"name\": \"manager_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"staffing_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"superior_organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supervisory_position_availability_date\", \"datatype\": \"date\"},\n    {\"name\": \"supervisory_position_earliest_hire_date\", \"datatype\": \"date\"},\n    {\"name\": \"supervisory_position_time_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"supervisory_position_worker_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"top_level_organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"visibility\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.356432, "supported_languages": null}, "macro.workday.get_position_organization_columns": {"name": "get_position_organization_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_position_organization_columns.sql", "original_file_path": "macros/get_position_organization_columns.sql", "unique_id": "macro.workday.get_position_organization_columns", "macro_sql": "{% macro get_position_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.358349, "supported_languages": null}, "macro.workday.get_position_columns": {"name": "get_position_columns", "resource_type": "macro", "package_name": "workday", "path": "macros/get_position_columns.sql", "original_file_path": "macros/get_position_columns.sql", "unique_id": "macro.workday.get_position_columns", "macro_sql": "{% macro get_position_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"academic_tenure_eligible\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"availability_date\", \"datatype\": \"date\"},\n    {\"name\": \"available_for_hire\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"available_for_overlap\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"available_for_recruiting\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"closed\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"compensation_grade_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_grade_profile_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_package_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"compensation_step_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"critical_job\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"difficulty_to_fill_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"earliest_hire_date\", \"datatype\": \"date\"},\n    {\"name\": \"earliest_overlap_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"hiring_freeze\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_description_summary\", \"datatype\": dbt.type_string()},\n    {\"name\": \"job_posting_title\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"position_time_type_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"primary_compensation_basis\", \"datatype\": dbt.type_float()},\n    {\"name\": \"primary_compensation_basis_amount_change\", \"datatype\": dbt.type_float()},\n    {\"name\": \"primary_compensation_basis_percent_change\", \"datatype\": dbt.type_float()},\n    {\"name\": \"supervisory_organization_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_shift_required\", \"datatype\": dbt.type_boolean()},\n    {\"name\": \"worker_for_filled_position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"worker_position_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"worker_type_code\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.367477, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.368681, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.370996, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.371511, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.371962, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.372405, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.372799, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.373246, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.375221, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.376925, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.379516, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.380193, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.380984, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.381653, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.382297, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.38303, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.384049, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3847868, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.385579, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.385874, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.386278, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.38665, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3878138, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.389683, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3927848, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.39431, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3964102, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.397608, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.397983, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.398345, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3987, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.3991401, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.404981, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4055328, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4060018, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4065, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.411077, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.41295, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.413325, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.414103, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.414857, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.415463, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.415909, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.41627, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.416648, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.418041, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.419699, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4211771, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.421932, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4225512, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.423317, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.430412, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.454609, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.457267, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.459566, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.465188, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.471138, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.474448, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.474992, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.475574, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.476095, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.47661, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4771168, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.479166, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4848819, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.488469, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.489065, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4896052, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4901388, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.49069, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.491724, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4929018, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.493286, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.4936378, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.496991, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.501781, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5032032, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.507052, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.515297, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.531274, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5355918, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5366158, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.537236, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.538018, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.539096, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.53985, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.540729, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5411499, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5415812, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.542398, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.542749, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5430882, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.544255, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708457906.5454102, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.workday._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday._fivetran_deleted", "block_contents": "Indicates if the record was soft-deleted by Fivetran."}, "doc.workday._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday._fivetran_synced", "block_contents": "Timestamp the record was synced by Fivetran."}, "doc.workday._fivetran_start": {"name": "_fivetran_start", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday._fivetran_start", "block_contents": "Timestamp when the record was first created or modified in the source."}, "doc.workday._fivetran_end": {"name": "_fivetran_end", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday._fivetran_end", "block_contents": "Timestamp marking the end of a record being active."}, "doc.workday._fivetran_active": {"name": "_fivetran_active", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday._fivetran_active", "block_contents": "TRUE if it is the currently active record. FALSE if it is a historical version of the record. Only one version of the record can be TRUE."}, "doc.workday.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.source_relation", "block_contents": "The record's source if the unioning functionality is used. Otherwise this field will be empty."}, "doc.workday.academic_pay_setup_data_annual_work_period_end_date": {"name": "academic_pay_setup_data_annual_work_period_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_pay_setup_data_annual_work_period_end_date", "block_contents": "The end date of the annual work period in academic pay setup data."}, "doc.workday.academic_pay_setup_data_annual_work_period_start_date": {"name": "academic_pay_setup_data_annual_work_period_start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_pay_setup_data_annual_work_period_start_date", "block_contents": "The start date of the annual work period in academic pay setup data."}, "doc.workday.academic_pay_setup_data_annual_work_period_work_percent_of_year": {"name": "academic_pay_setup_data_annual_work_period_work_percent_of_year", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_pay_setup_data_annual_work_period_work_percent_of_year", "block_contents": "The work percentage of the year in the annual work period in academic pay setup data."}, "doc.workday.academic_pay_setup_data_disbursement_plan_period_end_date": {"name": "academic_pay_setup_data_disbursement_plan_period_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_pay_setup_data_disbursement_plan_period_end_date", "block_contents": "The end date of the disbursement plan period in academic pay setup data."}, "doc.workday.academic_pay_setup_data_disbursement_plan_period_start_date": {"name": "academic_pay_setup_data_disbursement_plan_period_start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_pay_setup_data_disbursement_plan_period_start_date", "block_contents": "The start date of the disbursement plan period in academic pay setup data."}, "doc.workday.academic_suffix": {"name": "academic_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_suffix", "block_contents": "The academic suffix, if applicable (e.g., PhD, MD)."}, "doc.workday.academic_tenure_date": {"name": "academic_tenure_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_tenure_date", "block_contents": "Date when academic tenure is achieved."}, "doc.workday.academic_tenure_eligible": {"name": "academic_tenure_eligible", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.academic_tenure_eligible", "block_contents": "Flag indicating whether the position is eligible for academic tenure."}, "doc.workday.active": {"name": "active", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.active", "block_contents": "Flag indicating the current active status of the worker."}, "doc.workday.active_status_date": {"name": "active_status_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.active_status_date", "block_contents": "Date when the active status was last updated."}, "doc.workday.additional_job_description": {"name": "additional_job_description", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.additional_job_description", "block_contents": "Additional details or information about the job."}, "doc.workday.additional_name_type": {"name": "additional_name_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.additional_name_type", "block_contents": "Additional type or category for the person name."}, "doc.workday.additional_nationality": {"name": "additional_nationality", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.additional_nationality", "block_contents": "Additional nationality associated with the individual."}, "doc.workday.adoption_notification_date": {"name": "adoption_notification_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.adoption_notification_date", "block_contents": "The date of adoption notification."}, "doc.workday.adoption_placement_date": {"name": "adoption_placement_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.adoption_placement_date", "block_contents": "The date of adoption placement."}, "doc.workday.age_of_dependent": {"name": "age_of_dependent", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.age_of_dependent", "block_contents": "The age of the dependent associated with the leave status."}, "doc.workday.annual_currency_summary_currency": {"name": "annual_currency_summary_currency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_currency_summary_currency", "block_contents": "Currency used for annual compensation summaries."}, "doc.workday.annual_currency_summary_frequency": {"name": "annual_currency_summary_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_currency_summary_frequency", "block_contents": "Frequency of currency for annual compensation summaries."}, "doc.workday.annual_currency_summary_primary_compensation_basis": {"name": "annual_currency_summary_primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_currency_summary_primary_compensation_basis", "block_contents": "Primary compensation basis used for annual compensation summaries."}, "doc.workday.annual_currency_summary_total_base_pay": {"name": "annual_currency_summary_total_base_pay", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_currency_summary_total_base_pay", "block_contents": "Total base pay in the currency for annual summaries."}, "doc.workday.annual_currency_summary_total_salary_and_allowances": {"name": "annual_currency_summary_total_salary_and_allowances", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_currency_summary_total_salary_and_allowances", "block_contents": "Total salary and allowances in the currency for annual summaries."}, "doc.workday.annual_summary_currency": {"name": "annual_summary_currency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_summary_currency", "block_contents": "Currency used for annual summaries."}, "doc.workday.annual_summary_frequency": {"name": "annual_summary_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_summary_frequency", "block_contents": "Frequency of currency for annual summaries."}, "doc.workday.annual_summary_primary_compensation_basis": {"name": "annual_summary_primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_summary_primary_compensation_basis", "block_contents": "Primary compensation basis used for annual summaries."}, "doc.workday.annual_summary_total_base_pay": {"name": "annual_summary_total_base_pay", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_summary_total_base_pay", "block_contents": "Total base pay in the currency for annual summaries."}, "doc.workday.annual_summary_total_salary_and_allowances": {"name": "annual_summary_total_salary_and_allowances", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.annual_summary_total_salary_and_allowances", "block_contents": "Total salary and allowances in the currency for annual summaries."}, "doc.workday.associated_worker_id": {"name": "associated_worker_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.associated_worker_id", "block_contents": "Identifier for the worker associated with the organization role."}, "doc.workday.availability_date": {"name": "availability_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.availability_date", "block_contents": "Date when the organization becomes available."}, "doc.workday.available_for_hire": {"name": "available_for_hire", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.available_for_hire", "block_contents": "Flag indicating whether the organization is available for hiring."}, "doc.workday.available_for_overlap": {"name": "available_for_overlap", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.available_for_overlap", "block_contents": "Flag indicating whether the position is available for overlap with other positions."}, "doc.workday.available_for_recruiting": {"name": "available_for_recruiting", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.available_for_recruiting", "block_contents": "Flag indicating whether the position is available for recruiting."}, "doc.workday.benefits_effect": {"name": "benefits_effect", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.benefits_effect", "block_contents": "The effect of leave on benefits."}, "doc.workday.benefits_service_date": {"name": "benefits_service_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.benefits_service_date", "block_contents": "Date when the worker's benefits service starts."}, "doc.workday.blood_type": {"name": "blood_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.blood_type", "block_contents": "The blood type of the individual."}, "doc.workday.business_site_summary_display_language": {"name": "business_site_summary_display_language", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_display_language", "block_contents": "The display language of the business site summary."}, "doc.workday.business_site_summary_local": {"name": "business_site_summary_local", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_local", "block_contents": "Local information related to the business site summary."}, "doc.workday.business_site_summary_location": {"name": "business_site_summary_location", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_location", "block_contents": "The location of the business site summary."}, "doc.workday.business_site_summary_location_type": {"name": "business_site_summary_location_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_location_type", "block_contents": "The type of location for the business site summary."}, "doc.workday.business_site_summary_name": {"name": "business_site_summary_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_name", "block_contents": "The name associated with the business site summary."}, "doc.workday.business_site_summary_scheduled_weekly_hours": {"name": "business_site_summary_scheduled_weekly_hours", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_scheduled_weekly_hours", "block_contents": "The scheduled weekly hours associated with the business site summary."}, "doc.workday.business_site_summary_time_profile": {"name": "business_site_summary_time_profile", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_site_summary_time_profile", "block_contents": "The time profile associated with the business site summary."}, "doc.workday.business_title": {"name": "business_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.business_title", "block_contents": "The business title associated with the worker position."}, "doc.workday.caesarean_section_birth": {"name": "caesarean_section_birth", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.caesarean_section_birth", "block_contents": "Indicator for Caesarean section birth."}, "doc.workday.child_birth_date": {"name": "child_birth_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.child_birth_date", "block_contents": "The date of child birth."}, "doc.workday.child_sdate_of_death": {"name": "child_sdate_of_death", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.child_sdate_of_death", "block_contents": "The start date of child death.>"}, "doc.workday.citizenship_status": {"name": "citizenship_status", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.citizenship_status", "block_contents": "The citizenship status of the individual."}, "doc.workday.city_of_birth": {"name": "city_of_birth", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.city_of_birth", "block_contents": "The city of birth of the individual."}, "doc.workday.city_of_birth_code": {"name": "city_of_birth_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.city_of_birth_code", "block_contents": "The city of birth code of the individual."}, "doc.workday.closed": {"name": "closed", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.closed", "block_contents": "Flag indicating whether the position is closed."}, "doc.workday.code": {"name": "code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.code", "block_contents": "Code assigned to the organization for reference and categorization."}, "doc.workday.company_service_date": {"name": "company_service_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.company_service_date", "block_contents": "Date when the worker's service with the company started."}, "doc.workday.compensation_effective_date": {"name": "compensation_effective_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_effective_date", "block_contents": "Effective date when changes to the worker's compensation take effect."}, "doc.workday.compensation_grade_code": {"name": "compensation_grade_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_grade_code", "block_contents": "Code associated with the compensation grade of the position."}, "doc.workday.compensation_grade_id": {"name": "compensation_grade_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_grade_id", "block_contents": "Identifier for the compensation grade."}, "doc.workday.compensation_grade_profile_code": {"name": "compensation_grade_profile_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_grade_profile_code", "block_contents": "Code associated with the compensation grade profile of the position."}, "doc.workday.compensation_grade_profile_id": {"name": "compensation_grade_profile_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_grade_profile_id", "block_contents": "Unique identifier for the compensation grade profile associated with the worker."}, "doc.workday.compensation_package_code": {"name": "compensation_package_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_package_code", "block_contents": "Code associated with the compensation package of the position."}, "doc.workday.compensation_step_code": {"name": "compensation_step_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.compensation_step_code", "block_contents": "Code associated with the compensation step of the position."}, "doc.workday.continuous_service_accrual_effect": {"name": "continuous_service_accrual_effect", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.continuous_service_accrual_effect", "block_contents": "The effect of leave on continuous service accrual."}, "doc.workday.continuous_service_date": {"name": "continuous_service_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.continuous_service_date", "block_contents": "Date when the worker's continuous service with the organization started."}, "doc.workday.contract_assignment_details": {"name": "contract_assignment_details", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_assignment_details", "block_contents": "Details of the worker's contract assignment."}, "doc.workday.contract_currency_code": {"name": "contract_currency_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_currency_code", "block_contents": "Currency code used for the worker's contract."}, "doc.workday.contract_end_date": {"name": "contract_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_end_date", "block_contents": "Date when the worker's contract is scheduled to end."}, "doc.workday.contract_frequency_name": {"name": "contract_frequency_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_frequency_name", "block_contents": "Frequency of payment for the worker's contract."}, "doc.workday.contract_pay_rate": {"name": "contract_pay_rate", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_pay_rate", "block_contents": "Pay rate associated with the worker's contract."}, "doc.workday.contract_vendor_name": {"name": "contract_vendor_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.contract_vendor_name", "block_contents": "Name of the vendor associated with the worker's contract."}, "doc.workday.country": {"name": "country", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.country", "block_contents": "The country associated with the person name."}, "doc.workday.country_of_birth": {"name": "country_of_birth", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.country_of_birth", "block_contents": "The country of birth of the individual."}, "doc.workday.critical_job": {"name": "critical_job", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.critical_job", "block_contents": "Flag indicating whether the job is critical."}, "doc.workday.date_baby_arrived_home_from_hospital": {"name": "date_baby_arrived_home_from_hospital", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_baby_arrived_home_from_hospital", "block_contents": "The date when the baby arrived home from the hospital."}, "doc.workday.date_child_entered_country": {"name": "date_child_entered_country", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_child_entered_country", "block_contents": "The date when the child entered the country."}, "doc.workday.date_entered_workforce": {"name": "date_entered_workforce", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_entered_workforce", "block_contents": "Date when the worker entered the workforce."}, "doc.workday.date_of_birth": {"name": "date_of_birth", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_of_birth", "block_contents": "The date of birth of the individual."}, "doc.workday.date_of_death": {"name": "date_of_death", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_of_death", "block_contents": "The date of death of the individual."}, "doc.workday.date_of_recall": {"name": "date_of_recall", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_of_recall", "block_contents": "The date of recall."}, "doc.workday.days_at_position": {"name": "days_at_position", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.days_at_position", "block_contents": "The number of days the worker has held their most recent position."}, "doc.workday.days_of_employment": {"name": "days_of_employment", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.days_of_employment", "block_contents": "Number of days employed by the worker."}, "doc.workday.days_unemployed": {"name": "days_unemployed", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.days_unemployed", "block_contents": "Number of days the worker has been unemployed."}, "doc.workday.default_weekly_hours": {"name": "default_weekly_hours", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.default_weekly_hours", "block_contents": "The default weekly hours associated with the worker position."}, "doc.workday.departure_date": {"name": "departure_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.departure_date", "block_contents": "The departure date for the employee."}, "doc.workday.difficulty_to_fill": {"name": "difficulty_to_fill", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.difficulty_to_fill", "block_contents": "Indication of the difficulty level in filling the job."}, "doc.workday.difficulty_to_fill_code": {"name": "difficulty_to_fill_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.difficulty_to_fill_code", "block_contents": "Code indicating the difficulty level in filling the position."}, "doc.workday.discharge_date": {"name": "discharge_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.discharge_date", "block_contents": "The date on which the individual was discharged from military service."}, "doc.workday.earliest_hire_date": {"name": "earliest_hire_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.earliest_hire_date", "block_contents": "Earliest date when the position can be filled."}, "doc.workday.earliest_overlap_date": {"name": "earliest_overlap_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.earliest_overlap_date", "block_contents": "Earliest date when the position can overlap with other positions."}, "doc.workday.effective_date": {"name": "effective_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.effective_date", "block_contents": "Date when the job profile becomes effective."}, "doc.workday.eligible_for_hire": {"name": "eligible_for_hire", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.eligible_for_hire", "block_contents": "Flag indicating whether the worker is eligible for hire."}, "doc.workday.eligible_for_rehire_on_latest_termination": {"name": "eligible_for_rehire_on_latest_termination", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.eligible_for_rehire_on_latest_termination", "block_contents": "Flag indicating whether the worker is eligible for rehire based on the latest termination."}, "doc.workday.email_address": {"name": "email_address", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.email_address", "block_contents": "The actual email address of the person."}, "doc.workday.email_code": {"name": "email_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.email_code", "block_contents": "A code or label associated with the type or purpose of the email address."}, "doc.workday.email_comment": {"name": "email_comment", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.email_comment", "block_contents": "Any additional comments or notes related to the email address."}, "doc.workday.employed_five_years": {"name": "employed_five_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employed_five_years", "block_contents": "Tracks whether a worker was employed at least five years."}, "doc.workday.employed_one_year": {"name": "employed_one_year", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employed_one_year", "block_contents": "Tracks whether a worker was employed at least one year."}, "doc.workday.employed_ten_years": {"name": "employed_ten_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employed_ten_years", "block_contents": "Tracks whether a worker was employed at least ten years."}, "doc.workday.employed_thirty_years": {"name": "employed_thirty_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employed_thirty_years", "block_contents": "Tracks whether a worker was employed at least thirty years."}, "doc.workday.employed_twenty_years": {"name": "employed_twenty_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employed_twenty_years", "block_contents": "Tracks whether a worker was employed at least twenty years."}, "doc.workday.employee_compensation_currency": {"name": "employee_compensation_currency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_compensation_currency", "block_contents": "Currency code used for the worker's employee compensation."}, "doc.workday.employee_compensation_frequency": {"name": "employee_compensation_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_compensation_frequency", "block_contents": "Frequency of payment for the worker's employee compensation."}, "doc.workday.employee_compensation_primary_compensation_basis": {"name": "employee_compensation_primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_compensation_primary_compensation_basis", "block_contents": "Primary compensation basis used for the worker's employee compensation."}, "doc.workday.employee_compensation_total_base_pay": {"name": "employee_compensation_total_base_pay", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_compensation_total_base_pay", "block_contents": "Total base pay for the worker's employee compensation."}, "doc.workday.employee_compensation_total_salary_and_allowances": {"name": "employee_compensation_total_salary_and_allowances", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_compensation_total_salary_and_allowances", "block_contents": "Total salary and allowances for the worker's employee compensation."}, "doc.workday.employee_type": {"name": "employee_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.employee_type", "block_contents": "The type of employee associated with the worker position."}, "doc.workday.end_date": {"name": "end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.end_date", "block_contents": "The end date of the worker position."}, "doc.workday.end_employment_date": {"name": "end_employment_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.end_employment_date", "block_contents": "Date when the worker's employment is scheduled to end."}, "doc.workday.estimated_leave_end_date": {"name": "estimated_leave_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.estimated_leave_end_date", "block_contents": "The estimated end date of the leave."}, "doc.workday.ethnicity_code": {"name": "ethnicity_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.ethnicity_code", "block_contents": "The code representing the ethnicity of the individual."}, "doc.workday.ethnicity_codes": {"name": "ethnicity_codes", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.ethnicity_codes", "block_contents": "String aggregation of all ethnicity codes associated with an individual."}, "doc.workday.ethnicity_id": {"name": "ethnicity_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.ethnicity_id", "block_contents": "The identifier associated with the ethnicity."}, "doc.workday.exclude_from_head_count": {"name": "exclude_from_head_count", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.exclude_from_head_count", "block_contents": "Flag indicating whether the position is excluded from headcount."}, "doc.workday.expected_assignment_end_date": {"name": "expected_assignment_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.expected_assignment_end_date", "block_contents": "The expected end date of the assignment associated with the worker position."}, "doc.workday.expected_date_of_return": {"name": "expected_date_of_return", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.expected_date_of_return", "block_contents": "Expected date of the worker's return."}, "doc.workday.expected_due_date": {"name": "expected_due_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.expected_due_date", "block_contents": "The expected due date."}, "doc.workday.expected_retirement_date": {"name": "expected_retirement_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.expected_retirement_date", "block_contents": "Expected date of the worker's retirement."}, "doc.workday.external_employee": {"name": "external_employee", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.external_employee", "block_contents": "Flag indicating whether the worker is an external employee."}, "doc.workday.external_url": {"name": "external_url", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.external_url", "block_contents": "External URL associated with the organization."}, "doc.workday.federal_withholding_fein": {"name": "federal_withholding_fein", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.federal_withholding_fein", "block_contents": "The Federal Employer Identification Number (FEIN) for federal withholding."}, "doc.workday.first_day_of_work": {"name": "first_day_of_work", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.first_day_of_work", "block_contents": "The date when the worker started their first day of work."}, "doc.workday.first_name": {"name": "first_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.first_name", "block_contents": "The first name of the individual."}, "doc.workday.frequency": {"name": "frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.frequency", "block_contents": "The frequency associated with the worker position."}, "doc.workday.fte_percent": {"name": "fte_percent", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.fte_percent", "block_contents": "The percentage of hours, the employee's scheduled hours divided by the employer's hours for a full-time workweek"}, "doc.workday.full_name_singapore_malaysia": {"name": "full_name_singapore_malaysia", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.full_name_singapore_malaysia", "block_contents": "The full name as used in Singapore and Malaysia."}, "doc.workday.full_time_equivalent_percentage": {"name": "full_time_equivalent_percentage", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.full_time_equivalent_percentage", "block_contents": "The full-time equivalent (FTE) percentage associated with the worker position."}, "doc.workday.gender": {"name": "gender", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.gender", "block_contents": "The gender of the individual."}, "doc.workday.has_international_assignment": {"name": "has_international_assignment", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.has_international_assignment", "block_contents": "Flag indicating whether the worker has an international assignment."}, "doc.workday.headcount_restriction_code": {"name": "headcount_restriction_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.headcount_restriction_code", "block_contents": "The code associated with headcount restriction for the worker position."}, "doc.workday.hereditary_suffix": {"name": "hereditary_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hereditary_suffix", "block_contents": "The hereditary suffix, if applicable (e.g., Jr, Sr)."}, "doc.workday.hire_date": {"name": "hire_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hire_date", "block_contents": "The date when the worker was hired."}, "doc.workday.hire_reason": {"name": "hire_reason", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hire_reason", "block_contents": "The reason for hiring the worker."}, "doc.workday.hire_rescinded": {"name": "hire_rescinded", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hire_rescinded", "block_contents": "Flag indicating whether the worker's hire was rescinded."}, "doc.workday.hiring_freeze": {"name": "hiring_freeze", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hiring_freeze", "block_contents": "Flag indicating whether the organization is under a hiring freeze."}, "doc.workday.hispanic_or_latino": {"name": "hispanic_or_latino", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hispanic_or_latino", "block_contents": "lag indicating whether the individual is Hispanic or Latino."}, "doc.workday.home_country": {"name": "home_country", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.home_country", "block_contents": "The home country of the worker."}, "doc.workday.honorary_suffix": {"name": "honorary_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.honorary_suffix", "block_contents": "The honorary suffix, if applicable."}, "doc.workday.host_country": {"name": "host_country", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.host_country", "block_contents": "The host country associated with the worker."}, "doc.workday.hourly_frequency_currency": {"name": "hourly_frequency_currency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hourly_frequency_currency", "block_contents": "Currency code used for the worker's hourly compensation."}, "doc.workday.hourly_frequency_frequency": {"name": "hourly_frequency_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hourly_frequency_frequency", "block_contents": "Frequency of payment for the worker's hourly compensation."}, "doc.workday.hourly_frequency_primary_compensation_basis": {"name": "hourly_frequency_primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hourly_frequency_primary_compensation_basis", "block_contents": "Primary compensation basis used for the worker's hourly compensation."}, "doc.workday.hourly_frequency_total_base_pay": {"name": "hourly_frequency_total_base_pay", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hourly_frequency_total_base_pay", "block_contents": "Total base pay for the worker's hourly compensation."}, "doc.workday.hourly_frequency_total_salary_and_allowances": {"name": "hourly_frequency_total_salary_and_allowances", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hourly_frequency_total_salary_and_allowances", "block_contents": "Total salary and allowances for the worker's hourly compensation."}, "doc.workday.hukou_locality": {"name": "hukou_locality", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hukou_locality", "block_contents": "The locality associated with the Hukou."}, "doc.workday.hukou_postal_code": {"name": "hukou_postal_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hukou_postal_code", "block_contents": "The postal code associated with the Hukou."}, "doc.workday.hukou_region": {"name": "hukou_region", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hukou_region", "block_contents": "The region associated with the Hukou."}, "doc.workday.hukou_subregion": {"name": "hukou_subregion", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hukou_subregion", "block_contents": "The subregion associated with the Hukou."}, "doc.workday.hukou_type": {"name": "hukou_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.hukou_type", "block_contents": "The type of Hukou."}, "doc.workday.id": {"name": "id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.id", "block_contents": "Unique identifier."}, "doc.workday.inactive": {"name": "inactive", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.inactive", "block_contents": "Flag indicating whether this is inactive."}, "doc.workday.inactive_date": {"name": "inactive_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.inactive_date", "block_contents": "Date when the organization becomes inactive"}, "doc.workday.include_job_code_in_name": {"name": "include_job_code_in_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.include_job_code_in_name", "block_contents": "Flag indicating whether to include the job code in the job profile name."}, "doc.workday.include_manager_in_name": {"name": "include_manager_in_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.include_manager_in_name", "block_contents": "Flag indicating whether to include the manager in the organization name."}, "doc.workday.include_organization_code_in_name": {"name": "include_organization_code_in_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.include_organization_code_in_name", "block_contents": "Flag indicating whether to include the organization code in the name."}, "doc.workday.index": {"name": "index", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.index", "block_contents": "An index for a particular identifier."}, "doc.workday.international_assignment_type": {"name": "international_assignment_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.international_assignment_type", "block_contents": "The type of international assignment associated with the worker position."}, "doc.workday.is_critical_job": {"name": "is_critical_job", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_critical_job", "block_contents": "Flag indicating whether the position is considered critical based on the job profile."}, "doc.workday.is_current_employee_five_years": {"name": "is_current_employee_five_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_current_employee_five_years", "block_contents": "Tracks whether a worker is active for more than five years."}, "doc.workday.is_current_employee_one_year": {"name": "is_current_employee_one_year", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_current_employee_one_year", "block_contents": "Tracks whether a worker is active for more than a year."}, "doc.workday.is_current_employee_ten_years": {"name": "is_current_employee_ten_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_current_employee_ten_years", "block_contents": "Tracks whether a worker is active for more than ten years."}, "doc.workday.is_current_employee_thirty_years": {"name": "is_current_employee_thirty_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_current_employee_thirty_years", "block_contents": "Tracks whether a worker is active for more than thirty years."}, "doc.workday.is_current_employee_twenty_years": {"name": "is_current_employee_twenty_years", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_current_employee_twenty_years", "block_contents": "Tracks whether a worker is active for more than twenty years."}, "doc.workday.is_employed": {"name": "is_employed", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_employed", "block_contents": "Is the worker currently employed?"}, "doc.workday.is_military_service": {"name": "is_military_service", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_military_service", "block_contents": "Whether the employee served in the military."}, "doc.workday.is_primary_job": {"name": "is_primary_job", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_primary_job", "block_contents": "Flag indicating whether the job is the primary job for the worker."}, "doc.workday.is_regrettable_termination": {"name": "is_regrettable_termination", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_regrettable_termination", "block_contents": "Has the worker been regrettably terminated?"}, "doc.workday.is_terminated": {"name": "is_terminated", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_terminated", "block_contents": "Has the worker been terminated?"}, "doc.workday.is_user_active": {"name": "is_user_active", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.is_user_active", "block_contents": "Is the user currently active."}, "doc.workday.job_category_code": {"name": "job_category_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_category_code", "block_contents": "Code indicating the category of the job profile associated with the position."}, "doc.workday.job_category_id": {"name": "job_category_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_category_id", "block_contents": "Identifier for the job category."}, "doc.workday.job_description": {"name": "job_description", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_description", "block_contents": "Detailed description of the job associated with the position."}, "doc.workday.job_description_summary": {"name": "job_description_summary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_description_summary", "block_contents": "Summary or overview of the job description for the position."}, "doc.workday.job_exempt": {"name": "job_exempt", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_exempt", "block_contents": "Indicates whether the job is exempt from certain regulations."}, "doc.workday.job_family": {"name": "job_family", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family", "block_contents": "Each record provides essential information about a specific job family, contributing to the organizational hierarchy and classification of roles."}, "doc.workday.job_family_code": {"name": "job_family_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_code", "block_contents": "Code assigned to the job family"}, "doc.workday.job_family_codes": {"name": "job_family_codes", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_codes", "block_contents": "String array of all job family codes assigned to a job profile."}, "doc.workday.job_family_group": {"name": "job_family_group", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group", "block_contents": "Each record corresponds to a specific group of related job families, providing an organizational structure for roles with similar characteristics."}, "doc.workday.job_family_group_code": {"name": "job_family_group_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group_code", "block_contents": "Code assigned to the job family group for reference and categorization."}, "doc.workday.job_family_group_codes": {"name": "job_family_group_codes", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group_codes", "block_contents": "String array of all job family group codes assigned to a job profile."}, "doc.workday.job_family_group_id": {"name": "job_family_group_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group_id", "block_contents": "Identifier for the job family group."}, "doc.workday.job_family_group_summary": {"name": "job_family_group_summary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group_summary", "block_contents": "The summary of the job family group."}, "doc.workday.job_family_group_summaries": {"name": "job_family_group_summaries", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_group_summaries", "block_contents": "String array of all job family group summaries assigned to a job profile."}, "doc.workday.job_family_id": {"name": "job_family_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_id", "block_contents": "Identifier for the job family."}, "doc.workday.job_family_job_family_group": {"name": "job_family_job_family_group", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_job_family_group", "block_contents": "Represents the relationship between job families and job family groups in the Workday dataset."}, "doc.workday.job_family_job_profile": {"name": "job_family_job_profile", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_job_profile", "block_contents": "Represents the relationship between job families and job profiles in the Workday dataset."}, "doc.workday.job_family_summary": {"name": "job_family_summary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_summary", "block_contents": "The summary of the job family."}, "doc.workday.job_family_summaries": {"name": "job_family_summaries", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_family_summaries", "block_contents": "String array of all job family summaries assigned to a job profile."}, "doc.workday.job_group_id": {"name": "job_group_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_group_id", "block_contents": "The unique identifier for the job group."}, "doc.workday.job_posting_title": {"name": "job_posting_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_posting_title", "block_contents": "Title used for job postings associated with the position."}, "doc.workday.job_private_title": {"name": "job_private_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_private_title", "block_contents": "The private title associated with the job."}, "doc.workday.job_profile": {"name": "job_profile", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_profile", "block_contents": "Each record represents a job profile, providing details on roles, responsibilities, and associated attributes."}, "doc.workday.job_profile_code": {"name": "job_profile_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_profile_code", "block_contents": "Code assigned to the job profile."}, "doc.workday.job_profile_description": {"name": "job_profile_description", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_profile_description", "block_contents": "Brief description of the job profile."}, "doc.workday.job_profile_id": {"name": "job_profile_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_profile_id", "block_contents": "Identifier for the job profile."}, "doc.workday.job_summary": {"name": "job_summary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_summary", "block_contents": "The summary of the job."}, "doc.workday.job_title": {"name": "job_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.job_title", "block_contents": "The title of the job for the worker."}, "doc.workday.last_date_for_which_paid": {"name": "last_date_for_which_paid", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_date_for_which_paid", "block_contents": "The last date being paid before leave."}, "doc.workday.last_datefor_which_paid": {"name": "last_datefor_which_paid", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_datefor_which_paid", "block_contents": "Last date for which the worker was paid."}, "doc.workday.last_medical_exam_date": {"name": "last_medical_exam_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_medical_exam_date", "block_contents": "The date of the last medical exam."}, "doc.workday.last_medical_exam_valid_to": {"name": "last_medical_exam_valid_to", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_medical_exam_valid_to", "block_contents": "The validity date of the last medical exam."}, "doc.workday.last_name": {"name": "last_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_name", "block_contents": "The last name or surname of the individual."}, "doc.workday.last_updated_date_time": {"name": "last_updated_date_time", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.last_updated_date_time", "block_contents": "Date and time when the organization record was last updated."}, "doc.workday.leave_description": {"name": "leave_description", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_description", "block_contents": "Description of the type of leave"}, "doc.workday.leave_end_date": {"name": "leave_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_end_date", "block_contents": "The end date of the leave."}, "doc.workday.leave_entitlement_override": {"name": "leave_entitlement_override", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_entitlement_override", "block_contents": "Override for leave entitlement."}, "doc.workday.leave_last_day_of_work": {"name": "leave_last_day_of_work", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_last_day_of_work", "block_contents": "The last day of work associated with the leave status."}, "doc.workday.leave_of_absence_type": {"name": "leave_of_absence_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_of_absence_type", "block_contents": "The type of leave of absence."}, "doc.workday.leave_percentage": {"name": "leave_percentage", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_percentage", "block_contents": "The percentage of leave."}, "doc.workday.leave_request_event_id": {"name": "leave_request_event_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_request_event_id", "block_contents": "The unique identifier for the leave request event."}, "doc.workday.leave_return_event": {"name": "leave_return_event", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_return_event", "block_contents": "The event associated with the return from leave."}, "doc.workday.leave_start_date": {"name": "leave_start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_start_date", "block_contents": "The start date of the leave."}, "doc.workday.leave_status_code": {"name": "leave_status_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_status_code", "block_contents": "The code indicating the status of the leave."}, "doc.workday.leave_type_reason": {"name": "leave_type_reason", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.leave_type_reason", "block_contents": "The reason for the leave type."}, "doc.workday.level": {"name": "level", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.level", "block_contents": "Level associated with the job profile."}, "doc.workday.local_first_name": {"name": "local_first_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_first_name", "block_contents": "The local or native first name of the individual."}, "doc.workday.local_first_name_2": {"name": "local_first_name_2", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_first_name_2", "block_contents": "Additional local or native first name, if applicable."}, "doc.workday.local_hukou": {"name": "local_hukou", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_hukou", "block_contents": "Flag indicating whether the Hukou is local."}, "doc.workday.local_last_name": {"name": "local_last_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_last_name", "block_contents": "The local or native last name of the individual."}, "doc.workday.local_last_name_2": {"name": "local_last_name_2", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_last_name_2", "block_contents": "Additional local or native last name, if applicable."}, "doc.workday.local_middle_name": {"name": "local_middle_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_middle_name", "block_contents": "The local or native middle name of the individual."}, "doc.workday.local_middle_name_2": {"name": "local_middle_name_2", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_middle_name_2", "block_contents": "Additional local or native middle name, if applicable."}, "doc.workday.local_secondary_last_name": {"name": "local_secondary_last_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_secondary_last_name", "block_contents": "Secondary local or native last name or surname, if applicable."}, "doc.workday.local_secondary_last_name_2": {"name": "local_secondary_last_name_2", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_secondary_last_name_2", "block_contents": "Additional secondary local or native last name, if applicable."}, "doc.workday.local_termination_reason": {"name": "local_termination_reason", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.local_termination_reason", "block_contents": "The reason for local termination of the worker."}, "doc.workday.location": {"name": "location", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.location", "block_contents": "Location associated with the organization."}, "doc.workday.location_during_leave": {"name": "location_during_leave", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.location_during_leave", "block_contents": "The location during the leave."}, "doc.workday.management_level": {"name": "management_level", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.management_level", "block_contents": "Management level associated with the job profile."}, "doc.workday.management_level_code": {"name": "management_level_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.management_level_code", "block_contents": "Code indicating the management level associated with the job profile."}, "doc.workday.manager_id": {"name": "manager_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.manager_id", "block_contents": "Identifier for the manager associated with the organization."}, "doc.workday.marital_status": {"name": "marital_status", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.marital_status", "block_contents": "The marital status of the individual."}, "doc.workday.marital_status_date": {"name": "marital_status_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.marital_status_date", "block_contents": "The date of the marital status."}, "doc.workday.medical_exam_notes": {"name": "medical_exam_notes", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.medical_exam_notes", "block_contents": "Notes from the medical exam."}, "doc.workday.middle_name": {"name": "middle_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.middle_name", "block_contents": "The middle name of the individual."}, "doc.workday.military_service": {"name": "military_service", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.military_service", "block_contents": "Represents information about an individual's military service in the Workday system."}, "doc.workday.military_status": {"name": "military_status", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.military_status", "block_contents": "The military status of the worker."}, "doc.workday.months_continuous_prior_employment": {"name": "months_continuous_prior_employment", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.months_continuous_prior_employment", "block_contents": "Number of months of continuous prior employment."}, "doc.workday.most_recent_level": {"name": "most_recent_level", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_level", "block_contents": "The most recent level of the worker."}, "doc.workday.most_recent_location": {"name": "most_recent_location", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_location", "block_contents": "The most recent location of the worker."}, "doc.workday.most_recent_position_effective_date": {"name": "most_recent_position_effective_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_position_effective_date", "block_contents": "The most recent position effective date for the employee."}, "doc.workday.most_recent_position_end_date": {"name": "most_recent_position_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_position_end_date", "block_contents": "The most recent position end date for the employee."}, "doc.workday.most_recent_position_start_date": {"name": "most_recent_position_start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_position_start_date", "block_contents": "The most recent position start date for the employee."}, "doc.workday.most_recent_position_type": {"name": "most_recent_position_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.most_recent_position_type", "block_contents": "The most recent position type of the worker."}, "doc.workday.multiple_child_indicator": {"name": "multiple_child_indicator", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.multiple_child_indicator", "block_contents": "Indicator for multiple children."}, "doc.workday.native_region": {"name": "native_region", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.native_region", "block_contents": "The native region of the individual."}, "doc.workday.native_region_code": {"name": "native_region_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.native_region_code", "block_contents": "The code of the native region."}, "doc.workday.not_returning": {"name": "not_returning", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.not_returning", "block_contents": "Flag indicating whether the worker is not returning."}, "doc.workday.notes": {"name": "notes", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.notes", "block_contents": "Additional notes or comments related to the military service record."}, "doc.workday.number_of_babies_adopted_children": {"name": "number_of_babies_adopted_children", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.number_of_babies_adopted_children", "block_contents": "The number of babies adopted by the worker."}, "doc.workday.number_of_child_dependents": {"name": "number_of_child_dependents", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.number_of_child_dependents", "block_contents": "The number of child dependents."}, "doc.workday.number_of_previous_births": {"name": "number_of_previous_births", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.number_of_previous_births", "block_contents": "The number of previous births."}, "doc.workday.number_of_previous_maternity_leaves": {"name": "number_of_previous_maternity_leaves", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.number_of_previous_maternity_leaves", "block_contents": "The number of previous maternity leaves."}, "doc.workday.on_leave": {"name": "on_leave", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.on_leave", "block_contents": "Indicator for whether the worker is on leave."}, "doc.workday.organization": {"name": "organization", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization", "block_contents": "Identifier for the organization."}, "doc.workday.organization_code": {"name": "organization_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_code", "block_contents": "Code associated with the organization."}, "doc.workday.organization_description": {"name": "organization_description", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_description", "block_contents": "The description of the organization."}, "doc.workday.organization_id": {"name": "organization_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_id", "block_contents": "Identifier for the organization."}, "doc.workday.organization_job_family": {"name": "organization_job_family", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_job_family", "block_contents": "Captures the associations between different organizational entities and the job families they are linked to."}, "doc.workday.organization_location": {"name": "organization_location", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_location", "block_contents": "The location of the organization."}, "doc.workday.organization_name": {"name": "organization_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_name", "block_contents": "Name of the organization."}, "doc.workday.organization_owner_id": {"name": "organization_owner_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_owner_id", "block_contents": "Identifier for the owner of the organization."}, "doc.workday.organization_role": {"name": "organization_role", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_role", "block_contents": "Captures the associations between different organizational entities and the roles assigned to them, providing valuable insights into organizational roles and responsibilities."}, "doc.workday.organization_role_code": {"name": "organization_role_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_role_code", "block_contents": "Code assigned to the organization role for reference and categorization."}, "doc.workday.organization_role_id": {"name": "organization_role_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_role_id", "block_contents": "The role id associated with the organization."}, "doc.workday.organization_role_worker": {"name": "organization_role_worker", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_role_worker", "block_contents": "Captures the linkages between individual workers, the organizations to which they belong, and the roles they fulfill."}, "doc.workday.organization_sub_type": {"name": "organization_sub_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_sub_type", "block_contents": "Subtype or classification of the organization."}, "doc.workday.organization_type": {"name": "organization_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_type", "block_contents": "Type or category of the organization."}, "doc.workday.organization_worker_code": {"name": "organization_worker_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.organization_worker_code", "block_contents": "The worker code associated with the organization."}, "doc.workday.original_hire_date": {"name": "original_hire_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.original_hire_date", "block_contents": "The original date when the worker was hired."}, "doc.workday.paid_fte": {"name": "paid_fte", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.paid_fte", "block_contents": "The paid full-time equivalent (FTE) associated with the worker position."}, "doc.workday.paid_time_off_accrual_effect": {"name": "paid_time_off_accrual_effect", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.paid_time_off_accrual_effect", "block_contents": "The effect of leave on paid time off accrual."}, "doc.workday.pay_group": {"name": "pay_group", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group", "block_contents": "The pay group associated with the worker position."}, "doc.workday.pay_group_frequency_currency": {"name": "pay_group_frequency_currency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group_frequency_currency", "block_contents": "Currency code used for the worker's pay group frequency."}, "doc.workday.pay_group_frequency_frequency": {"name": "pay_group_frequency_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group_frequency_frequency", "block_contents": "Frequency of payment for the worker's pay group."}, "doc.workday.pay_group_frequency_primary_compensation_basis": {"name": "pay_group_frequency_primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group_frequency_primary_compensation_basis", "block_contents": "Primary compensation basis used for the worker's pay group."}, "doc.workday.pay_group_frequency_total_base_pay": {"name": "pay_group_frequency_total_base_pay", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group_frequency_total_base_pay", "block_contents": "Total base pay for the worker's pay group."}, "doc.workday.pay_group_frequency_total_salary_and_allowances": {"name": "pay_group_frequency_total_salary_and_allowances", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_group_frequency_total_salary_and_allowances", "block_contents": "Total salary and allowances for the worker's pay group."}, "doc.workday.pay_rate": {"name": "pay_rate", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_rate", "block_contents": "The pay rate associated with the worker position."}, "doc.workday.pay_rate_type": {"name": "pay_rate_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_rate_type", "block_contents": "The type of pay rate associated with the worker position."}, "doc.workday.pay_through_date": {"name": "pay_through_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.pay_through_date", "block_contents": "The date through which the worker is paid."}, "doc.workday.payroll_effect": {"name": "payroll_effect", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.payroll_effect", "block_contents": "The effect of leave on payroll."}, "doc.workday.payroll_entity": {"name": "payroll_entity", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.payroll_entity", "block_contents": "The payroll entity associated with the worker position."}, "doc.workday.payroll_file_number": {"name": "payroll_file_number", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.payroll_file_number", "block_contents": "The file number associated with payroll for the worker position."}, "doc.workday.person_contact_email_address": {"name": "person_contact_email_address", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.person_contact_email_address", "block_contents": "Represents the email addresses associated with a person in the Workday system."}, "doc.workday.person_contact_email_address_id": {"name": "person_contact_email_address_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.person_contact_email_address_id", "block_contents": "The identifier of the personal contact email address."}, "doc.workday.person_name": {"name": "person_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.person_name", "block_contents": "Represents the name information for an individual in the Workday system."}, "doc.workday.person_name_type": {"name": "person_name_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.person_name_type", "block_contents": "The type or category of the person name (e.g., legal name, preferred name)."}, "doc.workday.personal_info_system_id": {"name": "personal_info_system_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personal_info_system_id", "block_contents": "The system ID associated with the personal information of the individual."}, "doc.workday.personal_information": {"name": "personal_information", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personal_information", "block_contents": "The personal information associated with each worker."}, "doc.workday.personal_information_ethnicity": {"name": "personal_information_ethnicity", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personal_information_ethnicity", "block_contents": "Represents information about the ethnicity of an individual in the Workday system."}, "doc.workday.personal_information_id": {"name": "personal_information_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personal_information_id", "block_contents": "The identifier for each personal information record."}, "doc.workday.personal_information_type": {"name": "personal_information_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personal_information_type", "block_contents": "The type of personal information record."}, "doc.workday.personnel_file_agency": {"name": "personnel_file_agency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.personnel_file_agency", "block_contents": "The agency associated with the personnel file."}, "doc.workday.political_affiliation": {"name": "political_affiliation", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.political_affiliation", "block_contents": "The political affiliation of the individual."}, "doc.workday.position": {"name": "position", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position", "block_contents": "Resource for understanding the details and attributes associated with each position."}, "doc.workday.position_code": {"name": "position_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_code", "block_contents": "Code associated with the position for reference and categorization."}, "doc.workday.position_days": {"name": "position_days", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_days", "block_contents": "The days the worker held positions at the company."}, "doc.workday.position_id": {"name": "position_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_id", "block_contents": "Identifier for the specific position."}, "doc.workday.position_job_profile": {"name": "position_job_profile", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_job_profile", "block_contents": "Captures the associations between specific positions and the job profiles they are linked to."}, "doc.workday.position_job_profile_name": {"name": "position_job_profile_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_job_profile_name", "block_contents": "Name associated with the job profile linked to the position."}, "doc.workday.position_organization": {"name": "position_organization", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_organization", "block_contents": "Captures the associations between specific positions and the organizations to which they belong."}, "doc.workday.position_organization_type": {"name": "position_organization_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_organization_type", "block_contents": "Type or category of the position within the organization."}, "doc.workday.position_time_type_code": {"name": "position_time_type_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.position_time_type_code", "block_contents": "Code indicating the time type associated with the position."}, "doc.workday.prefix_salutation": {"name": "prefix_salutation", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.prefix_salutation", "block_contents": "The prefix or salutation before the name (e.g., Mr., Ms., Dr.)."}, "doc.workday.prefix_title": {"name": "prefix_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.prefix_title", "block_contents": "The prefix or title associated with the name (e.g., Professor)."}, "doc.workday.prefix_title_code": {"name": "prefix_title_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.prefix_title_code", "block_contents": "The code associated with the prefix or title."}, "doc.workday.primary_compensation_basis": {"name": "primary_compensation_basis", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_compensation_basis", "block_contents": "Primary basis of compensation for the position."}, "doc.workday.primary_compensation_basis_amount_change": {"name": "primary_compensation_basis_amount_change", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_compensation_basis_amount_change", "block_contents": "Change in the amount of the primary compensation basis."}, "doc.workday.primary_compensation_basis_percent_change": {"name": "primary_compensation_basis_percent_change", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_compensation_basis_percent_change", "block_contents": "Change in the percentage of the primary compensation basis."}, "doc.workday.primary_nationality": {"name": "primary_nationality", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_nationality", "block_contents": "The primary nationality of the individual."}, "doc.workday.primary_termination_category": {"name": "primary_termination_category", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_termination_category", "block_contents": "The primary termination category for the worker."}, "doc.workday.primary_termination_reason": {"name": "primary_termination_reason", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_termination_reason", "block_contents": "The primary termination reason for the worker."}, "doc.workday.private_title": {"name": "private_title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.private_title", "block_contents": "Private title associated with the job profile."}, "doc.workday.probation_end_date": {"name": "probation_end_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.probation_end_date", "block_contents": "The date when the worker's probation ends."}, "doc.workday.probation_start_date": {"name": "probation_start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.probation_start_date", "block_contents": "The date when the worker's probation starts."}, "doc.workday.professional_suffix": {"name": "professional_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.professional_suffix", "block_contents": "The professional suffix, if applicable (e.g., Esq., CPA)."}, "doc.workday.public_job": {"name": "public_job", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.public_job", "block_contents": "Flag indicating whether the job is public."}, "doc.workday.rank": {"name": "rank", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.rank", "block_contents": "The rank achieved by the individual during military service."}, "doc.workday.reason_reference_id": {"name": "reason_reference_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.reason_reference_id", "block_contents": "The reference ID for the termination reason."}, "doc.workday.referral_payment_plan": {"name": "referral_payment_plan", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.referral_payment_plan", "block_contents": "Referral payment plan associated with the job profile."}, "doc.workday.region_of_birth": {"name": "region_of_birth", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.region_of_birth", "block_contents": "The region of birth of the individual."}, "doc.workday.region_of_birth_code": {"name": "region_of_birth_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.region_of_birth_code", "block_contents": "The code of the region of birth."}, "doc.workday.regrettable_termination": {"name": "regrettable_termination", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.regrettable_termination", "block_contents": "Flag indicating whether the worker's termination is regrettable."}, "doc.workday.regular_paid_equivalent_hours": {"name": "regular_paid_equivalent_hours", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.regular_paid_equivalent_hours", "block_contents": "The regular paid equivalent hours associated with the worker position."}, "doc.workday.rehire": {"name": "rehire", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.rehire", "block_contents": "Flag indicating whether the worker is eligible for rehire."}, "doc.workday.religion": {"name": "religion", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.religion", "block_contents": "The religion of the individual."}, "doc.workday.religious_suffix": {"name": "religious_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.religious_suffix", "block_contents": "The religious suffix, if applicable."}, "doc.workday.resignation_date": {"name": "resignation_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.resignation_date", "block_contents": "The date when the worker resigned."}, "doc.workday.retired": {"name": "retired", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.retired", "block_contents": "Flag indicating whether the worker is retired."}, "doc.workday.retirement_date": {"name": "retirement_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.retirement_date", "block_contents": "The date when the worker retired."}, "doc.workday.retirement_eligibility_date": {"name": "retirement_eligibility_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.retirement_eligibility_date", "block_contents": "The date when the worker becomes eligible for retirement."}, "doc.workday.return_unknown": {"name": "return_unknown", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.return_unknown", "block_contents": "Flag indicating whether the worker's return status is unknown."}, "doc.workday.role_id": {"name": "role_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.role_id", "block_contents": "Identifier for the specific role."}, "doc.workday.royal_suffix": {"name": "royal_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.royal_suffix", "block_contents": "The royal suffix, if applicable."}, "doc.workday.scheduled_weekly_hours": {"name": "scheduled_weekly_hours", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.scheduled_weekly_hours", "block_contents": "The scheduled weekly hours associated with the worker position."}, "doc.workday.secondary_last_name": {"name": "secondary_last_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.secondary_last_name", "block_contents": "Secondary last name or surname, if applicable."}, "doc.workday.seniority_date": {"name": "seniority_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.seniority_date", "block_contents": "The date when the worker's seniority is recorded."}, "doc.workday.service": {"name": "service", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.service", "block_contents": "The specific military service branch in which the individual served."}, "doc.workday.service_type": {"name": "service_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.service_type", "block_contents": "The type or category of military service (e.g., active duty, reserve, etc.)."}, "doc.workday.severance_date": {"name": "severance_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.severance_date", "block_contents": "The date when the worker's severance is recorded."}, "doc.workday.single_parent_indicator": {"name": "single_parent_indicator", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.single_parent_indicator", "block_contents": "Indicator for a single parent."}, "doc.workday.social_benefit": {"name": "social_benefit", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.social_benefit", "block_contents": "The social benefit associated with the individual."}, "doc.workday.social_security_disability_code": {"name": "social_security_disability_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.social_security_disability_code", "block_contents": "The code indicating social security disability."}, "doc.workday.social_suffix": {"name": "social_suffix", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.social_suffix", "block_contents": "The social suffix, if applicable."}, "doc.workday.social_suffix_id": {"name": "social_suffix_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.social_suffix_id", "block_contents": "The identifier for the social suffix."}, "doc.workday.specify_paid_fte": {"name": "specify_paid_fte", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.specify_paid_fte", "block_contents": "Flag indicating whether to specify paid FTE for the worker position."}, "doc.workday.specify_working_fte": {"name": "specify_working_fte", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.specify_working_fte", "block_contents": "Flag indicating whether to specify working FTE for the worker position."}, "doc.workday.staffing_model": {"name": "staffing_model", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.staffing_model", "block_contents": "Staffing model associated with the organization"}, "doc.workday.start_date": {"name": "start_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.start_date", "block_contents": "The start date of the worker position."}, "doc.workday.start_international_assignment_reason": {"name": "start_international_assignment_reason", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.start_international_assignment_reason", "block_contents": "The reason for starting an international assignment associated with the worker position."}, "doc.workday.status": {"name": "status", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.status", "block_contents": "The status of the individual's military service (e.g., active, inactive, retired)."}, "doc.workday.status_begin_date": {"name": "status_begin_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.status_begin_date", "block_contents": "The date on which the current military service status began."}, "doc.workday.stock_vesting_effect": {"name": "stock_vesting_effect", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.stock_vesting_effect", "block_contents": "The effect of leave on stock vesting."}, "doc.workday.stop_payment_date": {"name": "stop_payment_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.stop_payment_date", "block_contents": "The date when stop payment occurs."}, "doc.workday.summary": {"name": "summary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.summary", "block_contents": "Summary or overview of the job profile."}, "doc.workday.superior_organization_id": {"name": "superior_organization_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.superior_organization_id", "block_contents": "Identifier for the superior organization, if applicable."}, "doc.workday.supervisory_organization_id": {"name": "supervisory_organization_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.supervisory_organization_id", "block_contents": "Identifier for the supervisory organization associated with the position."}, "doc.workday.supervisory_position_availability_date": {"name": "supervisory_position_availability_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.supervisory_position_availability_date", "block_contents": "Availability date for supervisory positions within the organization."}, "doc.workday.supervisory_position_earliest_hire_date": {"name": "supervisory_position_earliest_hire_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.supervisory_position_earliest_hire_date", "block_contents": "Earliest hire date for supervisory positions within the organization."}, "doc.workday.supervisory_position_time_type": {"name": "supervisory_position_time_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.supervisory_position_time_type", "block_contents": "Time type associated with supervisory positions."}, "doc.workday.supervisory_position_worker_type": {"name": "supervisory_position_worker_type", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.supervisory_position_worker_type", "block_contents": "Worker type associated with supervisory positions."}, "doc.workday.terminated": {"name": "terminated", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.terminated", "block_contents": "Flag indicating whether the worker is terminated."}, "doc.workday.termination_date": {"name": "termination_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.termination_date", "block_contents": "The date when the worker is terminated."}, "doc.workday.termination_involuntary": {"name": "termination_involuntary", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.termination_involuntary", "block_contents": "Flag indicating whether the termination is involuntary."}, "doc.workday.termination_last_day_of_work": {"name": "termination_last_day_of_work", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.termination_last_day_of_work", "block_contents": "The last day of work for the worker during termination."}, "doc.workday.tertiary_last_name": {"name": "tertiary_last_name", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.tertiary_last_name", "block_contents": "Tertiary last name or surname, if applicable."}, "doc.workday.time_off_service_date": {"name": "time_off_service_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.time_off_service_date", "block_contents": "The date when the worker's time-off service starts."}, "doc.workday.title": {"name": "title", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.title", "block_contents": "Title associated with the job profile."}, "doc.workday.tobacco_use": {"name": "tobacco_use", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.tobacco_use", "block_contents": "Flag indicating whether the individual uses tobacco."}, "doc.workday.top_level_organization_id": {"name": "top_level_organization_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.top_level_organization_id", "block_contents": "Identifier for the top-level organization, if applicable."}, "doc.workday.union_code": {"name": "union_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.union_code", "block_contents": "Code associated with the union related to the job profile."}, "doc.workday.union_membership_requirement": {"name": "union_membership_requirement", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.union_membership_requirement", "block_contents": "Flag indicating whether union membership is a requirement for the job profile."}, "doc.workday.universal_id": {"name": "universal_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.universal_id", "block_contents": "The universal ID associated with the worker."}, "doc.workday.user_id": {"name": "user_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.user_id", "block_contents": "The identifier for the user associated with the worker."}, "doc.workday.vesting_date": {"name": "vesting_date", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.vesting_date", "block_contents": "The date when the worker's vesting starts."}, "doc.workday.visibility": {"name": "visibility", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.visibility", "block_contents": "Visibility level of the organization."}, "doc.workday.week_of_confinement": {"name": "week_of_confinement", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.week_of_confinement", "block_contents": "Indicator for whether the leave is work-related."}, "doc.workday.work_hours_profile": {"name": "work_hours_profile", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_hours_profile", "block_contents": "The work hours profile associated with the worker position."}, "doc.workday.work_related": {"name": "work_related", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_related", "block_contents": "Indicator for whether the leave is work-related."}, "doc.workday.work_shift": {"name": "work_shift", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_shift", "block_contents": "The work shift associated with the worker position."}, "doc.workday.work_shift_required": {"name": "work_shift_required", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_shift_required", "block_contents": "Flag indicating whether a work shift is required."}, "doc.workday.work_space": {"name": "work_space", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_space", "block_contents": "The work space associated with the worker position."}, "doc.workday.work_study_award_source_code": {"name": "work_study_award_source_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_study_award_source_code", "block_contents": "Code associated with the source of work study awards."}, "doc.workday.work_study_requirement_option_code": {"name": "work_study_requirement_option_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.work_study_requirement_option_code", "block_contents": "Code associated with work study requirement options."}, "doc.workday.workday__employee_overview": {"name": "workday__employee_overview", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.workday__employee_overview", "block_contents": "Each record represents an employee with enriched personal information and the positions they hold. This helps measure employee demographic and geographical distribution, overall retention and turnover, and compensation analysis of their employees."}, "doc.workday.workday__job_overview": {"name": "workday__job_overview", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.workday__job_overview", "block_contents": "Each record represents a job with enriched details on job profiles and job families. This allows users to understand recruitment patterns and details within a job and job groupings."}, "doc.workday.workday__role_overview": {"name": "workday__role_overview", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.workday__role_overview", "block_contents": "Each record represents a role in an organization, enhanced with additional organizational details."}, "doc.workday.workday__organization_overview": {"name": "workday__organization_overview", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.workday__organization_overview", "block_contents": "Each record represents organization, organization roles, as well as positions and workers tied to these organizations. This allows end users to slice organizational data at any grain to better analyze organizational structures."}, "doc.workday.workday__position_overview": {"name": "workday__position_overview", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.workday__position_overview", "block_contents": "Each record represents a position with enriched data on positions. This allows end users to understand position availabilities, vacancies, cost to optimize hiring efforts."}, "doc.workday.worker": {"name": "worker", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker", "block_contents": "This table serves as a central repository for details related to the employment status, compensation, and other key attributes of each worker."}, "doc.workday.worker_code": {"name": "worker_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_code", "block_contents": "The code associated with the worker."}, "doc.workday.worker_for_filled_position_id": {"name": "worker_for_filled_position_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_for_filled_position_id", "block_contents": "Identifier for the worker filling the position, if applicable."}, "doc.workday.worker_hours_profile_classification": {"name": "worker_hours_profile_classification", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_hours_profile_classification", "block_contents": "The classification of worker hours profile associated with the worker position."}, "doc.workday.worker_id": {"name": "worker_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_id", "block_contents": "Unique identifier for the worker."}, "doc.workday.worker_leave_status": {"name": "worker_leave_status", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_leave_status", "block_contents": "Represents the leave status of workers in the Workday system."}, "doc.workday.worker_levels": {"name": "worker_levels", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_levels", "block_contents": "The number of levels the worker has worked at."}, "doc.workday.worker_position": {"name": "worker_position", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_position", "block_contents": "Represents the positions held by workers in the Workday system"}, "doc.workday.worker_position_organization": {"name": "worker_position_organization", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_position_organization", "block_contents": "Ties together workers to the positions and organizations they hold in the Workday system."}, "doc.workday.worker_position_id": {"name": "worker_position_id", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_position_id", "block_contents": "Identifier for the worker associated with the position."}, "doc.workday.worker_positions": {"name": "worker_positions", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_positions", "block_contents": "The number of positions the worker has held"}, "doc.workday.worker_type_code": {"name": "worker_type_code", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.worker_type_code", "block_contents": "Code indicating the type of worker associated with the position."}, "doc.workday.working_fte": {"name": "working_fte", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.working_fte", "block_contents": "The working full-time equivalent (FTE) associated with the worker position."}, "doc.workday.working_time_frequency": {"name": "working_time_frequency", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.working_time_frequency", "block_contents": "The frequency of working time associated with the worker position."}, "doc.workday.working_time_unit": {"name": "working_time_unit", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.working_time_unit", "block_contents": "The unit of working time associated with the worker position."}, "doc.workday.working_time_value": {"name": "working_time_value", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.working_time_value", "block_contents": "The value of working time associated with the worker position."}, "doc.workday.date_of_pay_group_assignment": {"name": "date_of_pay_group_assignment", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.date_of_pay_group_assignment", "block_contents": "Date a group's pay is assigned to be processed."}, "doc.workday.primary_business_site": {"name": "primary_business_site", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.primary_business_site", "block_contents": "Primary location a worker's business is situated."}, "doc.workday.used_in_change_organization_assignments": {"name": "used_in_change_organization_assignments", "resource_type": "doc", "package_name": "workday", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.workday.used_in_change_organization_assignments", "block_contents": "If a worker has opted to change these organization assignments."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.my_new_project.my_first_dbt_model": [], "model.my_new_project.my_second_dbt_model": ["model.my_new_project.my_first_dbt_model"], "model.workday.workday__employee_overview": ["model.workday.int_workday__personal_details", "model.workday.int_workday__worker_details", "model.workday.int_workday__worker_position_enriched"], "model.workday.workday__job_overview": ["model.workday.stg_workday__job_family", "model.workday.stg_workday__job_family_group", "model.workday.stg_workday__job_family_job_family_group", "model.workday.stg_workday__job_family_job_profile", "model.workday.stg_workday__job_profile"], "model.workday.workday__position_overview": ["model.workday.stg_workday__position", "model.workday.stg_workday__position_job_profile"], "model.workday.workday__organization_overview": ["model.workday.stg_workday__organization", "model.workday.stg_workday__organization_role", "model.workday.stg_workday__worker_position_organization"], "model.workday.stg_workday__position": ["model.workday.stg_workday__position_base"], "model.workday.stg_workday__job_family_group": ["model.workday.stg_workday__job_family_group_base"], "model.workday.stg_workday__job_family_job_profile": ["model.workday.stg_workday__job_family_job_profile_base"], "model.workday.stg_workday__organization_role_worker": ["model.workday.stg_workday__organization_role_worker_base"], "model.workday.stg_workday__organization_role": ["model.workday.stg_workday__organization_role_base"], "model.workday.stg_workday__worker_position": ["model.workday.stg_workday__worker_position_base"], "model.workday.stg_workday__person_contact_email_address": ["model.workday.stg_workday__person_contact_email_address_base"], "model.workday.stg_workday__position_job_profile": ["model.workday.stg_workday__position_job_profile_base"], "model.workday.stg_workday__worker_position_organization": ["model.workday.stg_workday__worker_position_organization_base"], "model.workday.stg_workday__job_profile": ["model.workday.stg_workday__job_profile_base"], "model.workday.stg_workday__position_organization": ["model.workday.stg_workday__position_organization_base"], "model.workday.stg_workday__worker_leave_status": ["model.workday.stg_workday__worker_leave_status_base"], "model.workday.stg_workday__person_name": ["model.workday.stg_workday__person_name_base"], "model.workday.stg_workday__personal_information_ethnicity": ["model.workday.stg_workday__personal_information_ethnicity_base"], "model.workday.stg_workday__organization_job_family": ["model.workday.stg_workday__organization_job_family_base"], "model.workday.stg_workday__job_family": ["model.workday.stg_workday__job_family_base"], "model.workday.stg_workday__military_service": ["model.workday.stg_workday__military_service_base"], "model.workday.stg_workday__personal_information": ["model.workday.stg_workday__personal_information_base"], "model.workday.stg_workday__job_family_job_family_group": ["model.workday.stg_workday__job_family_job_family_group_base"], "model.workday.stg_workday__worker": ["model.workday.stg_workday__worker_base"], "model.workday.stg_workday__organization": ["model.workday.stg_workday__organization_base"], "model.workday.stg_workday__job_family_job_family_group_base": ["source.workday.workday.job_family_job_family_group"], "model.workday.stg_workday__personal_information_ethnicity_base": ["source.workday.workday.personal_information_ethnicity"], "model.workday.stg_workday__job_family_group_base": ["source.workday.workday.job_family_group"], "model.workday.stg_workday__worker_position_organization_base": ["source.workday.workday.worker_position_organization_history"], "model.workday.stg_workday__position_base": ["source.workday.workday.position"], "model.workday.stg_workday__person_contact_email_address_base": ["source.workday.workday.person_contact_email_address"], "model.workday.stg_workday__organization_job_family_base": ["source.workday.workday.organization_job_family"], "model.workday.stg_workday__job_family_job_profile_base": ["source.workday.workday.job_family_job_profile"], "model.workday.stg_workday__position_organization_base": ["source.workday.workday.position_organization"], "model.workday.stg_workday__organization_role_base": ["source.workday.workday.organization_role"], "model.workday.stg_workday__worker_leave_status_base": ["source.workday.workday.worker_leave_status"], "model.workday.stg_workday__job_family_base": ["source.workday.workday.job_family"], "model.workday.stg_workday__job_profile_base": ["source.workday.workday.job_profile"], "model.workday.stg_workday__organization_base": ["source.workday.workday.organization"], "model.workday.stg_workday__organization_role_worker_base": ["source.workday.workday.organization_role_worker"], "model.workday.stg_workday__worker_base": ["source.workday.workday.worker_history"], "model.workday.stg_workday__position_job_profile_base": ["source.workday.workday.position_job_profile"], "model.workday.stg_workday__worker_position_base": ["source.workday.workday.worker_position_history"], "model.workday.stg_workday__person_name_base": ["source.workday.workday.person_name"], "model.workday.stg_workday__military_service_base": ["source.workday.workday.military_service"], "model.workday.stg_workday__personal_information_base": ["source.workday.workday.personal_information_history"], "model.workday.int_workday__worker_position_enriched": ["model.workday.stg_workday__worker_position"], "model.workday.int_workday__personal_details": ["model.workday.stg_workday__military_service", "model.workday.stg_workday__person_contact_email_address", "model.workday.stg_workday__person_name", "model.workday.stg_workday__personal_information", "model.workday.stg_workday__personal_information_ethnicity"], "model.workday.int_workday__worker_details": ["model.workday.stg_workday__worker"], "test.my_new_project.unique_my_first_dbt_model_id.16e066b321": ["model.my_new_project.my_first_dbt_model"], "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710": ["model.my_new_project.my_first_dbt_model"], "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493": ["model.my_new_project.my_second_dbt_model"], "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778": ["model.my_new_project.my_second_dbt_model"], "test.workday.not_null_workday__employee_overview_worker_id.a9f1737e97": ["model.workday.workday__employee_overview"], "test.workday.dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id.fc3f0049e6": ["model.workday.workday__employee_overview"], "test.workday.not_null_workday__job_overview_job_profile_id.dc998c6857": ["model.workday.workday__job_overview"], "test.workday.dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id.4c0858721c": ["model.workday.workday__job_overview"], "test.workday.not_null_workday__position_overview_position_id.603beb3f22": ["model.workday.workday__position_overview"], "test.workday.dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id.ab5c35f587": ["model.workday.workday__position_overview"], "test.workday.not_null_workday__organization_overview_organization_id.5b1070ba31": ["model.workday.workday__organization_overview"], "test.workday.not_null_workday__organization_overview_organization_role_id.a909dac412": ["model.workday.workday__organization_overview"], "test.workday.dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id.75cff5f3e5": ["model.workday.workday__organization_overview"], "test.workday.not_null_stg_workday__job_profile_job_profile_id.1166250eaa": ["model.workday.stg_workday__job_profile"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id.cf214684ed": ["model.workday.stg_workday__job_profile"], "test.workday.not_null_stg_workday__job_family_job_profile_job_family_id.f5bbfef4e8": ["model.workday.stg_workday__job_family_job_profile"], "test.workday.not_null_stg_workday__job_family_job_profile_job_profile_id.c7a636316c": ["model.workday.stg_workday__job_family_job_profile"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id.fed96122e7": ["model.workday.stg_workday__job_family_job_profile"], "test.workday.not_null_stg_workday__job_family_job_family_id.0dbfcdcd3f": ["model.workday.stg_workday__job_family"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id.9678e90d0e": ["model.workday.stg_workday__job_family"], "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_id.589a75cf0b": ["model.workday.stg_workday__job_family_job_family_group"], "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_group_id.f105a73bde": ["model.workday.stg_workday__job_family_job_family_group"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id.b4f7618b5a": ["model.workday.stg_workday__job_family_job_family_group"], "test.workday.not_null_stg_workday__job_family_group_job_family_group_id.e25ebb9009": ["model.workday.stg_workday__job_family_group"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id.c9dcd0e168": ["model.workday.stg_workday__job_family_group"], "test.workday.not_null_stg_workday__organization_role_organization_id.917651c7a7": ["model.workday.stg_workday__organization_role"], "test.workday.not_null_stg_workday__organization_role_organization_role_id.2ea32fe93f": ["model.workday.stg_workday__organization_role"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id.4d7bc3feaf": ["model.workday.stg_workday__organization_role"], "test.workday.not_null_stg_workday__organization_role_worker_organization_worker_code.ddc8d566ca": ["model.workday.stg_workday__organization_role_worker"], "test.workday.not_null_stg_workday__organization_role_worker_organization_id.b98960b9f5": ["model.workday.stg_workday__organization_role_worker"], "test.workday.not_null_stg_workday__organization_role_worker_role_id.1703a44b72": ["model.workday.stg_workday__organization_role_worker"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id.e5d078d6c4": ["model.workday.stg_workday__organization_role_worker"], "test.workday.not_null_stg_workday__organization_job_family_job_family_id.a2ab2ad617": ["model.workday.stg_workday__organization_job_family"], "test.workday.not_null_stg_workday__organization_job_family_organization_id.3fc5ce5e7e": ["model.workday.stg_workday__organization_job_family"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id.56b8e9156b": ["model.workday.stg_workday__organization_job_family"], "test.workday.not_null_stg_workday__organization_organization_id.f11f86e5c7": ["model.workday.stg_workday__organization"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id.4aab1c6db5": ["model.workday.stg_workday__organization"], "test.workday.not_null_stg_workday__position_organization_organization_id.567af692ad": ["model.workday.stg_workday__position_organization"], "test.workday.not_null_stg_workday__position_organization_position_id.f62eb486b7": ["model.workday.stg_workday__position_organization"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id.34a4df1e63": ["model.workday.stg_workday__position_organization"], "test.workday.not_null_stg_workday__position_position_id.8a8bc89d4e": ["model.workday.stg_workday__position"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id.a6b218cf83": ["model.workday.stg_workday__position"], "test.workday.not_null_stg_workday__position_job_profile_job_profile_id.214e63eb51": ["model.workday.stg_workday__position_job_profile"], "test.workday.not_null_stg_workday__position_job_profile_position_id.edebffbee7": ["model.workday.stg_workday__position_job_profile"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id.a1a5a991fb": ["model.workday.stg_workday__position_job_profile"], "test.workday.not_null_stg_workday__worker_worker_id.8dae310560": ["model.workday.stg_workday__worker"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id.e1ce9c23d8": ["model.workday.stg_workday__worker"], "test.workday.not_null_stg_workday__personal_information_worker_id.560ec905d1": ["model.workday.stg_workday__personal_information"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id.2d458129a6": ["model.workday.stg_workday__personal_information"], "test.workday.not_null_stg_workday__person_name_worker_id.666b7b3a90": ["model.workday.stg_workday__person_name"], "test.workday.not_null_stg_workday__person_name_person_name_type.59eb1d6f63": ["model.workday.stg_workday__person_name"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type.c4f63f27fd": ["model.workday.stg_workday__person_name"], "test.workday.not_null_stg_workday__personal_information_ethnicity_worker_id.08e20915fd": ["model.workday.stg_workday__personal_information_ethnicity"], "test.workday.not_null_stg_workday__personal_information_ethnicity_ethnicity_id.89c11054f2": ["model.workday.stg_workday__personal_information_ethnicity"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id.52eddf5fd3": ["model.workday.stg_workday__personal_information_ethnicity"], "test.workday.not_null_stg_workday__military_service_worker_id.a196487e38": ["model.workday.stg_workday__military_service"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id.77c49e46ff": ["model.workday.stg_workday__military_service"], "test.workday.not_null_stg_workday__person_contact_email_address_person_contact_email_address_id.b8e6adf279": ["model.workday.stg_workday__person_contact_email_address"], "test.workday.not_null_stg_workday__person_contact_email_address_worker_id.9237f19755": ["model.workday.stg_workday__person_contact_email_address"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id.ff90e55696": ["model.workday.stg_workday__person_contact_email_address"], "test.workday.not_null_stg_workday__worker_position_position_id.4dfd73b611": ["model.workday.stg_workday__worker_position"], "test.workday.not_null_stg_workday__worker_position_worker_id.98db71611d": ["model.workday.stg_workday__worker_position"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id.307e2e96c3": ["model.workday.stg_workday__worker_position"], "test.workday.not_null_stg_workday__worker_leave_status_leave_request_event_id.a172377761": ["model.workday.stg_workday__worker_leave_status"], "test.workday.not_null_stg_workday__worker_leave_status_worker_id.c899fb3a61": ["model.workday.stg_workday__worker_leave_status"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id.19d4edcafd": ["model.workday.stg_workday__worker_leave_status"], "test.workday.not_null_stg_workday__worker_position_organization_position_id.196dd9786d": ["model.workday.stg_workday__worker_position_organization"], "test.workday.not_null_stg_workday__worker_position_organization_worker_id.d8cf960f0b": ["model.workday.stg_workday__worker_position_organization"], "test.workday.not_null_stg_workday__worker_position_organization_organization_id.a79000dec1": ["model.workday.stg_workday__worker_position_organization"], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id.d63632b244": ["model.workday.stg_workday__worker_position_organization"], "source.workday.workday.job_profile": [], "source.workday.workday.job_family_job_profile": [], "source.workday.workday.job_family": [], "source.workday.workday.job_family_job_family_group": [], "source.workday.workday.job_family_group": [], "source.workday.workday.organization_role": [], "source.workday.workday.organization_role_worker": [], "source.workday.workday.organization_job_family": [], "source.workday.workday.organization": [], "source.workday.workday.position_organization": [], "source.workday.workday.position": [], "source.workday.workday.position_job_profile": [], "source.workday.workday.worker_history": [], "source.workday.workday.personal_information_history": [], "source.workday.workday.person_name": [], "source.workday.workday.personal_information_ethnicity": [], "source.workday.workday.military_service": [], "source.workday.workday.person_contact_email_address": [], "source.workday.workday.worker_position_history": [], "source.workday.workday.worker_leave_status": [], "source.workday.workday.worker_position_organization_history": []}, "child_map": {"model.my_new_project.my_first_dbt_model": ["model.my_new_project.my_second_dbt_model", "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710", "test.my_new_project.unique_my_first_dbt_model_id.16e066b321"], "model.my_new_project.my_second_dbt_model": ["test.my_new_project.not_null_my_second_dbt_model_id.151b76d778", "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493"], "model.workday.workday__employee_overview": ["test.workday.dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id.fc3f0049e6", "test.workday.not_null_workday__employee_overview_worker_id.a9f1737e97"], "model.workday.workday__job_overview": ["test.workday.dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id.4c0858721c", "test.workday.not_null_workday__job_overview_job_profile_id.dc998c6857"], "model.workday.workday__position_overview": ["test.workday.dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id.ab5c35f587", "test.workday.not_null_workday__position_overview_position_id.603beb3f22"], "model.workday.workday__organization_overview": ["test.workday.dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id.75cff5f3e5", "test.workday.not_null_workday__organization_overview_organization_id.5b1070ba31", "test.workday.not_null_workday__organization_overview_organization_role_id.a909dac412"], "model.workday.stg_workday__position": ["model.workday.workday__position_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id.a6b218cf83", "test.workday.not_null_stg_workday__position_position_id.8a8bc89d4e"], "model.workday.stg_workday__job_family_group": ["model.workday.workday__job_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id.c9dcd0e168", "test.workday.not_null_stg_workday__job_family_group_job_family_group_id.e25ebb9009"], "model.workday.stg_workday__job_family_job_profile": ["model.workday.workday__job_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id.fed96122e7", "test.workday.not_null_stg_workday__job_family_job_profile_job_family_id.f5bbfef4e8", "test.workday.not_null_stg_workday__job_family_job_profile_job_profile_id.c7a636316c"], "model.workday.stg_workday__organization_role_worker": ["test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id.e5d078d6c4", "test.workday.not_null_stg_workday__organization_role_worker_organization_id.b98960b9f5", "test.workday.not_null_stg_workday__organization_role_worker_organization_worker_code.ddc8d566ca", "test.workday.not_null_stg_workday__organization_role_worker_role_id.1703a44b72"], "model.workday.stg_workday__organization_role": ["model.workday.workday__organization_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id.4d7bc3feaf", "test.workday.not_null_stg_workday__organization_role_organization_id.917651c7a7", "test.workday.not_null_stg_workday__organization_role_organization_role_id.2ea32fe93f"], "model.workday.stg_workday__worker_position": ["model.workday.int_workday__worker_position_enriched", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id.307e2e96c3", "test.workday.not_null_stg_workday__worker_position_position_id.4dfd73b611", "test.workday.not_null_stg_workday__worker_position_worker_id.98db71611d"], "model.workday.stg_workday__person_contact_email_address": ["model.workday.int_workday__personal_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id.ff90e55696", "test.workday.not_null_stg_workday__person_contact_email_address_person_contact_email_address_id.b8e6adf279", "test.workday.not_null_stg_workday__person_contact_email_address_worker_id.9237f19755"], "model.workday.stg_workday__position_job_profile": ["model.workday.workday__position_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id.a1a5a991fb", "test.workday.not_null_stg_workday__position_job_profile_job_profile_id.214e63eb51", "test.workday.not_null_stg_workday__position_job_profile_position_id.edebffbee7"], "model.workday.stg_workday__worker_position_organization": ["model.workday.workday__organization_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id.d63632b244", "test.workday.not_null_stg_workday__worker_position_organization_organization_id.a79000dec1", "test.workday.not_null_stg_workday__worker_position_organization_position_id.196dd9786d", "test.workday.not_null_stg_workday__worker_position_organization_worker_id.d8cf960f0b"], "model.workday.stg_workday__job_profile": ["model.workday.workday__job_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id.cf214684ed", "test.workday.not_null_stg_workday__job_profile_job_profile_id.1166250eaa"], "model.workday.stg_workday__position_organization": ["test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id.34a4df1e63", "test.workday.not_null_stg_workday__position_organization_organization_id.567af692ad", "test.workday.not_null_stg_workday__position_organization_position_id.f62eb486b7"], "model.workday.stg_workday__worker_leave_status": ["test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id.19d4edcafd", "test.workday.not_null_stg_workday__worker_leave_status_leave_request_event_id.a172377761", "test.workday.not_null_stg_workday__worker_leave_status_worker_id.c899fb3a61"], "model.workday.stg_workday__person_name": ["model.workday.int_workday__personal_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type.c4f63f27fd", "test.workday.not_null_stg_workday__person_name_person_name_type.59eb1d6f63", "test.workday.not_null_stg_workday__person_name_worker_id.666b7b3a90"], "model.workday.stg_workday__personal_information_ethnicity": ["model.workday.int_workday__personal_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id.52eddf5fd3", "test.workday.not_null_stg_workday__personal_information_ethnicity_ethnicity_id.89c11054f2", "test.workday.not_null_stg_workday__personal_information_ethnicity_worker_id.08e20915fd"], "model.workday.stg_workday__organization_job_family": ["test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id.56b8e9156b", "test.workday.not_null_stg_workday__organization_job_family_job_family_id.a2ab2ad617", "test.workday.not_null_stg_workday__organization_job_family_organization_id.3fc5ce5e7e"], "model.workday.stg_workday__job_family": ["model.workday.workday__job_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id.9678e90d0e", "test.workday.not_null_stg_workday__job_family_job_family_id.0dbfcdcd3f"], "model.workday.stg_workday__military_service": ["model.workday.int_workday__personal_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id.77c49e46ff", "test.workday.not_null_stg_workday__military_service_worker_id.a196487e38"], "model.workday.stg_workday__personal_information": ["model.workday.int_workday__personal_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id.2d458129a6", "test.workday.not_null_stg_workday__personal_information_worker_id.560ec905d1"], "model.workday.stg_workday__job_family_job_family_group": ["model.workday.workday__job_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id.b4f7618b5a", "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_group_id.f105a73bde", "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_id.589a75cf0b"], "model.workday.stg_workday__worker": ["model.workday.int_workday__worker_details", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id.e1ce9c23d8", "test.workday.not_null_stg_workday__worker_worker_id.8dae310560"], "model.workday.stg_workday__organization": ["model.workday.workday__organization_overview", "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id.4aab1c6db5", "test.workday.not_null_stg_workday__organization_organization_id.f11f86e5c7"], "model.workday.stg_workday__job_family_job_family_group_base": ["model.workday.stg_workday__job_family_job_family_group"], "model.workday.stg_workday__personal_information_ethnicity_base": ["model.workday.stg_workday__personal_information_ethnicity"], "model.workday.stg_workday__job_family_group_base": ["model.workday.stg_workday__job_family_group"], "model.workday.stg_workday__worker_position_organization_base": ["model.workday.stg_workday__worker_position_organization"], "model.workday.stg_workday__position_base": ["model.workday.stg_workday__position"], "model.workday.stg_workday__person_contact_email_address_base": ["model.workday.stg_workday__person_contact_email_address"], "model.workday.stg_workday__organization_job_family_base": ["model.workday.stg_workday__organization_job_family"], "model.workday.stg_workday__job_family_job_profile_base": ["model.workday.stg_workday__job_family_job_profile"], "model.workday.stg_workday__position_organization_base": ["model.workday.stg_workday__position_organization"], "model.workday.stg_workday__organization_role_base": ["model.workday.stg_workday__organization_role"], "model.workday.stg_workday__worker_leave_status_base": ["model.workday.stg_workday__worker_leave_status"], "model.workday.stg_workday__job_family_base": ["model.workday.stg_workday__job_family"], "model.workday.stg_workday__job_profile_base": ["model.workday.stg_workday__job_profile"], "model.workday.stg_workday__organization_base": ["model.workday.stg_workday__organization"], "model.workday.stg_workday__organization_role_worker_base": ["model.workday.stg_workday__organization_role_worker"], "model.workday.stg_workday__worker_base": ["model.workday.stg_workday__worker"], "model.workday.stg_workday__position_job_profile_base": ["model.workday.stg_workday__position_job_profile"], "model.workday.stg_workday__worker_position_base": ["model.workday.stg_workday__worker_position"], "model.workday.stg_workday__person_name_base": ["model.workday.stg_workday__person_name"], "model.workday.stg_workday__military_service_base": ["model.workday.stg_workday__military_service"], "model.workday.stg_workday__personal_information_base": ["model.workday.stg_workday__personal_information"], "model.workday.int_workday__worker_position_enriched": ["model.workday.workday__employee_overview"], "model.workday.int_workday__personal_details": ["model.workday.workday__employee_overview"], "model.workday.int_workday__worker_details": ["model.workday.workday__employee_overview"], "test.my_new_project.unique_my_first_dbt_model_id.16e066b321": [], "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710": [], "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493": [], "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778": [], "test.workday.not_null_workday__employee_overview_worker_id.a9f1737e97": [], "test.workday.dbt_utils_unique_combination_of_columns_workday__employee_overview_source_relation__worker_id.fc3f0049e6": [], "test.workday.not_null_workday__job_overview_job_profile_id.dc998c6857": [], "test.workday.dbt_utils_unique_combination_of_columns_workday__job_overview_source_relation__job_profile_id.4c0858721c": [], "test.workday.not_null_workday__position_overview_position_id.603beb3f22": [], "test.workday.dbt_utils_unique_combination_of_columns_workday__position_overview_source_relation__position_id.ab5c35f587": [], "test.workday.not_null_workday__organization_overview_organization_id.5b1070ba31": [], "test.workday.not_null_workday__organization_overview_organization_role_id.a909dac412": [], "test.workday.dbt_utils_unique_combination_of_columns_workday__organization_overview_source_relation__organization_id__organization_role_id__position_id__worker_id.75cff5f3e5": [], "test.workday.not_null_stg_workday__job_profile_job_profile_id.1166250eaa": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_profile_source_relation__job_profile_id.cf214684ed": [], "test.workday.not_null_stg_workday__job_family_job_profile_job_family_id.f5bbfef4e8": [], "test.workday.not_null_stg_workday__job_family_job_profile_job_profile_id.c7a636316c": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_profile_source_relation__job_family_id__job_profile_id.fed96122e7": [], "test.workday.not_null_stg_workday__job_family_job_family_id.0dbfcdcd3f": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_source_relation__job_family_id.9678e90d0e": [], "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_id.589a75cf0b": [], "test.workday.not_null_stg_workday__job_family_job_family_group_job_family_group_id.f105a73bde": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_job_family_group_source_relation__job_family_id__job_family_group_id.b4f7618b5a": [], "test.workday.not_null_stg_workday__job_family_group_job_family_group_id.e25ebb9009": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__job_family_group_source_relation__job_family_group_id.c9dcd0e168": [], "test.workday.not_null_stg_workday__organization_role_organization_id.917651c7a7": [], "test.workday.not_null_stg_workday__organization_role_organization_role_id.2ea32fe93f": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_source_relation__organization_id__organization_role_id.4d7bc3feaf": [], "test.workday.not_null_stg_workday__organization_role_worker_organization_worker_code.ddc8d566ca": [], "test.workday.not_null_stg_workday__organization_role_worker_organization_id.b98960b9f5": [], "test.workday.not_null_stg_workday__organization_role_worker_role_id.1703a44b72": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_role_worker_source_relation__organization_worker_code__organization_id__role_id.e5d078d6c4": [], "test.workday.not_null_stg_workday__organization_job_family_job_family_id.a2ab2ad617": [], "test.workday.not_null_stg_workday__organization_job_family_organization_id.3fc5ce5e7e": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_job_family_source_relation__job_family_id__organization_id.56b8e9156b": [], "test.workday.not_null_stg_workday__organization_organization_id.f11f86e5c7": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__organization_source_relation__organization_id.4aab1c6db5": [], "test.workday.not_null_stg_workday__position_organization_organization_id.567af692ad": [], "test.workday.not_null_stg_workday__position_organization_position_id.f62eb486b7": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_organization_source_relation__organization_id__position_id.34a4df1e63": [], "test.workday.not_null_stg_workday__position_position_id.8a8bc89d4e": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_source_relation__position_id.a6b218cf83": [], "test.workday.not_null_stg_workday__position_job_profile_job_profile_id.214e63eb51": [], "test.workday.not_null_stg_workday__position_job_profile_position_id.edebffbee7": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__position_job_profile_source_relation__job_profile_id__position_id.a1a5a991fb": [], "test.workday.not_null_stg_workday__worker_worker_id.8dae310560": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_source_relation__worker_id.e1ce9c23d8": [], "test.workday.not_null_stg_workday__personal_information_worker_id.560ec905d1": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_source_relation__worker_id.2d458129a6": [], "test.workday.not_null_stg_workday__person_name_worker_id.666b7b3a90": [], "test.workday.not_null_stg_workday__person_name_person_name_type.59eb1d6f63": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_name_source_relation__worker_id__person_name_type.c4f63f27fd": [], "test.workday.not_null_stg_workday__personal_information_ethnicity_worker_id.08e20915fd": [], "test.workday.not_null_stg_workday__personal_information_ethnicity_ethnicity_id.89c11054f2": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__personal_information_ethnicity_source_relation__worker_id__ethnicity_id.52eddf5fd3": [], "test.workday.not_null_stg_workday__military_service_worker_id.a196487e38": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__military_service_source_relation__worker_id.77c49e46ff": [], "test.workday.not_null_stg_workday__person_contact_email_address_person_contact_email_address_id.b8e6adf279": [], "test.workday.not_null_stg_workday__person_contact_email_address_worker_id.9237f19755": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__person_contact_email_address_source_relation__worker_id__person_contact_email_address_id.ff90e55696": [], "test.workday.not_null_stg_workday__worker_position_position_id.4dfd73b611": [], "test.workday.not_null_stg_workday__worker_position_worker_id.98db71611d": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_source_relation__position_id__worker_id.307e2e96c3": [], "test.workday.not_null_stg_workday__worker_leave_status_leave_request_event_id.a172377761": [], "test.workday.not_null_stg_workday__worker_leave_status_worker_id.c899fb3a61": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_leave_status_source_relation__leave_request_event_id__worker_id.19d4edcafd": [], "test.workday.not_null_stg_workday__worker_position_organization_position_id.196dd9786d": [], "test.workday.not_null_stg_workday__worker_position_organization_worker_id.d8cf960f0b": [], "test.workday.not_null_stg_workday__worker_position_organization_organization_id.a79000dec1": [], "test.workday.dbt_utils_unique_combination_of_columns_stg_workday__worker_position_organization_source_relation__worker_id__position_id__organization_id.d63632b244": [], "source.workday.workday.job_profile": ["model.workday.stg_workday__job_profile_base"], "source.workday.workday.job_family_job_profile": ["model.workday.stg_workday__job_family_job_profile_base"], "source.workday.workday.job_family": ["model.workday.stg_workday__job_family_base"], "source.workday.workday.job_family_job_family_group": ["model.workday.stg_workday__job_family_job_family_group_base"], "source.workday.workday.job_family_group": ["model.workday.stg_workday__job_family_group_base"], "source.workday.workday.organization_role": ["model.workday.stg_workday__organization_role_base"], "source.workday.workday.organization_role_worker": ["model.workday.stg_workday__organization_role_worker_base"], "source.workday.workday.organization_job_family": ["model.workday.stg_workday__organization_job_family_base"], "source.workday.workday.organization": ["model.workday.stg_workday__organization_base"], "source.workday.workday.position_organization": ["model.workday.stg_workday__position_organization_base"], "source.workday.workday.position": ["model.workday.stg_workday__position_base"], "source.workday.workday.position_job_profile": ["model.workday.stg_workday__position_job_profile_base"], "source.workday.workday.worker_history": ["model.workday.stg_workday__worker_base"], "source.workday.workday.personal_information_history": ["model.workday.stg_workday__personal_information_base"], "source.workday.workday.person_name": ["model.workday.stg_workday__person_name_base"], "source.workday.workday.personal_information_ethnicity": ["model.workday.stg_workday__personal_information_ethnicity_base"], "source.workday.workday.military_service": ["model.workday.stg_workday__military_service_base"], "source.workday.workday.person_contact_email_address": ["model.workday.stg_workday__person_contact_email_address_base"], "source.workday.workday.worker_position_history": ["model.workday.stg_workday__worker_position_base"], "source.workday.workday.worker_leave_status": ["model.workday.stg_workday__worker_leave_status_base"], "source.workday.workday.worker_position_organization_history": ["model.workday.stg_workday__worker_position_organization_base"]}, "group_map": {}, "semantic_models": {}}